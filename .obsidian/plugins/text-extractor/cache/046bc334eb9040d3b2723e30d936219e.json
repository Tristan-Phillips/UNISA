{"path":"UNISA/98906 - BSc Science in Computing/COS2621 - Computer Organization/Unsorted/Assembly/nasmdoc.pdf","text":"NASM – The Netwide Assembler version 2.14.02 © 1996−2017 The NASM Development Team — All Rights Reserved Contents Chapter 1: Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 1.1 What Is NASM?. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 1.1.1 License Conditions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 Chapter 2: Running NASM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 2.1 NASM Command−Line Syntax . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19 2.1.1 The −o Option: Specifying the Output File Name . . . . . . . . . . . . . . . . . . . . . . 19 2.1.2 The −f Option: Specifying the Output File Format . . . . . . . . . . . . . . . . . . . . . 20 2.1.3 The −l Option: Generating a Listing File . . . . . . . . . . . . . . . . . . . . . . . . . . 20 2.1.4 The −M Option: Generate Makefile Dependencies. . . . . . . . . . . . . . . . . . . . . . 20 2.1.5 The −MG Option: Generate Makefile Dependencies . . . . . . . . . . . . . . . . . . . . . 20 2.1.6 The −MF Option: Set Makefile Dependency File. . . . . . . . . . . . . . . . . . . . . . . 20 2.1.7 The −MD Option: Assemble and Generate Dependencies . . . . . . . . . . . . . . . . . . 20 2.1.8 The −MT Option: Dependency Target Name . . . . . . . . . . . . . . . . . . . . . . . . 21 2.1.9 The −MQ Option: Dependency Target Name (Quoted) . . . . . . . . . . . . . . . . . . . 21 2.1.10 The −MP Option: Emit phony targets . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 2.1.11 The −MW Option: Watcom Make quoting style . . . . . . . . . . . . . . . . . . . . . . . 21 2.1.12 The −F Option: Selecting a Debug Information Format . . . . . . . . . . . . . . . . . . 21 2.1.13 The −g Option: Enabling Debug Information. . . . . . . . . . . . . . . . . . . . . . . . 21 2.1.14 The −X Option: Selecting an Error Reporting Format . . . . . . . . . . . . . . . . . . . 21 2.1.15 The −Z Option: Send Errors to a File. . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 2.1.16 The −s Option: Send Errors to stdout . . . . . . . . . . . . . . . . . . . . . . . . . . 22 2.1.17 The −i Option: Include File Search Directories . . . . . . . . . . . . . . . . . . . . . . 22 2.1.18 The −p Option: Pre−Include a File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 2.1.19 The −d Option: Pre−Define a Macro . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 2.1.20 The −u Option: Undefine a Macro . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 2.1.21 The −E Option: Preprocess Only. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 2.1.22 The −a Option: Don’t Preprocess At All . . . . . . . . . . . . . . . . . . . . . . . . . . 23 2.1.23 The −O Option: Specifying Multipass Optimization . . . . . . . . . . . . . . . . . . . . 24 2.1.24 The −t Option: Enable TASM Compatibility Mode . . . . . . . . . . . . . . . . . . . . . 24 2.1.25 The −w and −W Options: Enable or Disable Assembly Warnings . . . . . . . . . . . . . . 24 2.1.26 The −v Option: Display Version Info . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 2.1.27 The −y Option: Display Available Debug Info Formats. . . . . . . . . . . . . . . . . . . 26 2.1.28 The −−(g|l)prefix, −−(g|l)postfix Options. . . . . . . . . . . . . . . . . . . 26 3 2.1.29 The −−pragma Option . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 2.1.30 The −−before Option . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 2.1.31 The −−limit−X Option . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 2.1.32 The −−keep−all Option. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 2.1.33 The −−no−line Option . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 2.1.34 The NASMENV Environment Variable . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 2.2 Quick Start for MASM Users . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 2.2.1 NASM Is Case−Sensitive. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 27 2.2.2 NASM Requires Square Brackets For Memory References. . . . . . . . . . . . . . . . . . 27 2.2.3 NASM Doesn’t Store Variable Types. . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28ASSUME . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 2.2.5 NASM Doesn’t Support Memory Models . . . . . . . . . . . . . . . . . . . . . . . . . . 28 2.2.6 Floating−Point Differences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 2.2.7 Other Differences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 29 Chapter 3: The NASM Language . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 3.1 Layout of a NASM Source Line . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31 3.2 Pseudo−Instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32 3.2.1 DB and Friends: Declaring Initialized Data . . . . . . . . . . . . . . . . . . . . . . . . . 32 3.2.2 RESB and Friends: Declaring Uninitialized Data . . . . . . . . . . . . . . . . . . . . . . 32 3.2.3 INCBIN: Including External Binary Files . . . . . . . . . . . . . . . . . . . . . . . . . . 32 3.2.4 EQU: Defining Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 3.2.5 TIMES: Repeating Instructions or Data. . . . . . . . . . . . . . . . . . . . . . . . . . . 33 3.3 Effective Addresses . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 33 3.4 Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 3.4.1 Numeric Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 3.4.2 Character Strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35 3.4.3 Character Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36 3.4.4 String Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36 3.4.5 Unicode Strings . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 3.4.6 Floating−Point Constants. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 37 3.4.7 Packed BCD Constants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 3.5 Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 3.5.1 |: Bitwise OR Operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 38 3.5.2 ^: Bitwise XOR Operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 3.5.3 &: Bitwise AND Operator . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 3.5.4 << and >>: Bit Shift Operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 4 3.5.5 + and −: Addition and Subtraction Operators. . . . . . . . . . . . . . . . . . . . . . . . 39 3.5.6 *, /, //, % and %%: Multiplication and Division . . . . . . . . . . . . . . . . . . . . . . . 39 3.5.7 Unary Operators . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 3.6 SEG and WRT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 3.7 STRICT: Inhibiting Optimization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 3.8 Critical Expressions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 40 3.9 Local Labels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41 Chapter 4: The NASM Preprocessor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 4.1 Single−Line Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 4.1.1 The Normal Way: %define . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 43 4.1.2 Resolving %define: %xdefine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 44 4.1.3 Macro Indirection: %[...]. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 4.1.4 Concatenating Single Line Macro Tokens: %+. . . . . . . . . . . . . . . . . . . . . . . . 45 4.1.5 The Macro Name Itself: %? and %?? . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45 4.1.6 Undefining Single−Line Macros: %undef. . . . . . . . . . . . . . . . . . . . . . . . . . 46 4.1.7 Preprocessor Variables: %assign . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46 4.1.8 Defining Strings: %defstr . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 4.1.9 Defining Tokens: %deftok. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 4.2 String Manipulation in Macros. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 4.2.1 Concatenating Strings: %strcat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 4.2.2 String Length: %strlen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 4.2.3 Extracting Substrings: %substr . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 4.3 Multi−Line Macros: %macro . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 48 4.3.1 Overloading Multi−Line Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 4.3.2 Macro−Local Labels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 4.3.3 Greedy Macro Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50 4.3.4 Macro Parameters Range . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50 4.3.5 Default Macro Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51%0: Macro Parameter Counter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 4.3.7 %00: Label Preceeding Macro . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 4.3.8 %rotate: Rotating Macro Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . 52 4.3.9 Concatenating Macro Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 4.3.10 Condition Codes as Macro Parameters . . . . . . . . . . . . . . . . . . . . . . . . . . 54 4.3.11 Disabling Listing Expansion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54%unmacro . . . . . . . . . . . . . . . . . . . . . . . . 55 4.4 Conditional Assembly . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 5 4.4.1 %ifdef: Testing Single−Line Macro Existence . . . . . . . . . . . . . . . . . . . . . . . 55 4.4.2 %ifmacro: Testing Multi−Line Macro Existence . . . . . . . . . . . . . . . . . . . . . . 56 4.4.3 %ifctx: Testing the Context Stack . . . . . . . . . . . . . . . . . . . . . . . . . . . . 56 4.4.4 %if: Testing Arbitrary Numeric Expressions . . . . . . . . . . . . . . . . . . . . . . . . 56 4.4.5 %ifidn and %ifidni: Testing Exact Text Identity . . . . . . . . . . . . . . . . . . . . 57 4.4.6 %ifid, %ifnum, %ifstr: Testing Token Types. . . . . . . . . . . . . . . . . . . . . . 57 4.4.7 %iftoken: Test for a Single Token . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 4.4.8 %ifempty: Test for Empty Expansion . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 4.4.9 %ifenv: Test If Environment Variable Exists . . . . . . . . . . . . . . . . . . . . . . . . 58 4.5 Preprocessor Loops: %rep . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 4.6 Source Files and Dependencies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 4.6.1 %include: Including Other Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 4.6.2 %pathsearch: Search the Include Path. . . . . . . . . . . . . . . . . . . . . . . . . . 60 4.6.3 %depend: Add Dependent Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60 4.6.4 %use: Include Standard Macro Package . . . . . . . . . . . . . . . . . . . . . . . . . . 60 4.7 The Context Stack . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 60 4.7.1 %push and %pop: Creating and Removing Contexts . . . . . . . . . . . . . . . . . . . . 61 4.7.2 Context−Local Labels. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61 4.7.3 Context−Local Single−Line Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 61(deprecated) . . . . . . . . . . . . . . . . . . . . . . . . 62 4.7.5 %repl: Renaming a Context . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 62 4.7.6 Example Use of the Context Stack: Block IFs . . . . . . . . . . . . . . . . . . . . . . . . 63 4.8 Stack Relative Preprocessor Directives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 4.8.1 %arg Directive . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 4.8.2 %stacksize Directive . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 4.8.3 %local Directive . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65 4.9 Reporting User−Defined Errors: %error, %warning, %fatal. . . . . . . . . . . . . . . . . 66 4.10 Other Preprocessor Directives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66 4.10.1 %line Directive. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 66 4.10.2 %!variable: Read an Environment Variable. . . . . . . . . . . . . . . . . . . . . . . . . 67 4.11 Standard Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 4.11.1 NASM Version Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67__NASM_VERSION_ID__: NASM Version ID . . . . . . . . . . . . . . . . . . . . . . . 67 4.11.3 __NASM_VER__: NASM Version string . . . . . . . . . . . . . . . . . . . . . . . . . . 68 4.11.4 __FILE__ and __LINE__: File Name and Line Number. . . . . . . . . . . . . . . . . 68 4.11.5 __BITS__: Current BITS Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 68 6 4.11.6 __OUTPUT_FORMAT__: Current Output Format . . . . . . . . . . . . . . . . . . . . . 68 4.11.7 __DEBUG_FORMAT__: Current Debug Format . . . . . . . . . . . . . . . . . . . . . . 69 4.11.8 Assembly Date and Time Macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69__USE_package__: Package Include Test . . . . . . . . . . . . . . . . . . . . . . . . 69 4.11.10 __PASS__: Assembly Pass . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 69 4.11.11 STRUC and ENDSTRUC: Declaring Structure Data Types. . . . . . . . . . . . . . . . . 70 4.11.12 ISTRUC, AT and IEND: Declaring Instances of Structures . . . . . . . . . . . . . . . . 71 4.11.13 ALIGN and ALIGNB: Data Alignment . . . . . . . . . . . . . . . . . . . . . . . . . . 71 4.11.14 SECTALIGN: Section Alignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 72 Chapter 5: Standard Macro Packages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73 5.1 altreg: Alternate Register Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73 5.2 smartalign: Smart ALIGN Macro . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 73 5.3 fp: Floating−point macros . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 5.4 ifunc: Integer functions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 5.4.1 Integer logarithms . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 74 Chapter 6: Assembler Directives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 6.1 BITS: Specifying Target Processor Mode . . . . . . . . . . . . . . . . . . . . . . . . . . . . 75 6.1.1 USE16 & USE32: Aliases for BITS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 6.2 DEFAULT: Change the assembler defaults . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 6.2.1 REL & ABS: RIP−relative addressing . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 6.2.2 BND & NOBND: BND prefix . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 6.3 SECTION or SEGMENT: Changing and Defining Sections . . . . . . . . . . . . . . . . . . . . 76 6.3.1 The __SECT__ Macro . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 76 6.4 ABSOLUTE: Defining Absolute Labels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77 6.5 EXTERN: Importing Symbols from Other Modules. . . . . . . . . . . . . . . . . . . . . . . . 78 6.6 GLOBAL: Exporting Symbols to Other Modules . . . . . . . . . . . . . . . . . . . . . . . . . 78 6.7 COMMON: Defining Common Data Areas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79 6.8 STATIC: Local Symbols within Modules . . . . . . . . . . . . . . . . . . . . . . . . . . . . 79 6.9 (G|L)PREFIX, (G|L)POSTFIX: Mangling Symbols . . . . . . . . . . . . . . . . . . . . . 79 6.10 OUTPUT, DEBUG: Generic Namespaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 6.11 CPU: Defining CPU Dependencies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 80 6.12 FLOAT: Handling of floating−point constants . . . . . . . . . . . . . . . . . . . . . . . . . 81 6.13 [WARNING]: Enable or disable warnings . . . . . . . . . . . . . . . . . . . . . . . . . . . 81 Chapter 7: Output Formats. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 7.1 bin: Flat−Form Binary Output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 7.1.1 ORG: Binary File Program Origin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 83 7 7.1.2 bin Extensions to the SECTION Directive . . . . . . . . . . . . . . . . . . . . . . . . . 83 7.1.3 Multisection Support for the bin Format. . . . . . . . . . . . . . . . . . . . . . . . . . 84 7.1.4 Map Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 7.2 ith: Intel Hex Output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 7.3 srec: Motorola S−Records Output . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 84 7.4 obj: Microsoft OMF Object Files. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 85 7.4.1 obj Extensions to the SEGMENT Directive . . . . . . . . . . . . . . . . . . . . . . . . . 85 7.4.2 GROUP: Defining Groups of Segments . . . . . . . . . . . . . . . . . . . . . . . . . . . 86 7.4.3 UPPERCASE: Disabling Case Sensitivity in Output . . . . . . . . . . . . . . . . . . . . . 87 7.4.4 IMPORT: Importing DLL Symbols. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 7.4.5 EXPORT: Exporting DLL Symbols . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 87 7.4.6 ..start: Defining the Program Entry Point . . . . . . . . . . . . . . . . . . . . . . . . 88 7.4.7 obj Extensions to the EXTERN Directive . . . . . . . . . . . . . . . . . . . . . . . . . . 88 7.4.8 obj Extensions to the COMMON Directive . . . . . . . . . . . . . . . . . . . . . . . . . . 88 7.4.9 Embedded File Dependency Information . . . . . . . . . . . . . . . . . . . . . . . . . . 89 7.5 win32: Microsoft Win32 Object Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89 7.5.1 win32 Extensions to the SECTION Directive . . . . . . . . . . . . . . . . . . . . . . . 89 7.5.2 win32: Safe Structured Exception Handling . . . . . . . . . . . . . . . . . . . . . . . . 90 7.5.3 Debugging formats for Windows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91 7.6 win64: Microsoft Win64 Object Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 91 7.6.1 win64: Writing Position−Independent Code . . . . . . . . . . . . . . . . . . . . . . . . 91 7.6.2 win64: Structured Exception Handling . . . . . . . . . . . . . . . . . . . . . . . . . . 92 7.7 coff: Common Object File Format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95 7.8 macho32 and macho64: Mach Object File Format . . . . . . . . . . . . . . . . . . . . . . . 95 7.8.1 macho extensions to the SECTION Directive . . . . . . . . . . . . . . . . . . . . . . . 95 7.8.2 Thread Local Storage in Mach−O: macho special symbols and WRT . . . . . . . . . . . . 96 7.8.3 macho specfic directive subsections_via_symbols . . . . . . . . . . . . . . . . . 96 7.8.4 macho specfic directive no_dead_strip . . . . . . . . . . . . . . . . . . . . . . . . 96 7.8.5 macho specific extensions to the GLOBAL Directive: private_extern . . . . . . . . . 96 7.9 elf32, elf64, elfx32: Executable and Linkable Format Object Files . . . . . . . . . . . . 97 7.9.1 ELF specific directive osabi . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 97 7.9.2 elf extensions to the SECTION Directive . . . . . . . . . . . . . . . . . . . . . . . . . 97 7.9.3 Position−Independent Code: macho Special Symbols and WRT . . . . . . . . . . . . . . 98 7.9.4 Thread Local Storage in ELF: elf Special Symbols and WRT . . . . . . . . . . . . . . . . 98 7.9.5 elf Extensions to the GLOBAL Directive . . . . . . . . . . . . . . . . . . . . . . . . . . 98 7.9.6 elf Extensions to the COMMON Directive . . . . . . . . . . . . . . . . . . . . . . . . . 99 8 7.9.7 16−bit code and ELF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 7.9.8 Debug formats and ELF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 7.10 aout: Linux a.out Object Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 99 7.11 aoutb: NetBSD/FreeBSD/OpenBSD a.out Object Files. . . . . . . . . . . . . . . . . . . .100 7.12 as86: Minix/Linux as86 Object Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . .100 7.13 rdf: Relocatable Dynamic Object File Format . . . . . . . . . . . . . . . . . . . . . . . . .100 7.13.1 Requiring a Library: The LIBRARY Directive . . . . . . . . . . . . . . . . . . . . . . .100 7.13.2 Specifying a Module Name: The MODULE Directive . . . . . . . . . . . . . . . . . . . .100 7.13.3 rdf Extensions to the GLOBAL Directive . . . . . . . . . . . . . . . . . . . . . . . . .101 7.13.4 rdf Extensions to the EXTERN Directive . . . . . . . . . . . . . . . . . . . . . . . . .101 7.14 dbg: Debugging Format . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .101 Chapter 8: Writing 16−bit Code (DOS, Windows 3/3.1) . . . . . . . . . . . . . . . . . . . . . . . . .103 8.1 Producing .EXE Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .103 8.1.1 Using the obj Format To Generate .EXE Files . . . . . . . . . . . . . . . . . . . . . . .103 8.1.2 Using the bin Format To Generate .EXE Files . . . . . . . . . . . . . . . . . . . . . . .104 8.2 Producing .COM Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .105 8.2.1 Using the bin Format To Generate .COM Files . . . . . . . . . . . . . . . . . . . . . . .105 8.2.2 Using the obj Format To Generate .COM Files . . . . . . . . . . . . . . . . . . . . . . .105 8.3 Producing .SYS Files . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .106 8.4 Interfacing to 16−bit C Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .106 8.4.1 External Symbol Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .106 8.4.2 Memory Models. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .107 8.4.3 Function Definitions and Function Calls . . . . . . . . . . . . . . . . . . . . . . . . . .108 8.4.4 Accessing Data Items . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .110c16.mac: Helper Macros for the 16−bit C Interface . . . . . . . . . . . . . . . . . . . .110 8.5 Interfacing to Borland Pascal Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . .111 8.5.1 The Pascal Calling Convention . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .112 8.5.2 Borland Pascal Segment Name Restrictions . . . . . . . . . . . . . . . . . . . . . . . .113c16.mac With Pascal Programs . . . . . . . . . . . . . . . . . . . . . . . . . . .113 Chapter 9: Writing 32−bit Code (Unix, Win32, DJGPP) . . . . . . . . . . . . . . . . . . . . . . . . .115 9.1 Interfacing to 32−bit C Programs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .115 9.1.1 External Symbol Names . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .115 9.1.2 Function Definitions and Function Calls . . . . . . . . . . . . . . . . . . . . . . . . . .115 9.1.3 Accessing Data Items . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .117c32.mac: Helper Macros for the 32−bit C Interface . . . . . . . . . . . . . . . . . . . .117 9.2 Writing NetBSD/FreeBSD/OpenBSD and Linux/ELF Shared Libraries . . . . . . . . . . . . . .118 9 9.2.1 Obtaining the Address of the GOT . . . . . . . . . . . . . . . . . . . . . . . . . . . . .118 9.2.2 Finding Your Local Data Items . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .119 9.2.3 Finding External and Common Data Items . . . . . . . . . . . . . . . . . . . . . . . . .119 9.2.4 Exporting Symbols to the Library User . . . . . . . . . . . . . . . . . . . . . . . . . . .120 9.2.5 Calling Procedures Outside the Library . . . . . . . . . . . . . . . . . . . . . . . . . . .121 9.2.6 Generating the Library File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .121 Chapter 10: Mixing 16 and 32 Bit Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .123 10.1 Mixed−Size Jumps . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .123 10.2 Addressing Between Different−Size Segments . . . . . . . . . . . . . . . . . . . . . . . . .123 10.3 Other Mixed−Size Instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .124 Chapter 11: Writing 64−bit Code (Unix, Win64) . . . . . . . . . . . . . . . . . . . . . . . . . . . . .127 11.1 Register Names in 64−bit Mode. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .127 11.2 Immediates and Displacements in 64−bit Mode . . . . . . . . . . . . . . . . . . . . . . . .127 11.3 Interfacing to 64−bit C Programs (Unix) . . . . . . . . . . . . . . . . . . . . . . . . . . . .128 11.4 Interfacing to 64−bit C Programs (Win64). . . . . . . . . . . . . . . . . . . . . . . . . . . .129 Chapter 12: Troubleshooting. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .131 12.1 Common Problems . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .131 12.1.1 NASM Generates Inefficient Code . . . . . . . . . . . . . . . . . . . . . . . . . . . . .131 12.1.2 My Jumps are Out of Range . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .131ORG Doesn’t Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .131 12.1.4 TIMES Doesn’t Work . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .132 Appendix A: Ndisasm. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .133 A.1 Introduction. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .133 A.2 Running NDISASM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .133 A.2.1 COM Files: Specifying an Origin. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .133 A.2.2 Code Following Data: Synchronisation . . . . . . . . . . . . . . . . . . . . . . . . . . .133 A.2.3 Mixed Code and Data: Automatic (Intelligent) Synchronisation . . . . . . . . . . . . . .134 A.2.4 Other Options . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .134 Appendix B: Instruction List . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .137 B.1 Introduction. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .137 B.1.1 Special instructions (pseudo−ops) . . . . . . . . . . . . . . . . . . . . . . . . . . . . .137 B.1.2 Conventional instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .137 B.1.3 Katmai Streaming SIMD instructions (SSE –– a.k.a. KNI, XMM, MMX2). . . . . . . . . . . .164 B.1.4 Introduced in Deschutes but necessary for SSE support . . . . . . . . . . . . . . . . . .165 B.1.5 XSAVE group (AVX and extended state) . . . . . . . . . . . . . . . . . . . . . . . . . . .166 B.1.6 Generic memory operations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .166 10 B.1.7 New MMX instructions introduced in Katmai . . . . . . . . . . . . . . . . . . . . . . . .166 B.1.8 AMD Enhanced 3DNow! (Athlon) instructions . . . . . . . . . . . . . . . . . . . . . . .166 B.1.9 Willamette SSE2 Cacheability Instructions . . . . . . . . . . . . . . . . . . . . . . . . .167 B.1.10 Willamette MMX instructions (SSE2 SIMD Integer Instructions) . . . . . . . . . . . . . .167 B.1.11 Willamette Streaming SIMD instructions (SSE2) . . . . . . . . . . . . . . . . . . . . . .169 B.1.12 Prescott New Instructions (SSE3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . .170 B.1.13 VMX/SVM Instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .171 B.1.14 Extended Page Tables VMX instructions. . . . . . . . . . . . . . . . . . . . . . . . . .171 B.1.15 Tejas New Instructions (SSSE3) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .171 B.1.16 AMD SSE4A . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .172 B.1.17 New instructions in Barcelona . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .172 B.1.18 Penryn New Instructions (SSE4.1) . . . . . . . . . . . . . . . . . . . . . . . . . . . . .172 B.1.19 Nehalem New Instructions (SSE4.2) . . . . . . . . . . . . . . . . . . . . . . . . . . . .173 B.1.20 Intel SMX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .173 B.1.21 Geode (Cyrix) 3DNow! additions . . . . . . . . . . . . . . . . . . . . . . . . . . . . .173 B.1.22 Intel new instructions in ??? . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .174 B.1.23 Intel AES instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .174 B.1.24 Intel AVX AES instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .174 B.1.25 Intel instruction extension based on pub number 319433−030 dated October 2017. . . .174 B.1.26 Intel AVX instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .174 B.1.27 Intel Carry−Less Multiplication instructions (CLMUL) . . . . . . . . . . . . . . . . . . .187 B.1.28 Intel AVX Carry−Less Multiplication instructions (CLMUL) . . . . . . . . . . . . . . . . .187 B.1.29 Intel Fused Multiply−Add instructions (FMA) . . . . . . . . . . . . . . . . . . . . . . .188 B.1.30 Intel post−32 nm processor instructions . . . . . . . . . . . . . . . . . . . . . . . . .191 B.1.31 VIA (Centaur) security instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . .192 B.1.32 AMD Lightweight Profiling (LWP) instructions . . . . . . . . . . . . . . . . . . . . . . .192 B.1.33 AMD XOP and FMA4 instructions (SSE5) . . . . . . . . . . . . . . . . . . . . . . . . . .192 B.1.34 Intel AVX2 instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .195 B.1.35 Intel Transactional Synchronization Extensions (TSX). . . . . . . . . . . . . . . . . . .198 B.1.36 Intel BMI1 and BMI2 instructions, AMD TBM instructions . . . . . . . . . . . . . . . . .199 B.1.37 Intel Memory Protection Extensions (MPX) . . . . . . . . . . . . . . . . . . . . . . . .200 B.1.38 Intel SHA acceleration instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . .200 B.1.39 AVX−512 mask register instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . .200 B.1.40 AVX−512 instructions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .201 B.1.41 Intel memory protection keys for userspace (PKU aka PKEYs). . . . . . . . . . . . . . .230 B.1.42 Read Processor ID. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .230 11 B.1.43 New memory instructions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .230 B.1.44 Processor trace write . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .230 B.1.45 Instructions from the Intel Instruction Set Extensions, . . . . . . . . . . . . . . . . . .230 B.1.46 doc 319433−034 May 2018. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .230 B.1.47 Galois field operations (GFNI) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .230 B.1.48 AVX512 Vector Bit Manipulation Instructions 2 . . . . . . . . . . . . . . . . . . . . . .231 B.1.49 AVX512 VNNI . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .232 B.1.50 AVX512 Bit Algorithms. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .232 B.1.51 AVX512 4−iteration Multiply−Add . . . . . . . . . . . . . . . . . . . . . . . . . . . . .232 B.1.52 AVX512 4−iteration Dot Product . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .233 B.1.53 Intel Software Guard Extensions (SGX) . . . . . . . . . . . . . . . . . . . . . . . . . .233 B.1.54 Systematic names for the hinting nop instructions . . . . . . . . . . . . . . . . . . . .233 Appendix C: NASM Version History . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .237 C.1 NASM 2 Series . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .237 C.1.1 Version 2.14.02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .237 C.1.2 Version 2.14.01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .237 C.1.3 Version 2.14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .237 C.1.4 Version 2.13.03 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .238 C.1.5 Version 2.13.02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .238 C.1.6 Version 2.13.01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .239 C.1.7 Version 2.13 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .239 C.1.8 Version 2.12.02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .240 C.1.9 Version 2.12.01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .240 C.1.10 Version 2.12 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .240 C.1.11 Version 2.11.09 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .241 C.1.12 Version 2.11.08 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .241 C.1.13 Version 2.11.07 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .241 C.1.14 Version 2.11.06 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .241 C.1.15 Version 2.11.05 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .241 C.1.16 Version 2.11.04 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .242 C.1.17 Version 2.11.03 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .242 C.1.18 Version 2.11.02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .242 C.1.19 Version 2.11.01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .242 C.1.20 Version 2.11 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .242 C.1.21 Version 2.10.09 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .243 C.1.22 Version 2.10.08 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .243 12 C.1.23 Version 2.10.07 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .243 C.1.24 Version 2.10.06 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .243 C.1.25 Version 2.10.05 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .244 C.1.26 Version 2.10.04 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .244 C.1.27 Version 2.10.03 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .244 C.1.28 Version 2.10.02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .244 C.1.29 Version 2.10.01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .244 C.1.30 Version 2.10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .244 C.1.31 Version 2.09.10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .244 C.1.32 Version 2.09.09 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .245 C.1.33 Version 2.09.08 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .245 C.1.34 Version 2.09.07 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .245 C.1.35 Version 2.09.06 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .245 C.1.36 Version 2.09.05 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .245 C.1.37 Version 2.09.04 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .245 C.1.38 Version 2.09.03 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .245 C.1.39 Version 2.09.02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .245 C.1.40 Version 2.09.01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .246 C.1.41 Version 2.09 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .246 C.1.42 Version 2.08.02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .246 C.1.43 Version 2.08.01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .247 C.1.44 Version 2.08 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .247 C.1.45 Version 2.07 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .247 C.1.46 Version 2.06 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .248 C.1.47 Version 2.05.01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .248 C.1.48 Version 2.05 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .248 C.1.49 Version 2.04 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .249 C.1.50 Version 2.03.01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .249 C.1.51 Version 2.03 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .250 C.1.52 Version 2.02 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .250 C.1.53 Version 2.01 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .251 C.1.54 Version 2.00 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .251 C.2 NASM 0.98 Series . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .252 C.2.1 Version 0.98.39 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .252 C.2.2 Version 0.98.38 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .252 C.2.3 Version 0.98.37 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .252 13 C.2.4 Version 0.98.36 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .253 C.2.5 Version 0.98.35 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .253 C.2.6 Version 0.98.34 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .253 C.2.7 Version 0.98.33 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .253 C.2.8 Version 0.98.32 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .254 C.2.9 Version 0.98.31 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .254 C.2.10 Version 0.98.30 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .254 C.2.11 Version 0.98.28 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.12 Version 0.98.26 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.13 Version 0.98.25alt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.14 Version 0.98.25 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.15 Version 0.98.24p1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.16 Version 0.98.24 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.17 Version 0.98.23 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.18 Version 0.98.22 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.19 Version 0.98.21 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.20 Version 0.98.20 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.21 Version 0.98.19 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.22 Version 0.98.18 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.23 Version 0.98.17 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.24 Version 0.98.16 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .255 C.2.25 Version 0.98.15 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .256 C.2.26 Version 0.98.14 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .256 C.2.27 Version 0.98.13 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .256 C.2.28 Version 0.98.12 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .256 C.2.29 Version 0.98.11 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .256 C.2.30 Version 0.98.10 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .256 C.2.31 Version 0.98.09 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .256 C.2.32 Version 0.98.08 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .256 C.2.33 Version 0.98.09b with John Coffman patches released 28−Oct−2001 . . . . . . . . . . .256 C.2.34 Version 0.98.07 released 01/28/01. . . . . . . . . . . . . . . . . . . . . . . . . . . . .257 C.2.35 Version 0.98.06f released 01/18/01 . . . . . . . . . . . . . . . . . . . . . . . . . . . .257 C.2.36 Version 0.98.06e released 01/09/01 . . . . . . . . . . . . . . . . . . . . . . . . . . . .257 C.2.37 Version 0.98p1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .257 C.2.38 Version 0.98bf (bug−fixed). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .258 C.2.39 Version 0.98.03 with John Coffman’s changes released 27−Jul−2000 . . . . . . . . . . .258 14 C.2.40 Version 0.98.03 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .258 C.2.41 Version 0.98 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .261 C.2.42 Version 0.98p9 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .261 C.2.43 Version 0.98p8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .262 C.2.44 Version 0.98p7 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .262 C.2.45 Version 0.98p6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .262 C.2.46 Version 0.98p3.7 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .263 C.2.47 Version 0.98p3.6 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .263 C.2.48 Version 0.98p3.5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .263 C.2.49 Version 0.98p3.4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .263 C.2.50 Version 0.98p3.3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .263 C.2.51 Version 0.98p3.2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .264 C.2.52 Version 0.98p3−hpa . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .264 C.2.53 Version 0.98 pre−release 3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .264 C.2.54 Version 0.98 pre−release 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .264 C.2.55 Version 0.98 pre−release 1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .264 C.3 NASM 0.9 Series . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .265 C.3.1 Version 0.97 released December 1997 . . . . . . . . . . . . . . . . . . . . . . . . . . .265 C.3.2 Version 0.96 released November 1997 . . . . . . . . . . . . . . . . . . . . . . . . . . .266 C.3.3 Version 0.95 released July 1997 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .268 C.3.4 Version 0.94 released April 1997 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .269 C.3.5 Version 0.93 released January 1997 . . . . . . . . . . . . . . . . . . . . . . . . . . . .270 C.3.6 Version 0.92 released January 1997 . . . . . . . . . . . . . . . . . . . . . . . . . . . .270 C.3.7 Version 0.91 released November 1996 . . . . . . . . . . . . . . . . . . . . . . . . . . .271 C.3.8 Version 0.90 released October 1996 . . . . . . . . . . . . . . . . . . . . . . . . . . . .271 Appendix D: Building NASM from Source . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .273 D.1 Building from a Source Archive . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .273git Repository. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .273 Appendix E: Contact Information . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .275 E.1 Website . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .275 E.1.1 User Forums . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .275 E.1.2 Development Community . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .275 E.2 Reporting Bugs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .275 15 16 Chapter 1: Introduction 1.1 What Is NASM? The Netwide Assembler, NASM, is an 80x86 and x86−64 assembler designed for portability and*BSD a.out, ELF, COFF, Mach−O, 16−bit and 32−bit OBJ (OMF) format, Win32 and Win64. It will also output plain binary files, Intel hex and Motorola S−Record formats. Its syntax is designed to be simple and easy to understand,RDOFF custom object−file format. 1.1.1 License Conditions Please see the file LICENSE, supplied as part of any NASM distribution archive, for the license conditions under which you may use NASM. NASM is now under the so−called 2−clause BSD license,Redistributions of source code must retain the above copyright notice, this list of conditions and the • Redistributions in binary form must reproduce the above copyright notice, this list of conditions and THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY 17 18 Chapter 2: Running NASM 2.1 NASM Command−Line Syntax To assemble a file, you issue a command of the formmyfile.asm into an ELF object file myfile.o. And nasm −f bin myfile.asm −o myfile.commyfile.asm into a raw binary file myfile.com. To produce a listing file, with the hex codes output from NASM displayed on the left of the original−l option to give a listing file name, for example: nasm −f coff myfile.asm −l myfile.lst−−help is an alias for the −h option. The option −hf will also list the available output file formats, and what they are. If you use Linux but aren’t sure whether your system is a.out or ELF, type file nasm ELF, and you should use the option −f elf when you want NASM to produce Linux object files. If it says a.out, and you should use −f aout instead (Linux a.out systems have long been obsolete, and are rare these days.) 2.1.1 The −o Option: Specifying the Output File Name NASM will normally choose the name of your output file for you; precisely how it does this is dependentobj, win32 and win64), it will remove the .asm extension (or whatever extension you like to use – NASM doesn’t care) from your source file name and substitute .obj. For Unix object file formats (aout, as86, coff, elf32, elf64, elfx32, ieee, macho32 and macho64) it will substitute .o. For dbg, rdf, ith and srec, it will use .dbg, .rdf, .ith and .srec, respectively, and for the bin format it will simply remove the extension, so that myfile.asm produces the output file myfile. If the output file already exists, NASM will overwrite it, unless it has the same name as the input file, innasm.out as the output file name instead. 19 For situations in which this behaviour is unacceptable, NASM provides the −o command−line option, which allows you to specify your desired output file name. You invoke −o by following it with the name you wish for the output file, either with or without an intervening space. For example: 2.1.2 The −f Option: Specifying the Output File Format If you do not supply the −f option to NASM, it will choose an output file format for you itself. In the distribution versions of NASM, the default is always bin; if you’ve compiled your own copy of NASM, you can redefine OF_DEFAULT at compile time and choose what you want the default to be. Like −o, the intervening space between −f and the output file format is optional; so −f elf and −felf are both valid. A complete list of the available output file formats can be given by issuing the command nasm −hf. 2.1.3 The −l Option: Generating a Listing File If you supply the −l option to NASM, followed (with the usual optional space) by a file name, NASM will generate a source−listing file for you, in which addresses and generated code are listed on the left, and[list −], and turn it back on with [list +], (the default, obviously). There is no \"user form\" (without the brackets). This can be used to list only sections of interest, avoiding excessively long listings. 2.1.4 The −M Option: Generate Makefile Dependencies This option can be used to generate makefile dependencies on stdout. This can be redirected to a file 2.1.5 The −MG Option: Generate Makefile Dependencies This option can be used to generate makefile dependencies on stdout. This differs from the −M option in that if a nonexisting file is encountered, it is assumed to be a generated file and is added to the 2.1.6 The −MF Option: Set Makefile Dependency File This option can be used with the −M or −MG options to send the output to a file, rather than to stdout. For example: 2.1.7 The −MD Option: Assemble and Generate Dependencies The −MD option acts as the combination of the −M and −MF options (i.e. a filename has to be specified.) However, unlike the −M or −MG options, −MD does not inhibit the normal operation of the assembler. Use this to automatically generate updated dependencies with every assembly session. For example: 20 If the argument after −MD is an option rather than a filename, then the output filename is the first applicable one of: • the filename set in the −MF option; • the output filename from the −o option with .d appended; • the input filename with the extension set to .d. 2.1.8 The −MT Option: Dependency Target Name The −MT option can be used to override the default name of the dependency target. This is normally the same as the output filename, specified by the −o option. 2.1.9 The −MQ Option: Dependency Target Name (Quoted) The −MQ option acts as the −MT option, except it tries to quote characters that have special meaning in Makefile syntax. This is not foolproof, as not all characters with special meaning are quotable in Make.−MT or −MQ option is specified) is automatically quoted. 2.1.10 The −MP Option: Emit phony targets When used with any of the dependency generation options, the −MP option causes NASM to emit a phony target without dependencies for each header file. This prevents Make from complaining if a 2.1.11 The −MW Option: Watcom Make quoting style This option causes NASM to attempt to quote dependencies according to Watcom Make conventions# as $# rather than \\#, uses & rather than \\ for continuation lines, and encloses filenames containing whitespace in double quotes. 2.1.12 The −F Option: Selecting a Debug Information Format This option is used to select the format of the debug information emitted into the output file, to be usedwill be). Prior to version 2.03.01, the use of this switch did not enable output of the selected debug info format. Use −g, see section 2.1.13, to enable output. Versions 2.03.01 and later automatically enable −g if −F is specified. A complete list of the available debug file formats for an output format can be seen by issuing thenasm −f <format> −y. Not all output formats currently support debugging output. See section 2.1.27. −f dbg output format option, see section 7.14. 2.1.13 The −g Option: Enabling Debug Information. This option can be used to generate debugging information in the specified format. See section 2.1.12.−g without −F results in emitting debug info in the default format, if any, for the selected output format. If no debug information is currently implemented in the selected output format, −g is silently ignored. 2.1.14 The −X Option: Selecting an Error Reporting Format This option can be used to select an error reporting format for any error messages that might be−Xvc option and the −Xgnu option. The GNU format is the default and looks like this: 21 where filename.asm is the name of the source file in which the error was detected, 65 is the source file line number on which the error was detected, error is the severity of the error (this could be warning), and specific error message is a more detailed text message which should help pinpoint the exact problem. −Xvc is the style used by Microsoft Visual C++ and some other programs. It looks like this:Visual C++ output format, section 7.5. 2.1.15 The −Z Option: Send Errors to a File Under MS−DOS it can be difficult (though there are ways) to redirect the standard−error output of a program to a file. Since NASM usually produces its warning and error messages on stderr, this can make it hard to capture the errors if (for example) you want to load them into an editor.−Z option, taking a filename argument which causes errors to be sent to the specified files rather than standard error. Therefore you can redirect the errors into a file by typing−E, but it was changed since −E is an option conventionally used for preprocessing only, with disastrous results. See section 2.1.21. 2.1.16 The −s Option: Send Errors to stdout The −s option redirects error messages to stdout rather than stderr, so it can be redirected under MS−DOS. To assemble the file myfile.asm and pipe its output to the more program, you can type: nasm −s −f obj myfile.asm | more−Z option, section 2.1.15. 2.1.17 The −i Option: Include File Search Directories When NASM sees the %include or %pathsearch directive in a source file (see section 4.6.1, section 4.6.2 or section 3.2.3), it will search for the given file not only in the current directory, but also in any−i option. Therefore you can include files from a macro library, for example, by typing−i and the path name is allowed, and optional). Prior NASM 2.14 a path provided in the option has been considered as a verbatim copy and providing a−ifoo will be considered as the −ifoo/ directory. If you want to define a standard include search path, similar to /usr/include on Unix systems, you should place one or more −i directives in the NASMENV environment variable (see section 2.1.34). For Makefile compatibility with many C compilers, this option can also be specified as −I. 2.1.18 The −p Option: Pre−Include a File NASM allows you to specify files to be pre−included into your source file, by the use of the −p option. So running 22 is equivalent to running nasm myfile.asm and placing the directive %include \"myinc.inc\" at the start of the file. option is also accepted. For consistency with the −I, −D and −U options, this option can also be specified as −P. 2.1.19 The −d Option: Pre−Define a Macro Just as the −p option gives an alternative to placing %include directives at the start of a source file, the −d option gives an alternative to placing a %define directive. You could code nasm myfile.asm −dFOO=100 −dFOO is equivalent to coding %define FOO. This form of the directive may be useful for selecting assembly−time options which are then tested using %ifdef, for example −dDEBUG. For Makefile compatibility with many C compilers, this option can also be specified as −D. 2.1.20 The −u Option: Undefine a Macro The −u option undefines a macro that would otherwise have been pre−defined, either automatically or by a −p or −d option specified earlier on the command lines. For example, the following command line:FOO not being a predefined macro in the program. This is useful to override options specified at a different point in a Makefile. −U. 2.1.21 The −E Option: Preprocess Only NASM allows the preprocessor to be run on its own, up to a point. Using the −E option (which requires no arguments) will cause NASM to preprocess its input file, expand all the macro references, remove all−o option is also used). This option cannot be applied to programs which require the preprocessor to evaluate expressions−e. −E in older versions of NASM was the equivalent of the current −Z option, section 2.1.15. 2.1.22 The −a Option: Don’t Preprocess At All If NASM is being used as the back end to a compiler, it might be desirable to suppress preprocessing−a option, requiring no argument, instructs NASM to replace its powerful preprocessor with a stub preprocessor which does nothing. 23 2.1.23 The −O Option: Specifying Multipass Optimization Using the −O option, you can tell NASM to carry out different levels of optimization. Multiple flags can be specified after the −O options, some of which can be combined in a single option, e.g. −Oxv. • −O0: No optimization. All operands take their long forms, if a short form is not specified, except conditional jumps. This is intended to match NASM 0.98 behavior. • −O1: Minimal optimization. As above, but immediate operands which will fit in a signed byte are optimized, unless the long form is specified. Conditional jumps default to the long form unless • −Ox (where x is the actual letter x): Multipass optimization. Minimize branch offsets and signed immediate bytes, overriding size specification unless the strict keyword has been used (see section 3.7). For compatibility with earlier releases, the letter x may also be any number greater than one. This number has no effect on the actual number of passes. • −Ov: At the end of assembly, print the number of passes actually executed. The −Ox mode is recommended for most uses, and is the default since NASM 2.09. Note that this is a capital O, and is different from a small o, which is used to specify the output file name. See section 2.1.1. 2.1.24 The −t Option: Enable TASM Compatibility Mode NASM includes a limited form of compatibility with Borland’s TASM. When NASM’s −t option is used, the following changes are made: • local labels may be prefixed with @@ instead of . • size override is supported within brackets. In TASM compatible mode, a size override inside squaremov eax,[DWORD val] is valid syntax in TASM compatibility mode. Note that you lose the ability to override the default address type for the instruction. • unprefixed forms of some directives supported (arg, elif, else, endif, if, ifdef, ifdifi, ifndef, include, local) 2.1.25 The −w and −W Options: Enable or Disable Assembly Warnings NASM can observe many conditions during the course of assembly which are worth mentioning to the−w command−line option, which enables or disables certain classes of assembly warning. Such warning classes are described by a name, for example orphan−labels; you can enable warnings of this class by the command−line option −w+orphan−labels and disable it by −w−orphan−labels. The current warning classes are:other specifies any warning not otherwise specified in any class. Enabled by default. • macro−params covers warnings about multi−line macros being invoked with the wrong number of parameters. Enabled by default; see section 4.3.1 for an example of why you might want to disable it. • macro−selfref warns if a macro references itself. Disabled by default. 24 • macro−defaults warns when a macro has more default parameters than optional parameters. Enabled by default; see section 4.3.5 for why you might want to disable it. • orphan−labels covers warnings about source lines which contain no instruction but define a label without a trailing colon. NASM warns about this somewhat obscure condition by default; see • number−overflow covers warnings about numeric constants which don’t fit in 64 bits. Enabled by default. • gnu−elf−extensions warns if 8−bit or 16−bit relocations are used in −f elf format. The GNU extensions allow this. Disabled by default. • float−overflow warns about floating point overflow. Enabled by default. • float−denorm warns about floating point denormals. Disabled by default. • float−underflow warns about floating point underflow. Disabled by default. • float−toolong warns about too many digits in floating−point numbers. Enabled by default. • user controls %warning directives (see section 4.9). Enabled by default. • lock warns about LOCK prefixes on unlockable instructions. Enabled by default. • hle warns about invalid use of the HLE XACQUIRE or XRELEASE prefixes. Enabled by default. • bnd warns about ineffective use of the BND prefix when a relaxed form of jmp instruction becomes jmp short form. Enabled by default. • zext−reloc warns that a relocation has been zero−extended due to limitations in the output format. Enabled by default. • ptr warns about keywords used in other assemblers that might indicate a mistake in the source code. Currently only the MASM PTR keyword is recognized. Enabled by default. • bad−pragma warns about a malformed or otherwise unparsable %pragma directive. Disabled by default. • unknown−pragma warns about an unknown %pragma directive. This is not yet implemented. Disabled by default. • not−my−pragma warns about a %pragma directive which is not applicable to this particular assembly session. This is not yet implemented. Disabled by default. • unknown−warning warns about a −w or −W option or a [WARNING] directive that contains an unknown warning name or is otherwise not possible to process. Disabled by default. • all is an alias for all suppressible warning classes. Thus, −w+all enables all available warnings, and −w−all disables warnings entirely (since NASM 2.13). Since version 2.00, NASM has also supported the gcc–like syntax −Wwarning−class and −Wno−warning−class instead of −w+warning−class and −w−warning−class, respectively; both syntaxes work identically.−w+error or −Werror can be used to treat warnings as errors. This can be controlled on a per warning class basis (−w+error=warning−class or −Werror=warning−class); if no warning−class is specified NASM treats it as −w+error=all; the same applies to −w−error or −Wno−error, of course. [WARNING] directive. See section 6.13. 25 2.1.26 The −v Option: Display Version Info Typing NASM −v will display the version of NASM which you are using, and the date on which it was compiled. −−v is also accepted for this option starting in NASM version 2.11.05. 2.1.27 The −y Option: Display Available Debug Info Formats Typing nasm −f <option> −y will display a list of the available debug info formats for the given output format. The default format is indicated by an asterisk. For example: 2.1.28 The −−(g|l)prefix, −−(g|l)postfix Options. The −−(g)prefix options prepend the given argument to all extern, common, static, and global symbols, and the −−lprefix option prepends to all other symbols. Similarly, −−(g)postfix and −−lpostfix options append the argument in the exactly same way as the −−xxprefix options does. Running this: %pragma macho gprefix _ at the start of the file (section 6.9). It will prepend the underscore to all global and external variables, as C requires it in some, but not 2.1.29 The −−pragma Option NASM accepts an argument as %pragma option, which is like placing a %pragma preprocess statement at the beginning of the source. Running this: 2.1.30 The −−before Option A preprocess statement can be accepted with this option. The example shown in section 2.1.29 is the 2.1.31 The −−limit−X Option This option allows user to setup various maximum values for these:−−limit−passes: Number of maximum allowed passes. Default is effectively unlimited. • −−limit−stalled−passes: Maximum number of allowed unfinished passes. Default is 1000. • −−limit−macro−levels: Define maximum depth of macro expansion (in preprocess). Default is 1000000. 26 • −−limit−rep: Maximum number of allowed preprocessor loop, defined under %rep. Default is 1000000. • −−limit−eval: This number sets the boundary condition of allowed expression length. Default is 1000000. • −−limit−lines: Total number of source lines as allowed to be processed. Default is 2000000000. In example, running this limits the maximum line count to be 1000. 2.1.32 The −−keep−all Option This option prevents NASM from deleting any output files even if an error happens. 2.1.33 The −−no−line Option If this option is given, all %line directives in the source code are ignored. This can be useful for debugging already preprocessed code. See section 4.10.1. 2.1.34 The NASMENV Environment Variable If you define an environment variable called NASMENV, the program will interpret it as a list of extra command−line options, which are processed before the real command line. You can use this to define−i options in the NASMENV variable. The value of the variable is split up at white space, so that the value −s −ic:\\nasmlib\\ will be treated as two separate options. However, that means that the value −dNAME=\"my name\" won’t do what you might want, because it will be split at the space and the NASM command−line processing will−dNAME=\"my and name\". To get round this, NASM provides a feature whereby, if you begin the NASMENV environment variable with some character that isn’t a minus sign, then NASM will treat this character as the separatorNASMENV variable to the value !−s!−ic:\\nasmlib\\ is equivalent to setting it to −s −ic:\\nasmlib\\, but !−dNAME=\"my name\" will work. This environment variable was previously called NASM. This was changed with version 0.98.31. 2.2 Quick Start for MASM Users If you’re used to writing programs with MASM, or with TASM in MASM−compatible (non−Ideal) mode, ora86, this section attempts to outline the major differences between MASM’s syntax and NASM’s. If you’re not already used to MASM, it’s probably worth skipping this section. 2.2.1 NASM Is Case−Sensitive One simple difference is that NASM is case−sensitive. It makes a difference whether you call your label, Foo or FOO. If you’re assembling to DOS or OS/2 .OBJ files, you can invoke the UPPERCASE directive (documented in section 7.4) to ensure that all symbols exported to other code modules arewithin a single module, NASM will distinguish between labels differing only in case. 2.2.2 NASM Requires Square Brackets For Memory References NASM was designed with simplicity of syntax in mind. One of the design goals of NASM is that it should 27 mov ax,foo contents of a memory location requires square brackets around the address, and any access to the address of a variable doesn’t. So an instruction of the form mov ax,foo will always refer to a compile−time constant, whether it’s an EQU or the address of a variable; and to access the contents of the variable bar, you must code mov ax,[bar]. This also means that NASM has no need for MASM’s OFFSET keyword, since the MASM code mov ax,offset bar means exactly the same thing as NASM’s mov ax,bar. If you’re trying to get large amounts of MASM code to assemble sensibly under NASM, you can always code to make the preprocessor treat the OFFSET keyword as a no−op. This issue is even more confusing in a86, where declaring a label with a trailing colon defines it to be a ‘label’ as opposed to a ‘variable’ and causes a86 to adopt NASM−style semantics; so in a86, mov ax,var has different behaviour depending on whether var was declared as var: dw 0 (a label) or var dw 0 (a word−size variable). NASM is very simple by comparison: everything is a label. NASM, in the interests of simplicity, also does not support the hybrid syntaxes supported by MASM andmov ax,table[bx], where a memory reference is denoted by one portion outside square brackets and another portion inside. The correct syntax for the above is. Likewise, mov ax,es:[di] is wrong and mov ax,[es:di] is right. 2.2.3 NASM Doesn’t Store Variable Types NASM, by design, chooses not to remember the types of variables you declare. Whereas MASM willvar dw 0, that you declared var as a word−size variable, and will then be able to fill in the ambiguity in the size of the instruction mov var,2, NASM will deliberately remember nothing about the symbol var except where it begins, and so you must explicitly code mov word [var],2. For this reason, NASM doesn’t support the LODS, MOVS, STOS, SCAS, CMPS, INS, or OUTS instructions, but only supports the forms such as LODSB, MOVSW, and SCASD, which explicitly specify the size of the components of the strings being manipulated. 2.2.4 NASM Doesn’t ASSUME As part of NASM’s drive for simplicity, it also does not support the ASSUME directive. NASM will not keep track of what values you choose to put in your segment registers, and will never automatically generate a segment override prefix. 2.2.5 NASM Doesn’t Support Memory Models NASM also does not have any directives to support different 16−bit memory models. The programmerRET instruction (RETN or RETF; NASM accepts RET itself as an alternate form for RETN); in addition, the programmer is responsible for coding CALL FAR instructions where necessary when calling external functions, and must also keep track of which external variable definitions are far and which are near. 2.2.6 Floating−Point Differences NASM uses different names to refer to floating−point registers from MASM: where MASM would callST(0), ST(1) and so on, and a86 would call them simply 0, 1 and so on, NASM chooses to call them st0, st1 etc. 28 As of version 0.96, NASM now treats the instructions with ‘nowait’ forms in the same way as 2.2.7 Other Differences For historical reasons, NASM uses the keyword TWORD where MASM and compatible assemblers use TBYTE. NASM does not declare uninitialized storage in the same way as MASM: where a MASM programmerstack db 64 dup (?), NASM requires stack resb 64, intended to be read as ‘reserve 64 bytes’. For a limited amount of compatibility, since NASM treats ? as a valid character in symbol names, you can code ? equ 0 and then writing dw ? will at least do something vaguely useful. DUP is still not a supported syntax, however. In addition to all of this, macros and directives work completely differently to MASM. See chapter 4 and 29 30 Chapter 3: The NASM Language 3.1 Layout of a NASM Source Line Like most assemblers, each NASM source line contains (unless it is a macro, a preprocessor directive orlodsb alone on a line, and type lodab by accident, then that’s still a valid source line which does nothing but define a label. Running NASM with the−w+orphan−labels will cause it to warn you if you define a label alone on a line without a trailing colon.) _, $, #, @, ~, ., and ?. The only characters which may be used as the first character of an identifier are letters, . (with special meaning: see section 3.9), _ and ?. An identifier may also be prefixed with a $ to indicate that it is intended to be read as an identifier and not a reserved word; thus, if some other module you are linking with defines a symbol called eax, you can refer to $eax in NASM code to distinguish the symbol from the register. Maximum length of an identifier is 4095 characters.LOCK, REP, REPE/REPZ, REPNE/REPNZ, XACQUIRE/XRELEASE or BND/NOBND, in the usual way. Explicit address−size and operand−size prefixes A16, A32, A64, O16 and O32, O64 are provided – one example of their use is given in chapter 10. You can also use the name of a segmentes mov [bx],ax is equivalent to coding mov [es:bx],ax. We recommend the latter syntax, since it is consistent with other syntactic features of the language, but for instructions such as LODSB, which has no operands and yet can require a segment override, there is no clean syntactic way to proceed apart from es lodsb. An instruction is not required to use a prefix: prefixes such as CS, A32, LOCK or REPE can appear on a line by themselves, and NASM will just generate the prefix bytes.ax, bp, ebx, cr0: NASM does not use the gas–style syntax in which register names must be prefixed by a % sign), or they can be effective addresses (see section 3.3), constants (section 3.4) or expressions (section 3.5). 31 fadd st1,st0 ; this sets st1 := st1 + st0 DWORD, QWORD or TWORD to indicate what size of memory operand it refers to. 3.2 Pseudo−Instructions Pseudo−instructions are things which, though not real x86 machine instructions, are used in theDB, DW, DD, DQ, DT, DO, DY and DZ; their uninitialized counterparts RESB, RESW, RESD, RESQ, REST, RESO, RESY and RESZ; the INCBIN command, the EQU command, and the TIMES prefix. 3.2.1 DB and Friends: Declaring Initialized Data DB, DW, DD, DQ, DT, DO, DY and DZ are used, much as in MASM, to declare initialized data in the output file. They can be invoked in a wide range of ways: , DO, DY and DZ do not accept numeric constants as operands. 3.2.2 RESB and Friends: Declaring Uninitialized Data RESB, RESW, RESD, RESQ, REST, RESO, RESY and RESZ are designed to be used in the BSS section of a module: they declare uninitialized storage space. Each takes a single operand, which is the number of bytes, words, doublewords or whatever to reserve. As stated in section 2.2.7, NASM does not supportDW ? or similar things: this is what it does instead. The operand to a RESB–type pseudo−instruction is a critical expression: see section 3.8. For example: 3.2.3 INCBIN: Including External Binary Files INCBIN is borrowed from the old Amiga assembler DevPac: it includes a binary file verbatim into the output file. This can be handy for (for example) including graphics and sound data directly into a game 32 incbin \"file.dat\",1024,512 ; skip the first 1024, and is both a directive and a standard macro; the standard macro version searches for the file in the include file search path and adds the file to the dependency lists. This macro can be overridden if 3.2.4 EQU: Defining Constants EQU defines a symbol to a given constant value: when EQU is used, the source line must contain a label. The action of EQU is to define the given label name to the value of its (only) operand. This definition is absolute, and cannot change later. So, for example,msglen to be the constant 12. msglen may not then be redefined later. This is not a preprocessor definition either: the value of msglen is evaluated once, using the value of $ (see section 3.5 for an explanation of $) at the point of definition, rather than being evaluated wherever it is referenced and using the value of $ at the point of reference. 3.2.5 TIMES: Repeating Instructions or Data The TIMES prefix causes the instruction to be assembled multiple times. This is partly present as NASM’s equivalent of the DUP syntax supported by MASM–compatible assemblers, in that you can code zerobuf: times 64 db 0TIMES is more versatile than that. The argument to TIMES is not just a numeric constant, but a numeric expression, so you can do things like buffer: db ’hello, world’ buffer up to 64. Finally, TIMES can be applied to ordinary instructions, so you can code trivial unrolled loops in it:times 100 resb 1 and resb 100, except that the latter will be assembled about 100 times faster due to the internal structure of the assembler.TIMES is a critical expression (section 3.8). Note also that TIMES can’t be applied to macros: the reason for this is that TIMES is processed after the macro phase, which allows the argument to TIMES to contain expressions such as 64−$+buffer as above. To repeat more than one line of code, or a complex macro, use the preprocessor %rep directive. 3.3 Effective Addresses An effective address is any operand to an instruction which references memory. Effective addresses, in. 33 More complicated effective addresses, such as those involving more than one register, work in exactly legal are perfectly all right: mov eax,[ebx*5] ; assembles as [ebx*4+ebx] [eax*2+0] and [eax+eax], and NASM will generally generate the latter on the grounds that the former requires four bytes to store a zero offset.[eax+ebx] and [ebx+eax] to generate different opcodes; this is occasionally useful because [esi+ebp] and [ebp+esi] have different default segment registers.BYTE, WORD, DWORD and NOSPLIT. If you need [eax+3] to be assembled using a double−word offset field instead of the one byte NASM will normally generate, you can code. Similarly, you can force NASM to use a byte offset for a small value which it hasn’t seen on the first pass (see section 3.8 for an example of such a code fragment) by using. As special cases, [byte eax] will code [eax+0] with a byte offset of zero, and [dword eax] will code it with a double−word offset of zero. The normal form, [eax], will be coded with no offset field.[eax*2] into [eax+eax] because that allows the offset field to be absent and space to be saved; in fact, it will also split [eax*2+offset] into [eax+eax+offset]. You can combat this behaviour by the use of the NOSPLIT keyword: [nosplit eax*2] will force [eax*2+0] to be generated literally. [nosplit eax*1] also has the same effect. In another way, a split EA form [0, eax*2] can be used, too. However, NOSPLIT in [nosplit eax+eax] will be ignored because user’s intention here is considered as [eax+eax]. In 64−bit mode, NASM will by default generate absolute addresses. The REL keyword makes it produce RIP–relative addresses. Since this is frequently the normally desired behaviour, see the DEFAULT directive (section 6.2). The keyword ABS overrides REL. A new form of split effective addres syntax is also supported. This is mainly intended for mib operands 34 bndstx [rbx*1+rax+0x3], bnd0 ; GAS − ’*1’ indecates an index reg 3.4 Constants NASM understands four different types of constant: numeric, character, string and floating−point. 3.4.1 Numeric Constants A numeric constant is simply a number. NASM allows you to specify numbers in a variety of numberH or X, D or T, Q or O, and B or Y for hexadecimal, decimal, octal and binary respectively, or you can prefix 0x, for hexadecimal in the style of C, or you can prefix $ for hexadecimal in the style of Borland Pascal or Motorola Assemblers. Note, though, that the $ prefix does double duty as a prefix on identifiers (see section 3.1), so a hex number prefixed with a $ sign must have a digit after the $ rather than a letter. In addition, current versions of NASM accept the prefix 0h for hexadecimal, 0d or 0t for decimal, 0o or 0q for octal, and 0b or 0y for binary. Please note that unlike C, a 0 prefix by itself does not imply an octal constant! Numeric constants can have underscores (_) interspersed to break up long strings. Some examples (all producing exactly the same code): 3.4.2 Character Strings A character string consists of up to eight characters enclosed in either single quotes (’...’), double quotes (\"...\") or backquotes (‘...‘). Single or double quotes are equivalent to NASM (except of course that surrounding the constant with single quotes allows double quotes to appear within it and\\–escapes for special characters. The following escape sequences are recognized by backquoted strings: 35 \\‘ backquote (‘) \\0, meaning a NUL character (ASCII 0), is a special case of the octal escape sequence. \\u or \\U are converted to UTF−8. For example, the following lines are all equivalent: 3.4.3 Character Constants A character constant consists of a string up to eight bytes long, used in an expression context. It is0x61626364, but 0x64636261, so that if you were then to store the value into memory, it would read abcd rather than dcba. This is also the sense of character constants understood by the Pentium’s CPUID instruction. 3.4.4 String Constants String constants are character strings used in the context of some pseudo−instructions, namely the DB family and INCBIN (where it represents a filename.) They are also used in certain preprocessor directives. db ’ab’ would have the 36 same effect as db ’a’, which would be silly. Similarly, three−character or four−character constants are treated as strings when they are operands to DW, and so forth. 3.4.5 Unicode Strings The special operators __utf16__, __utf16le__, __utf16be__, __utf32__, __utf32le__ and __utf32be__ allows definition of Unicode strings. They take a string in UTF−8 format and converts it to UTF−16 or UTF−32, respectively. Unless the be forms are specified, the output is littleendian. DB family instructions, or to character constants in an expression context. 3.4.6 Floating−Point Constants Floating−point constants are acceptable only as arguments to DB, DW, DD, DQ, DT, and DO, or as arguments to the special operators __float8__, __float16__, __float32__, __float64__, __float80m__, __float80e__, __float128l__, and __float128h__. Floating−point constants are expressed in the traditional form: digits, then a period, then optionallyE followed by an exponent. The period is mandatory, so that NASM can distinguish between dd 1, which declares an integer constant, and dd 1.0 which declares a floating−point constant. 0x, hexadecimal digits, period, optionally more hexadeximal digits, then optionally a P followed by a binary (not hexadecimal) exponent in decimal notation. As an extension, NASM additionally supports the 0h and $ prefixes for hexadecimal, as well binary and octal floating−point, using the 0b or 0y and 0o or 0q prefixes, respectively. Underscores to break up groups of digits are permitted in floating−point constants as well.__float80m__ and __float80e__ produce the 64−bit 37 mantissa and 16−bit exponent of an 80−bit floating−point number, and __float128l__ and __float128h__ produce the lower and upper 64−bit halves of a 128−bit floating−point number, respectively. RAX. This is exactly equivalent to:__Infinity__, __QNaN__ (or __NaN__) and __SNaN__ can be used to generate infinities, quiet NaNs, and signalling NaNs, respectively. These are normally used as macros:%use fp standard macro package contains a set of convenience macros. See section 5.3. 3.4.7 Packed BCD Constants x87−style packed BCD constants can be used in the same contexts as 80−bit floating−point numbers.p or prefixed with 0p, and can include up to 18 decimal digits. As with other numeric constants, underscores can be used to separate digits. 3.5 Expressions Expressions in NASM are similar in syntax to those in C. Expressions are evaluated as 64−bit integers$ and $$ tokens. $ evaluates to the assembly position at the beginning of the line containing the expression; so you can code an infinite loop using JMP $. $$ evaluates to the beginning of the current section; so you can tell how far into the section you are by using ($−$$). The arithmetic operators provided by NASM are listed here, in increasing order of precedence. 3.5.1 |: Bitwise OR Operator The | operator gives a bitwise OR, exactly as performed by the OR machine instruction. Bitwise OR is the lowest−priority arithmetic operator supported by NASM. 38 3.5.2 ^: Bitwise XOR Operator ^ provides the bitwise XOR operation. 3.5.3 &: Bitwise AND Operator & provides the bitwise AND operation. 3.5.4 << and >>: Bit Shift Operators << gives a bit−shift to the left, just as it does in C. So 5<<3 evaluates to 5 times 8, or 40. >> gives a bit−shift to the right; in NASM, such a shift is always unsigned, so that the bits shifted in from the left−hand end are filled with zero rather than a sign−extension of the previous highest bit. 3.5.5 + and −: Addition and Subtraction Operators The + and − operators do perfectly ordinary addition and subtraction. 3.5.6 *, /, //, % and %%: Multiplication and Division * is the multiplication operator. / and // are both division operators: / is unsigned division and // is signed division. Similarly, % and %% provide unsigned and signed modulo operators respectively. NASM, like ANSI C, provides no guarantees about the sensible operation of the signed modulo operator.% character is used extensively by the macro preprocessor, you should ensure that both the signed and unsigned modulo operators are followed by white space wherever they appear. 3.5.7 Unary Operators The highest−priority operators in NASM’s expression grammar are those which only apply to one+, −, ~, !, SEG, and the integer functions operators. − negates its operand, + does nothing (it’s provided for symmetry with −), ~ computes the one’s complement of its operand, ! is the logical negation operator. SEG provides the segment address of its operand (explained in more detail in section 3.6). A set of additional operators with leading and trailing double underscores are used to implement theifunc macro package, see section 5.4. 3.6 SEG and WRT When writing large 16−bit programs, which must be split into multiple segments, it is often necessary toSEG operator to perform this function.SEG operator returns the preferred segment base of a symbol, defined as the segment base relative to which the offset of the symbol makes sense. So the codeES:BX with a valid pointer to the symbol symbol. Things can be more complex than this: since 16−bit segments and groups may overlap, you mightWRT (With Reference To) keyword. So you can do things like mov ax,weird_seg ; weird_seg is a segment base 39 to load ES:BX with a different, but functionally equivalent, pointer to the symbol symbol. NASM supports far (inter−segment) calls and jumps by means of the syntax call segment:offset, where segment and offset both represent immediate values. So to call a far procedure, you could code either of call far procedure as a synonym for the first of the above usages. JMP works identically to CALL in these examples. To declare a far pointer to a data item in a data segment, you must code 3.7 STRICT: Inhibiting Optimization When assembling with the optimizer set to level 2 or higher (see section 2.1.23), NASM will use sizeBYTE, WORD, DWORD, QWORD, TWORD, OWORD, YWORD or ZWORD), but will give them the smallest possible size. The keyword STRICT can be used to inhibit optimization and force a particular operand to be emitted in the specified size. For example, with the optimizer on, and in BITS 16 mode, push dword 3366 6A 21, whereas push strict dword 33 66 68 21 00 00 00. With the optimizer off, the same code (six bytes) is generated whether the STRICT keyword was used or not. 3.8 Critical Expressions Although NASM has an optional multi−pass optimizer, there are some expressions which must beCritical Expressions. The first pass is used to determine the size of all the assembled code and data, so that the second pass,TIMES in this case could equally legally evaluate to anything at all; NASM will reject this example because it cannot tell the size of the TIMES line when it first sees it. It will just as firmly reject the slightly paradoxical codeany value for the TIMES argument is by definition wrong! 40 NASM rejects these examples by means of a concept called a critical expression, which is defined to be an expression whose value is required to be computable in the first pass, and which must thereforeTIMES prefix is a critical expression. 3.9 Local Labels NASM gives special treatment to symbols beginning with a period. A label beginning with a singlelocal label, which means that it is associated with the previous non−local label. So, for example: JNE instruction jumps to the line immediately before it, because the two definitions of .loop are kept separate by virtue of each being associated with the previous non−local label.defining a local label in terms of the previous non−local label: the first definition of .loop above is really defining a symbol called label1.loop, and the second defines a symbol called label2.loop. So, if you really needed to, you could write label3 ; some more code ..@, then it does nothing to the local label mechanism. So you could code label1: ; a non−local label is used to specify the entry point in the obj output format (see section 7.4.6), 41 ..imagebase is used to find out the offset from a base address of the current image in the win64 output format (see section 7.6.1). So just keep in mind that symbols beginning with a double period are 42 Chapter 4: The NASM Preprocessor NASM contains a powerful macro processor, which supports conditional assembly, multi−level file% sign. The preprocessor collapses all lines which end with a backslash (\\) character into a single line. Thus: 4.1 Single−Line Macros 4.1.1 The Normal Way: %define Single−line macros are defined using the %define preprocessor directive. The definitions work in a similar way to C; so you can do things likemov ax,1+2*8, even though the macro b wasn’t defined at the time of definition of a. Macros defined with %define are case sensitive: after %define foo bar, only foo will expand to bar: Foo or FOO will not. By using %idefine instead of %define (the ‘i’ stands for ‘insensitive’) you can define all the case variants of a macro at once, so that %idefine foo bar would cause foo, Foo, FOO, fOO and so on all to expand to bar. There is a mechanism which detects when a macro call has occurred as a result of a previous expansiona(3) will expand once, becoming 1+a(3), and will then expand no further. This behaviour can be useful: see section 9.1 for an example of its use. 43 the preprocessor will be able to handle both types of macro call, by counting the parameters you pass;foo(3) will become 1+3 whereas foo(ebx,2) will become 1+ebx*2. However, if you define %define foo bar foo will be accepted: a macro with no parameters prohibits the definition of the same name as a macro with parameters, and vice versa. This doesn’t prevent single−line macros being redefined: you can perfectly well define a macro with %define foo bar foo is invoked, it will be expanded according to the most recent definition. This is particularly useful when defining single−line macros with %assign (see section 4.1.7). 4.1.2 Resolving %define: %xdefine To have a reference to an embedded single−line macro resolved at the time that the embedding macrodefined, as opposed to when the embedding macro is expanded, you need a different mechanism to the one offered by %define. The solution is to use %xdefine, or it’s case−insensitive counterpart %ixdefine. Suppose you have the following code:val1 is equal to 0, and val2 is equal to 1. This is because, when a single−line macro is defined using %define, it is expanded only when it is called. As isFalse expands to isTrue, the expansion will be the current value of isTrue. The first time it is called that is 0, and the second time it is 1. isFalse to expand to the value assigned to the embedded macro isTrue at the time that isFalse was defined, you need to change the above code to use %xdefine. %xdefine isTrue 1 44 Now, each time that isFalse is called, it expands to 1, as that is what the embedded macro isTrue expanded to at the time that isFalse was defined. 4.1.3 Macro Indirection: %[...] The %[...] construct can be used to expand macros in contexts where macro expansion would otherwise not occur, including in the names other macros. For example, if you have a set of macrosFoo16, Foo32 and Foo64, you could write: mov ax,Foo%[__BITS__] ; The Foo value__BITS__ (see section 4.11.5) to automatically select between them. Similarly, the two statements: concatenates to adjacent tokens in the same way that multi−line macro parameters do, see section 4.3.9 for details. 4.1.4 Concatenating Single Line Macro Tokens: %+ Individual tokens in single line macros can be concatenated, to produce longer tokens for later%+, in order to disambiguate it from the syntax %+1 used in multiline macros. 4.1.5 The Macro Name Itself: %? and %?? The special symbols %? and %?? can be used to reference the macro name itself inside a macro expansion, this is supported for both single−and multi−line macros. %? refers to the macro name as 45 invoked, whereas %?? refers to the macro name as declared. The two are always the same for case−sensitive macros, but for case−insensitive macros, they can differ. 4.1.6 Undefining Single−Line Macros: %undef Single−line macros can be removed with the %undef directive. For example, the following sequence: %define foo bar mov eax, foo, since after %undef the macro foo is no longer defined. 4.1.7 Preprocessor Variables: %assign An alternative way to define single−line macros is by means of the %assign command (and its case−insensitive counterpart %iassign, which differs from %assign in exactly the same way that %idefine differs from %define). %assign is used to define single−line macros which take no parameters and have a numeric value. This value can be specified in the form of an expression, and it will be evaluated once, when the directive is processed. Like %define, macros defined using %assign can be re−defined later, so you can do things like %assign i i+1 is useful for controlling the termination of %rep preprocessor loops: see section 4.5 for an example of this. Another use for %assign is given in section 8.4 and section 9.1. The expression passed to %assign is a critical expression (see section 3.8), and must also evaluate to a pure number (rather than a relocatable reference such as a code or data address, or anything involving 46 4.1.8 Defining Strings: %defstr %defstr, and its case−insensitive counterpart %idefstr, define or redefine a single−line macro without parameters but converts the entire right−hand side, after macro expansion, to a quoted string%! construct (see section 4.10.2): %defstr PATH %!PATH ; The operating system PATH variable 4.1.9 Defining Tokens: %deftok %deftok, and its case−insensitive counterpart %ideftok, define or redefine a single−line macro without parameters but converts the second parameter, after string conversion, to a sequence of 4.2 String Manipulation in Macros It’s often useful to be able to handle strings in macros. NASM supports a few simple string handling\\–escapes inside ‘–quoted strings. 4.2.1 Concatenating Strings: %strcat The %strcat operator concatenates quoted strings and assign them to a single−line macro. For example: ’Alpha: 12\" screen’ to alpha. Similarly: %strcat beta ’\"foo\"\\’, \"’bar’\"‘\"foo\"\\\\’bar’‘ to beta. The use of commas to separate strings is permitted but optional. 4.2.2 String Length: %strlen The %strlen operator assigns the length of a string to a macro. For example: %strlen charcnt ’my string’charcnt would receive the value 9, just as if an %assign had been used. In this example, ’my string’ was a literal string but it could also have been a single−line macro that expands to a string, as in the following example: 47 %define sometext ’my string’ charcnt being assigned the value of 9. 4.2.3 Extracting Substrings: %substr Individual letters or substrings in strings can be extracted using the %substr operator. An example of its use is probably more useful than the description:%strlen (see section 4.2.2), the first parameter is the single−line macro to be created and the second is the string. The third parameter specifies the first character to be selected, and the optional%strlen would assign given the same string. Index values out of range result in an empty string. A negative length means \"until N−1 characters before the end of string\", i.e. means until end of string, −2 until one character before, etc. 4.3 Multi−Line Macros: %macro Multi−line macros are much more like the type of macro seen in MASM and TASM: a multi−line macro1 after the macro name in the %macro line defines the number of parameters the macro prologue expects to receive. The use of %1 inside the macro definition refers to the first parameter to the macro call. With a macro taking more than one parameter, subsequent parameters would be%2, %3 and so on. Multi−line macros, like single−line macros, are case−sensitive, unless you define them using the%imacro. If you need to pass a comma as part of a parameter to a multi−line macro, you can do that by enclosing the entire parameter in braces. So you could code things like 48 %endmacro 4.3.1 Overloading Multi−Line Macros As with single−line macros, multi−line macros can be overloaded by defining the same macro namepush is now defined to be a macro, and is being invoked with a number of parameters for which no definition has been given. The−w−macro−params command−line option (see section 2.1.25). 4.3.2 Macro−Local Labels NASM allows you to define labels within a multi−line macro definition in such a way as to make them%% to the label name. So you can invent an instruction which executes a RET if the Z flag is set by doing this: %macro retz 0 %%skip. The names NASM invents are of the form ..@2345.skip, where the number 2345 changes with every macro call. The ..@ prefix prevents 49 macro−local labels from interfering with the local label mechanism, as described in section 3.9. You..@ prefix, then a number, then another period) in case they interfere with macro−local labels. 4.3.3 Greedy Macro Parameters Occasionally it is useful to define a macro which lumps its entire command line into one parametergreedy, meaning that if you invoke the macro with more parameters than it expects, all the spare parameters get lumped into the last definedwritefile above will work as expected: the text before the first comma, [filehandle], is used as the first macro parameter and expanded when %1 is referred to, and all the subsequent text is lumped into %2 and placed after the db. The greedy nature of the macro is indicated to NASM by the use of the + sign after the parameter count on the %macro line. If you define a greedy macro, you are effectively telling NASM how it should expand the macro given number of parameters from the actual number specified up to infinity; in this case, for example, NASM now knows what to do when it sees a call to writefile with 2, 3, 4 or more parameters. NASM will take this into account when overloading macros, and will not allow you to define another form of taking 4 parameters (for example). Of course, the above macro could have been implemented as a non−greedy macro, in which case the 4.3.4 Macro Parameters Range NASM allows you to expand parameters via special construction %{x:y} where x is the first parameter index and y is the last. Any index can be either negative or positive but must never be zero. For example 50 %endmacro 3,4,5 range. Even more, the parameters can be reversed so that5,4,3 range. But even this is not the last. The parameters can be addressed via negative indices so NASM will count6,5,4 range. Note that NASM uses comma to separate parameters being expanded.%{−1:−1} which gives you the last argument passed to a macro. 4.3.5 Default Macro Parameters NASM also allows you to define a multi−line macro with a range of allowable parameter counts. If you do this, you can specify defaults for omitted parameters. So, for example:writefile macro defined in section 4.3.3) can be called with an explicit error message, which it will display on the error output stream before exiting, or it can be called%1 would always be taken from the macro call. %2, if not specified by the macro call, would default to eax, and %3 if not specified would default to [ebx+2]. You can provide extra information to a macro by providing too many default parameters: 51 This will trigger a warning by default; see section 2.1.25 for more information. When quux is invoked, it receives not one but two parameters. something can be referred to as %2. The difference between passing something this way and writing something in the macro body is that with this way something is evaluated when the macro is defined, not when it is expanded. You may omit parameter defaults from the macro definition, in which case the parameter default is%0 token (see section 4.3.6) allows you to determine how many parameters were really passed to the macro call. die macro above could be made more powerful, and more useful, by changing the first line of the definition*. In this case, of course, it is impossible to provide a full set of default parameters. Examples of this usage are shown in section 4.3.8. 4.3.6 %0: Macro Parameter Counter The parameter reference %0 will return a numeric constant giving the number of parameters received, that is, if %0 is n then %n is the last parameter. %0 is mostly useful for macros that can take a variable number of parameters. It can be used as an argument to %rep (see section 4.5) in order to iterate through all the parameters of a macro. Examples are given in section 4.3.8. 4.3.7 %00: Label Preceeding Macro %00 will return the label preceeding the macro invocation, if any. The label must be on the same line as the macro invocation, may be a local label (see section 3.9), and need not end in a colon. 4.3.8 %rotate: Rotating Macro Parameters Unix shell programmers will be familiar with the shift shell command, which allows the arguments passed to a shell script (referenced as $1, $2 and so on) to be moved left by one place, so that the argument previously referenced as $2 becomes available as $1, and the argument previously referenced as $1 is no longer available at all. NASM provides a similar mechanism, in the form of %rotate. As its name suggests, it differs from the Unix shift in that no parameters are lost: parameters rotated off the left end of the argument list reappear on the right, and vice versa. is invoked with a single numeric argument (which may be an expression). The macro parameters are rotated to the left by that many places. If the argument to %rotate is negative, the macro parameters are rotated to the right.PUSH instruction on each of its arguments in turn, from left to right. It begins by pushing its first argument, %1, then invokes %rotate to move all the arguments one place to the left, so that the original second argument is now available as %1. Repeating this procedure as many times as 52 there were arguments (achieved by supplying %0 as the argument to %rep) causes each argument in turn to be pushed. * as the maximum parameter count, indicating that there is no upper limit on the number of parameters you may supply to the multipush macro. It would be convenient, when using this macro, to have a POP equivalent, which didn’t require the arguments to be given in reverse order. Ideally, you would write the multipush macro call, then cut−and−paste the line to where the pop needed to be done, and change the name of the called macromultipop, and the macro would take care of popping the registers in the opposite order from the one in which they were pushed. right, so that the original last argument appears as %1. This is then popped, and the arguments are rotated right again, so the second−to−last argument becomes %1. Thus the arguments are iterated through in reverse order. 4.3.9 Concatenating Macro Parameters NASM can concatenate macro parameters and macro indirection constructs on to other text%1foo. 53 If you need to append a digit to a macro parameter, for example defining labels foo1 and foo2 when passed the parameter foo, you can’t code %11 because that would be taken as the eleventh macro parameter. Instead, you must code %{1}1, which will separate the first 1 (giving the number of the macro parameter) from the second (literal text to be concatenated to the parameter).% sign and before the literal text in braces: so %{%foo}bar concatenates the text bar to the end of the real name of the macro−local label %%foo. (This is unnecessary, since the form NASM uses for the real names of macro−local labels means that the two%{%foo}bar and %%foobar would both expand to the same thing anyway; nevertheless, the capability is there.) %[...] (section 4.1.3), behaves the same way as macro parameters for the purpose of concatenation.%+ operator, section 4.1.4. 4.3.10 Condition Codes as Macro Parameters NASM can give special treatment to a macro parameter which contains a condition code. For a start,%1 by means of the alternative syntax %+1, which informs NASM that this macro parameter is supposed to contain a condition code, and will cause the preprocessor tonot a valid condition code. Far more usefully, though, you can refer to the macro parameter by means of %−1, which NASM will expand as the inverse condition code. So the retz macro defined in section 4.3.2 can be replaced by a general conditional−return macro like this: retc ne, which will cause the conditional−jump instruction in the macro expansion to come out as JE, or retc po which will make the jump a JPE. The %+1 macro−parameter reference is quite happy to interpret the arguments CXZ and ECXZ as valid condition codes; however, %−1 will report an error if passed either of these, because no inverse condition code exists. 4.3.11 Disabling Listing Expansion When NASM is generating a listing file from your program, it will generally expand multi−line macros by.nolist qualifier, which you can include in a macro definition to inhibit the expansion of the macro in the listing file. The .nolist qualifier comes directly after the number of parameters, like this: 54 4.3.12 Undefining Multi−Line Macros: %unmacro Multi−line macros can be removed with the %unmacro directive. Unlike the %undef directive, however, %unmacro takes an argument specification, and will only remove exact matches with that argument specification. foo, but %macro bar 1−3 not remove the macro bar, since the argument specification does not match exactly. 4.4 Conditional Assembly Similarly to the C preprocessor, NASM allows sections of a source file to be assembled only if certain%ifn and %elifn are also supported. The %else clause is optional, as is the %elif clause. You can have more than one %elif clause as well. %if directive. Each has its corresponding %elif, %ifn, and %elifn directives; for example, the equivalents to the %ifdef directive are %elifdef, %ifndef, and %elifndef. 4.4.1 %ifdef: Testing Single−Line Macro Existence Beginning a conditional−assembly block with the line %ifdef MACRO will assemble the subsequent code if, and only if, a single−line macro called MACRO is defined. If not, then the %elif and %else blocks (if any) will be processed instead. −dDEBUG to create a version of the program which produced debugging messages, and remove the option to generate the final release version of the 55 You can test for a macro not being defined by using %ifndef instead of %ifdef. You can also test for macro definitions in %elif blocks by using %elifdef and %elifndef. 4.4.2 %ifmacro: Testing Multi−Line Macro Existence The %ifmacro directive operates in the same way as the %ifdef directive, except that it checks for the existence of a multi−line macro.%ifmacro is considered true if defining a macro with the given name and number of arguments would cause a definitions conflict. For example: %ifnmacro instead of %ifmacro. Additional tests can be performed in %elif blocks by using %elifmacro and %elifnmacro. 4.4.3 %ifctx: Testing the Context Stack The conditional−assembly construct %ifctx will cause the subsequent code to be assembled if and only if the top context on the preprocessor’s context stack has the same name as one of the arguments.%ifdef, the inverse and %elif forms %ifnctx, %elifctx and %elifnctx are also supported. %ifctx, see section 4.7.6. 4.4.4 %if: Testing Arbitrary Numeric Expressions The conditional−assembly construct %if expr will cause the subsequent code to be assembled if and only if the value of the numeric expression expr is non−zero. An example of the use of this feature is in deciding when to break out of a %rep preprocessor loop: see section 4.5 for a detailed example. The expression given to %if, and its counterpart %elif, is a critical expression (see section 3.8). %if extends the normal NASM expression syntax, by providing a set of relational operators which are not normally available in expressions. The operators =, <, >, <=, >= and <> test equality, less−than, greater−than, less−or−equal, greater−or−equal and not−equal respectively. The C−like forms == and != are supported as alternative forms of = and <>. In addition, low−priority logical operators &&, ^^ and || are provided, supplying logical AND, logical XOR and logical OR. These work like the C logical operators (although C has no logical XOR), in that they always return either 0 or 1, and treat any^^, for example, returns 1 if exactly one of its inputs is zero, and 0 otherwise). The relational operators also return 1 for true and 0 for false. 56 Like other %if constructs, %if has a counterpart %elif, and negative forms %ifn and %elifn. 4.4.5 %ifidn and %ifidni: Testing Exact Text Identity The construct %ifidn text1,text2 will cause the subsequent code to be assembled if and only if text1 and text2, after expanding single−line macros, are identical pieces of text. Differences in white space are not counted. is similar to %ifidn, but is case−insensitive. For example, the following macro pushes a register or number on the stack, and allows you to treat IP as a real register:%if constructs, %ifidn has a counterpart %elifidn, and negative forms %ifnidn and %elifnidn. Similarly, %ifidni has counterparts %elifidni, %ifnidni and %elifnidni. 4.4.6 %ifid, %ifnum, %ifstr: Testing Token Types Some macros will want to perform different tasks depending on whether they are passed a number, a%ifid, taking one parameter (which may be blank), assembles the subsequent code if and only if the first token in the parameter exists and is an identifier. %ifnum works similarly, but tests for the token being a numeric constant; %ifstr tests for it being a string. For example, the writefile macro defined in section 4.3.3 can be extended to take advantage of %ifstr in the following fashion: %macro writefile 2−3+ 57 %endmacrowritefile macro can cope with being called in either of the following two ways: writefile [file], strpointer, length strpointer is used as the address of an already−declared string, and length is used as its length; in the second, a string is given to the macro, which therefore declares it itself and works out%if inside the %ifstr: this is to detect whether the macro was passed two arguments (so the string would be a single string constant, and db %2 would be adequate) or more (in which case, all but the first two would be lumped together into %3, and db %2,%3 would be required). The usual %elif..., %ifn..., and %elifn... versions exist for each of %ifid, %ifnum and %ifstr. 4.4.7 %iftoken: Test for a Single Token Some macros will want to do different things depending on if it is passed a single token (e.g. paste it to%+) versus a multi−token sequence. The conditional assembly construct %iftoken assembles the subsequent code if and only if the expanded parameters consist of exactly one token, possibly surrounded by whitespace.−1 contains two tokens: the unary minus operator −, and the number 1. The usual %eliftoken, %ifntoken, and %elifntoken variants are also provided. 4.4.8 %ifempty: Test for Empty Expansion The conditional assembly construct %ifempty assembles the subsequent code if and only if the expanded parameters do not contain any tokens at all, whitespace excepted.%elifempty, %ifnempty, and %elifnempty variants are also provided. 4.4.9 %ifenv: Test If Environment Variable Exists The conditional assembly construct %ifenv assembles the subsequent code if and only if the environment variable referenced by the %!variable directive exists. The usual %elifenv, %ifnenv, and %elifnenv variants are also provided. Just as for %!variable the argument should be written as a string if it contains characters that would not be legal in an identifier. See section 4.10.2. 4.5 Preprocessor Loops: %rep NASM’s TIMES prefix, though useful, cannot be used to invoke a multi−line macro multiple times, because it is processed by NASM after macros have already been expanded. Therefore NASM provides%rep. The directives %rep and %endrep (%rep takes a numeric argument, which can be an expression; %endrep takes no arguments) can be used to enclose a chunk of code, which is then replicated as many times as specified by the preprocessor: 58 %assign i 0 INC instructions, incrementing every word of memory from [table] to [table+126]. For more complex termination conditions, or to break out of a repeat loop part way along, you can use%exitrep directive to terminate the loop, like this: fibonacci: %rep. This is to prevent the possibility of NASM getting into an infinite loop in the preprocessor, which (on multitasking or multi−user systems) would typically cause all the system 4.6 Source Files and Dependencies These commands allow you to split your sources into multiple files. 4.6.1 %include: Including Other Files Using, once again, a very similar syntax to the C preprocessor, NASM’s preprocessor lets you include%include directive: %include \"macros.mac\" macros.mac into the source file containing the %include directive. −i option. The standard C idiom for preventing a file being included more than once is just as applicable in NASM:macros.mac has the form %ifndef MACROS_MAC 59 then including the file more than once will not cause errors, because the second time the file isMACROS_MAC will already be defined. You can force a file to be included even if there is no %include directive that explicitly includes it, by using the −p option on the NASM command line (see section 2.1.18). 4.6.2 %pathsearch: Search the Include Path The %pathsearch directive takes a single−line macro name and a filename, and declare or redefines the specified single−line macro to be the include−path−resolved version of the filename, if the file exists−Ibins/ in the include path may end up defining the macro MyFoo to be \"bins/foo.bin\". 4.6.3 %depend: Add Dependent Files The %depend directive takes a filename and adds it to the list of files to be emitted as dependency generation when the −M options and its relatives (see section 2.1.4) are used. It produces no output. This is generally used in conjunction with %pathsearch. For example, a simplified version of the standard macro wrapper for the INCBIN directive looks like: %imacro incbin 1−2+ 0 dep, then adds it to the dependency lists, and finally issues the assembler−level INCBIN directive. 4.6.4 %use: Include Standard Macro Package The %use directive is similar to %include, but rather than including the contents of a file, it includes a named standard macro package. The standard macro packages are part of NASM, and are described in%include directive, package names for the %use directive do not require quotes, but quotes are permitted. In NASM 2.04 and 2.05 the unquoted form would be macro−expanded; this is no__USE_package__ is also defined, see section 4.11.9. 4.7 The Context Stack Having labels that are local to a macro definition is sometimes not quite powerful enough: sometimesREPEAT ... UNTIL loop, in which the expansion of the REPEAT macro would need to be able to refer to a label which the UNTIL macro had defined. However, for such a macro you would also want to be able to nest these loops. context stack. The preprocessor maintains a stack of contexts, each of which is characterized by a name. You add a new context to the stack using the %push 60 directive, and remove one using %pop. You can define labels that are local to a particular context on the stack. 4.7.1 %push and %pop: Creating and Removing Contexts The %push directive is used to create a new context and place it on the top of the context stack. %push takes an optional argument, which is the name of the context. For example:foobar on the stack. You can have several contexts on the stack with the same name: they can still be distinguished. If no name is given, the context is unnamed (this is%push and the %pop are inside a single macro definition.) The directive %pop, taking one optional argument, removes the top context from the context stack and destroys it, along with any labels associated with it. If an argument is given, it must match the name of 4.7.2 Context−Local Labels Just as the usage %%foo defines a label which is local to the particular macro call in which it is used, the usage %$foo is used to define a label which is local to the context on the top of the context stack. So the REPEAT and UNTIL example given above could be implemented by means of: %macro repeat 0 AL. If you need to define, or access, labels local to the context below the top one on the stack, you can use %$$foo, or %$$$foo for the context below that, and so on. 4.7.3 Context−Local Single−Line Macros NASM also allows you to define single−line macros which are local to a particular context, in just the%$localmac to be local to the top context on the stack. Of course, after a subsequent %push, it can then still be accessed by the name %$$localmac. 61 4.7.4 Context Fall−Through Lookup (deprecated) Context fall−through lookup (automatic searching of outer contexts) is a feature that was added in. NASM version 2.09 will issue a warning when usage of this deprecated feature is detected. Starting with NASM version 2.10, usage of this deprecated feature will simply result in an expression syntax error. An example usage of this deprecated feature follows: %macro ctxthru 0 %$external is being defined in the ctx1 context and referenced within the ctx2 context. With context fall−through lookup, referencing an undefined context−local macro like this%$external referenced within the ctx2 context would implicitly use %$external as defined in ctx1. Most people would expect NASM to issue an error in this situation because %$external was never defined within ctx2 and also isn’t qualified with the proper context depth, %$$external. Here is a revision of the above example with proper context depth:%$external is still being defined in the ctx1 context and referenced within the ctx2 context. However, the reference to %$external within ctx2 has been fully qualified with the proper context depth, %$$external, and thus is no longer ambiguous, unintuitive or erroneous. 4.7.5 %repl: Renaming a Context If you need to change the name of the top context on the stack (in order, for example, to have it%ifctx), you can execute a %pop followed by a %push; but this will have the side effect of destroying all context−local labels and macros associated with the context that was just%repl, which replaces a context with a different name, without touching the associated macros and labels. So you could replace the destructive code 62 with the non−destructive version %repl newname. 4.7.6 Example Use of the Context Stack: Block IFs This example makes use of almost all the context−stack features, including the conditional−assembly%ifctx, to implement a block IF statement as a set of macros. %macro if 1 REPEAT and UNTIL macros given in section 4.7.2, because it uses conditional assembly to check that the macros are issued in the right order (for example, not calling before if) and issues a %error if they’re not. In addition, the endif macro has to be able to cope with the two distinct cases of either directly following an if, or following an else. It achieves this, again, by using conditional assembly to do different things depending on whether the context on top of the stack is if or else. The else macro has to preserve the context on the stack, in order to have the %$ifnot referred to by the if macro be the same as the one defined by the endif macro, but has to change the context’s name so that endif will know there was an intervening else. It does this by the use of %repl. A sample usage of these macros might look like: 63 cmp bx,cx IF macros handle nesting quite happily, by means of pushing another context, describing the inner if, on top of the one describing the outer if; thus else and endif always refer to the last unmatched if or else. 4.8 Stack Relative Preprocessor Directives The following preprocessor directives provide a way to use labels to refer to local variables allocated on%arg (see section 4.8.1) • %stacksize (see section 4.8.2) • %local (see section 4.8.3) 4.8.1 %arg Directive The %arg directive is used to simplify the handling of parameters passed on the stack. Stack based parameter passing is used by many high level languages, including C, C++ and Pascal.%arg without any external macros: some_function: push and pop and the use of context stacks. 64 4.8.2 %stacksize Directive The %stacksize directive is used in conjunction with the %arg (see section 4.8.1) and the %local (see section 4.8.3) directives. It tells NASM the default size to use for subsequent %arg and %local directives. The %stacksize directive takes one required argument which is one of flat, flat64, large or small. %stacksize flat ebp and it assumes that a near form of call was used to get to this label (i.e. that eip is on the stack). %stacksize flat64 rbp and it assumes that a near form of call was used to get to this label (i.e. that rip is on the stack). %stacksize largebp to do stack−based parameter addressing and assumes that a far form of call was used to get to this address (i.e. that ip and cs are on the stack). %stacksize smallbp to address stack parameters, but it is different from large because it also assumes that the old value of bp is pushed onto the stack (i.e. it expects an ENTER instruction). In other words, it expects that bp, ip and cs are on the top of the stack, underneath any local space which may have been allocated by ENTER. This form is probably most useful when used in combination with the %local directive (see section 4.8.3). 4.8.3 %local Directive The %local directive is used to simplify the use of local temporary stack variables allocated in a stack frame. Automatic local variables in C are an example of this kind of variable. The %local directive is most useful when used with the %stacksize (see section 4.8.2 and is also compatible with the %arg directive (see section 4.8.1). It allows simplified reference to variables on the stack which have beenENTER instruction. An example of its use is the following: silly_swap: %$localsize variable is used internally by the %local directive and must be defined within the current context before the %local directive may be used. Failure to do so will result in one expression 65 syntax error for each %local variable declared. It then may be used in the construction of an appropriately sized ENTER instruction as shown in the example. 4.9 Reporting User−Defined Errors: %error, %warning, %fatal The preprocessor directive %error will cause NASM to report an error if it occurs in assembled code. So if other users are going to try to assemble your source files, you can ensure that they define the right%warning issues a warning, but allows assembly to continue: %ifdef F1 and %warning are issued only on the final assembly pass. This makes them safe to use in conjunction with tests that depend on symbol values. terminates assembly immediately, regardless of pass. This is useful when there is no point in continuing the assembly further, and doing so is likely just going to cause a spew of confusing error%error, %warning or %fatal to be quoted. If it is not, then single−line macros are expanded in it, which can be used to display more information to the user. For 4.10 Other Preprocessor Directives 4.10.1 %line Directive The %line directive is used to notify NASM that the input line corresponds to a specific line number in another file. Typically this other file would be an original source file, with the current NASM input being%line directive allows NASM to output messages which indicate the line number of the original source file, instead of the file that is being read by NASM.%line preprocessor directive is as follows: 66 %line nnn[+mmm] [filename]nnn identifies the line of the original source file which this line corresponds to. mmm is an optional parameter which specifies a line increment value; each line of the input file read in ismmm lines of the original source file. Finally, filename is an optional parameter which specifies the file name of the original source file.%line preprocessor directive, NASM will report all file name and line numbers relative to the values specified therein.−−no−line is given, all %line directives are ignored. This may be useful for debugging preprocessed code. See section 2.1.33. 4.10.2 %!variable: Read an Environment Variable. The %!variable directive makes it possible to read the value of an environment variable at assembly time. This could, for example, be used to store the contents of an environment variable into a string,FOO, and you want the contents of FOO to be embedded in your program as a quoted string. You could do that as follows:%defstr directive. If the name of the environment variable contains non−identifier characters, you can use string quotes 4.11 Standard Macros NASM defines a set of standard macros, which are already defined when it starts to process any source directive to empty the preprocessor of everything but context−local preprocessor variables and single−line macros. 4.11.1 NASM Version Macros The single−line macros __NASM_MAJOR__, __NASM_MINOR__, __NASM_SUBMINOR__ and ___NASM_PATCHLEVEL__ expand to the major, minor, subminor and patch level parts of the version number of NASM being used. So, under NASM 0.98.32p1 for example, __NASM_MAJOR__ would be defined to be 0, __NASM_MINOR__ would be defined as 98, __NASM_SUBMINOR__ would be defined to 32, and ___NASM_PATCHLEVEL__ would be defined as 1. Additionally, the macro __NASM_SNAPSHOT__ is defined for automatically generated snapshot releases only. 4.11.2 __NASM_VERSION_ID__: NASM Version ID The single−line macro __NASM_VERSION_ID__ expands to a dword integer representing the full version number of the version of nasm being used. The value is the equivalent to __NASM_MAJOR__, __NASM_MINOR__, __NASM_SUBMINOR__ and ___NASM_PATCHLEVEL__ concatenated to produce a single doubleword. Hence, for 0.98.32p1, the returned number would be equivalent to: 67 db 1,32,98,0 4.11.3 __NASM_VER__: NASM Version string The single−line macro __NASM_VER__ expands to a string which defines the version number of nasm being used. So, under NASM 0.98.32 for example, 4.11.4 __FILE__ and __LINE__: File Name and Line Number Like the C preprocessor, NASM allows the user to find out the file name and line number containing the__FILE__ expands to a string constant giving the name of the current input file (which may change through the course of assembly if %include directives are used), and __LINE__ expands to a numeric constant giving the current line number in the input file. These macros could be used, for example, to communicate debugging information to a macro, since__LINE__ inside a macro definition (either single−line or multi−line) will return the line number of the macro call, rather than definition. So to determine where in a piece of code a crash is occurring, for example, one could write a routine stillhere, which is passed a line number in EAX and outputs something like ‘line 155: still here’. You could then write a macronotdeadyet until you find the crash point. 4.11.5 __BITS__: Current BITS Mode The __BITS__ standard macro is updated every time that the BITS mode is set using the BITS XX or [BITS XX] directive, where XX is a valid mode number of 16, 32 or 64. __BITS__ receives the specified mode number and makes it globally available. This can be very useful for those who utilize 4.11.6 __OUTPUT_FORMAT__: Current Output Format The __OUTPUT_FORMAT__ standard macro holds the current output format name, as given by the −f option or NASM’s default. Type nasm −hf for a list. %ifidn __OUTPUT_FORMAT__, win32 68 4.11.7 __DEBUG_FORMAT__: Current Debug Format If debugging information generation is enabled, The __DEBUG_FORMAT__ standard macro holds the current debug format name as specified by the −F or −g option or the output format default. Type nasm −f output y for a list. __DEBUG_FORMAT__ is not defined if debugging is not enabled, or if the debug format specified is null. 4.11.8 Assembly Date and Time Macros NASM provides a variety of macros that represent the timestamp of the assembly session.The __DATE__ and __TIME__ macros give the assembly date and time as strings, in ISO 8601 format (\"YYYY−MM−DD\" and \"HH:MM:SS\", respectively.) • The __DATE_NUM__ and __TIME_NUM__ macros give the assembly date and time in numeric form; in the format YYYYMMDD and HHMMSS respectively. • The __UTC_DATE__ and __UTC_TIME__ macros give the assembly date and time in universal time (UTC) as strings, in ISO 8601 format (\"YYYY−MM−DD\" and \"HH:MM:SS\", respectively.) If the host platform doesn’t provide UTC time, these macros are undefined. • The __UTC_DATE_NUM__ and __UTC_TIME_NUM__ macros give the assembly date and time universal time (UTC) in numeric form; in the format YYYYMMDD and HHMMSS respectively. If the host platform doesn’t provide UTC time, these macros are undefined. • The __POSIX_TIME__ macro is defined as a number containing the number of seconds since the POSIX epoch, 1 January 1970 00:00:00 UTC; excluding any leap seconds. This is computed using UTC All instances of time and date macros in the same assembly session produce consistent output. For 4.11.9 __USE_package__: Package Include Test When a standard macro package (see chapter 5) is included with the %use directive (see section 4.6.4), a single−line macro of the form __USE_package__ is automatically defined. This allows testing if a particular package is invoked or not.altreg package is included (see section 5.1), then the macro __USE_ALTREG__ is defined. 4.11.10 __PASS__: Assembly Pass The macro __PASS__ is defined to be 1 on preparatory passes, and 2 on the final pass. In preprocess−only mode, it is set to 3, and when running only to generate dependencies (due to the −M or −MG option, see section 2.1.4) it is set to 0. 69 Avoid using this macro if at all possible. It is tremendously easy to generate very strange errors by 4.11.11 STRUC and ENDSTRUC: Declaring Structure Data Types The core of NASM contains no intrinsic means of defining data structures; instead, the preprocessor isSTRUC and ENDSTRUC are used to define a structure data type. STRUC takes one or two parameters. The first parameter is the name of the data type. The second, optional parameter is the base offset of the structure. The name of the data type is defined as a symbol_size appended to it is defined as an EQU giving the size of the structure. Once STRUC has been issued, you are defining the structure, and should define fields using the RESB family of pseudo−instructions, and then invoke ENDSTRUC to finish the definition. For example, to define a structure called mytype containing a longword, a word, a byte and a string of bytes, you might code mt_long as 0 (the offset from the beginning of a mytype structure to the longword field), mt_word as 4, mt_byte as 6, mt_str as 7, mytype_size as 39, and mytype itself as zero. The reason why the structure type name is defined at zero by default is a side effect of allowingmytype.long, mytype.word, mytype.byte and mytype.str. NASM, since it has no intrinsic structure support, does not support any form of period notation to refer to the elements of a structure once you have one (except the above local−label notation), so code suchmov ax,[mystruc.mt_word] is not valid. mt_word is a constant just like any other constant, so the correct syntax is mov ax,[mystruc+mt_word] or mov ax,[mystruc+mytype.word]. Sometimes you only have the address of the structure displaced by an offset. For example, consider 70 In this case, you could access an element by subtracting the offset: 4.11.12 ISTRUC, AT and IEND: Declaring Instances of Structures Having defined a structure type, the next thing you typically want to do is to declare instances of thatISTRUC mechanism. To declare a structure of type mytype in a program, you code something like this: mystruc: AT macro is to make use of the TIMES prefix to advance the assembly position to the correct point for the specified structure field, and then to declare the specified data. Therefore theAT line. For example: at mt_str, db 123,134,145,156,167,178,189 AT line completely, and start the structure field on the next line: 4.11.13 ALIGN and ALIGNB: Data Alignment The ALIGN and ALIGNB macros provides a convenient way to align code or data on a word, longword, paragraph or other boundary. (Some assemblers call this directive EVEN.) The syntax of the ALIGN and ALIGNB macros is align 4 ; align on 4−byte boundary TIMES prefix to their second argument to perform the alignment. 71 If the second argument is not specified, the default for ALIGN is NOP, and the default for ALIGNB is RESB 1. So if the second argument is specified, the two macros are equivalent. Normally, you can just use ALIGN in code and data sections and ALIGNB in BSS sections, and never need the second argument except for special purposes. and ALIGNB, being simple macros, perform no error checking: they cannot warn you if their first argument fails to be a power of two, or if their second argument generates more than one byte of (or ALIGN with a second argument of RESB 1) can be used within structure definitions: struc mytype2 ALIGN and ALIGNB work relative to the beginning of the section, not the beginning of the address space in the final executable. Aligning to a 16−byte boundary when the section you’re in isALIGN or ALIGNB. Both ALIGN and ALIGNB do call SECTALIGN macro implicitly. See section 4.11.14 for details. See also the smartalign standard macro package, section 5.2. 4.11.14 SECTALIGN: Section Alignment The SECTALIGN macros provides a way to modify alignment attribute of output file section. Unlike the align= attribute (which is allowed at section definition only) the SECTALIGN macro may be used at any time. ALIGN (see section 4.11.13) calls the SECTALIGN macro implicitly so the active section alignment requirements may be updated. This is by default behaviour, if for some reason you want the do not call SECTALIGN at all use the directive SECTALIGN OFF 72 Chapter 5: Standard Macro Packages The %use directive (see section 4.6.4) includes one of the standard macro packages included with the NASM distribution and compiled into the NASM binary. It operates like the %include directive (see section 4.6.1), but the included contents is provided by NASM itself. 5.1 altreg: Alternate Register Names The altreg standard macro package provides alternate register names. It provides numeric register names for all registers (not just R8–R15), the Intel−defined aliases R8L–R15L for the low bytes of register (as opposed to the NASM/AMD standard names R8B–R15B), and the names R0H–R3H (by analogy with R0L–R3L) for AH, CH, DH, and BH. Example use: 5.2 smartalign: Smart ALIGN Macro The smartalign standard macro package provides for an ALIGN macro which is more powerful than the default (and backwards−compatible) one (see section 4.11.13). When the smartalign package is enabled, when ALIGN is used without a second argument, NASM will generate a sequence of instructions more efficient than a series of NOP. Furthermore, if the padding exceeds a specific threshold, then NASM will generate a jump over the entire padding sequence.ALIGNMODE macro. This macro takes two parameters: one mode, and an optional jump threshold override. If (for any reason) you neednojmp). The following modes are possible:generic: Works on all x86 CPUs and should have reasonable performance. The default jump threshold is 8. This is the default. • nop: Pad out with NOP instructions. The only difference compared to the standard ALIGN macro is that NASM can still jump over a large padding area. The default jump threshold is 16. • k7: Optimize for the AMD K7 (Athlon/Althon XP). These instructions should still work on all x86 CPUs. The default jump threshold is 16. • k8: Optimize for the AMD K8 (Opteron/Althon 64). These instructions should still work on all x86 CPUs. The default jump threshold is 16. • p6: Optimize for Intel CPUs. This uses the long NOP instructions first introduced in Pentium Pro. This is incompatible with all CPUs of family 5 or lower, as well as some VIA CPUs and several virtualization The macro __ALIGNMODE__ is defined to contain the current alignment mode. A number of other macros beginning with __ALIGN_ are used internally by this macro package. 73 5.3 fp: Floating−point macros This packages contains the following floating−point convenience macros: 5.4 ifunc: Integer functions This package contains a set of macros which implement integer functions. These are actually 5.4.1 Integer logarithms These functions calculate the integer logarithm base 2 of their argument, considered as an unsignedilog2e() (alias ilog2()) generates an error if the argument is not a power of two. The function ilog2f() rounds the argument down to the nearest power of two; if the argument is zero it returns zero.ilog2c() rounds the argument up to the nearest power of two. The functions ilog2fw() (alias ilog2w()) and ilog2cw() generate a warning if the argument is not a power of two, but otherwise behaves like ilog2f() and ilog2c(), respectively. 74 Chapter 6: Assembler Directives NASM, though it attempts to avoid the bureaucracy of assemblers like MASM and TASM, is neverthelessfew directives. These are described in this chapter. NASM’s directives come in two types: user−level directives and primitive directives. Typically, each directive has a user−level form and a primitive form. In almost all cases, we recommend that users useformat−specific directives are documented along with the formats that implement them, in chapter 7. 6.1 BITS: Specifying Target Processor Mode The BITS directive specifies whether NASM should generate code designed to run on a processor operating in 16−bit mode, 32−bit mode or 64−bit mode. The syntax is BITS XX, where XX is 16, 32 or 64. In most cases, you should not need to use BITS explicitly. The aout, coff, elf, macho, win32 and win64 object formats, which are designed for use in 32−bit or 64−bit operating systems, all cause NASM to select 32−bit or 64−bit mode, respectively, by default. The obj object format allows you to specify each segment you define as either USE16 or USE32, and NASM will set its operating mode accordingly, so the use of the BITS directive is once again unnecessary. The most likely reason for using the BITS directive is to write 32−bit or 64−bit code in a flat binary file; this is because the bin output format defaults to 16−bit mode in anticipation of it being used most frequently to write DOS .COM programs, DOS .SYS device drivers and boot loader software. The BITS directive can also be used to generate code for a different mode than the standard one for the output format.not need to specify BITS 32 merely in order to use 32−bit instructions in a 16−bit DOS program; if you do, the assembler will generate incorrect code because it will be writing code targetedBITS 16 mode, instructions which use 32−bit data are prefixed with an 0x66 byte, and those referring to 32−bit addresses have an 0x67 prefix. In BITS 32 mode, the reverse is true: 32−bit instructions require no prefixes, whereas instructions using 16−bit data need an 0x66 and thoseBITS 64 mode, most instructions operate the same as they do for BITS 32 mode. However, there are 8 more general and SSE registers, and 16−bit addressing is no longer supported.REX prefix is used both to select 64−bit operand size, and to access the new registers. NASM automatically insertsREX prefix is used, the processor does not know how to address the AH, BH, CH or DH (high 8−bit legacy) registers. Instead, it is possible to access the the low 8−bits of the SP, BP SI and DIBITS directive has an exactly equivalent primitive form, [BITS 16], [BITS 32] and [BITS 64]. The user−level form is a macro which has no function other than to call the primitive form. Note that the space is neccessary, e.g. BITS32 will not work! 75 6.1.1 USE16 & USE32: Aliases for BITS The ‘USE16’ and ‘USE32’ directives can be used in place of ‘BITS 16’ and ‘BITS 32’, for compatibility with other assemblers. 6.2 DEFAULT: Change the assembler defaults The DEFAULT directive changes the assembler defaults. Normally, NASM defaults to a mode where the programmer is expected to explicitly specify most features directly. However, this is occasionallyDEFAULT can set REL & ABS and BND & NOBND. 6.2.1 REL & ABS: RIP−relative addressing This sets whether registerless instructions in 64−bit mode are RIP–relative or not. By default, they are absolute unless overridden with the REL specifier (see section 3.3). However, if DEFAULT REL is specified, REL is default, unless overridden with the ABS specifier, except when used with an FS or GS segment override. The special handling of FS and GS overrides are due to the fact that these registers are generally used as thread pointers or other special functions in 64−bit mode, and generating RIP–relative addresses would be extremely confusing. is disabled with DEFAULT ABS. 6.2.2 BND & NOBND: BND prefix If DEFAULT BND is set, all bnd−prefix available instructions following this directive are prefixed with bnd. To override it, NOBND prefix can be used. DEFAULT BND can disable DEFAULT BND and then BND prefix will be added only when explicitly specified in code. is expected to be the normal configuration for writing MPX−enabled code. 6.3 SECTION or SEGMENT: Changing and Defining Sections The SECTION directive (SEGMENT is an exactly equivalent synonym) changes which section of the output file the code you write will be assembled into. In some object file formats, the number andSECTION may sometimes give an error message, or may define a new section, if you try to switch to a section thatbin object format (but see section 7.1.3), all support the standardized section names .text, .data and .bss for the code, data and uninitialized−data sections. The obj format, by contrast, does not recognize these section names as being special, and indeed will strip off 6.3.1 The __SECT__ Macro The SECTION directive is unusual in that its user−level form functions differently from its primitive form. The primitive form, [SECTION xyz], simply switches the current target section to the one given. The user−level form, SECTION xyz, however, first defines the single−line macro __SECT__ to be the primitive [SECTION] directive which it is about to issue, and then issues it. So the user−level directive 76 SECTION .text writefile macro defined in section 4.3.3 can be usefully rewritten in the following more sophisticated form:SECTION directive so as not to modify __SECT__. It then declares its string in the data section, and then invokes __SECT__ to switch back to whichever section the user was previously working in. It thus avoids the need, in the previous version of the macro, toJMP instruction to jump over the data, and also does not fail if, in a complicated OBJ format module, the user could potentially be assembling the code in any of several separate code sections. 6.4 ABSOLUTE: Defining Absolute Labels The ABSOLUTE directive can be thought of as an alternative form of SECTION: it causes the subsequent code to be directed at no physical section, but at the hypothetical section starting at theRESB family. ABSOLUTE is used as follows: absolute 0x1A kbuf_chr to be 0x1A, kbuf_free to be 0x1C, and kbuf to be 0x1E. The user−level form of ABSOLUTE, like that of SECTION, redefines the __SECT__ macro when it is invoked. and ENDSTRUC are defined as macros which use ABSOLUTE (and also __SECT__). ABSOLUTE doesn’t have to take an absolute constant as an argument: it can take an expression (actually, a critical expression: see section 3.8) and it can be a value in a segment. For example, a TSR 77 org 100h ; it’s a .COM program 6.5 EXTERN: Importing Symbols from Other Modules EXTERN is similar to the MASM directive EXTRN and the C keyword extern: it is used to declare a symbol which is not defined anywhere in the module being assembled, but is assumed to be defined inbin format cannot. The EXTERN directive takes as many arguments as you like. Each argument is the name of a symbol: extern _printf EXTERN directive. In all cases, the extra features are used by suffixing a colon to the symbol name followed by object−format specific text. For example,obj format allows you to declare that the default segment base of an external should be the group dgroup by means of the directive extern _variable:wrt dgroupEXTERN differs from the user−level form only in that it can take only one argument at a time: the support for multiple arguments is implemented at the preprocessor level.EXTERN more than once: NASM will quietly ignore the second and later redeclarations. GLOBAL and EXTERN, or if it is declared as EXTERN and then defined, it will be treated as GLOBAL. If a variable is declared both as COMMON and EXTERN, it will be treated as COMMON. 6.6 GLOBAL: Exporting Symbols to Other Modules GLOBAL is the other end of EXTERN: if one module declares a symbol as EXTERN and refers to it, then in order to prevent linker errors, some other module must actually define the symbol and declare it as GLOBAL. Some assemblers use the name PUBLIC for this purpose. GLOBAL uses the same syntax as EXTERN, except that it must refer to symbols which are defined in the same module as the GLOBAL directive. For example: global _main 78 GLOBAL, like EXTERN, allows object formats to define private extensions by means of a colon. The elf object format, for example, lets you specify whether global data items are functions or data:EXTERN, the primitive form of GLOBAL differs from the user−level form only in that it can take only one argument at a time. 6.7 COMMON: Defining Common Data Areas The COMMON directive is used to declare common variables. A common variable is much like a global variable declared in the uninitialized data section, so thatmerged, and references to intvar in all modules will point at the same piece of memory.GLOBAL and EXTERN, COMMON supports object−format specific extensions. For example, the obj format allows common variables to be NEAR or FAR, and the elf format allows you to specify the alignment requirements of a common variable:EXTERN and GLOBAL, the primitive form of COMMON differs from the user−level form only in that it can take only one argument at a time. 6.8 STATIC: Local Symbols within Modules Opposite to EXTERN and GLOBAL, STATIC is local symbol, but should be named according to the global mangling rules (named by analogy with the C keyword static as applied to functions or global variables).GLOBAL, STATIC does not allow object formats to accept private extensions mentioned in section 6.6. 6.9 (G|L)PREFIX, (G|L)POSTFIX: Mangling Symbols PREFIX, GPREFIX, LPREFIX, POSTFIX, GPOSTFIX, and LPOSTFIX directives can prepend or append the given argument to a certain type of symbols. The directive should be as a preprocessPREFIX|GPREFIX: Prepend the argument to all EXTERN COMMON, STATIC, and GLOBAL symbols • LPREFIX: Prepend the argument to all other symbols such as Local Labels, and backend defined symbols • POSTFIX|GPOSTFIX: Append the argument to all EXTERN COMMON, STATIC, and GLOBAL symbols 79 • LPOSTFIX: Append the argument to all other symbols such as Local Labels, and backend defined symbols This is a macro implemented as a %pragma: %pragma macho lprefix L_ subsections_via_symbols directive (section 7.8.4) is declared, each symbol is the start of a separate block. The meta section is, then, defined to includeLPREFIX is useful here to mark all local symbols with the ’L’ prefix to be excluded to the meta section. It converts local symbols compatible with the particularSTATIC (section 6.8) are excluded from the symbol mangling and also not marked as global. 6.10 OUTPUT, DEBUG: Generic Namespaces OUTPUT and DEBUG are generic %pragma namespaces that are supposed to redirect to the current output and debug formats. For example, when mangling local symbols via the generic namespace:elf: %pragma elf gprefix _ 6.11 CPU: Defining CPU Dependencies The CPU directive restricts assembly to those instructions which are available on the specified CPU. Options are:CPU 8086 Assemble only 8086 instruction set • CPU 186 Assemble instructions up to the 80186 instruction set • CPU 286 Assemble instructions up to the 286 instruction set • CPU 386 Assemble instructions up to the 386 instruction set • CPU 486 486 instruction set • CPU 586 Pentium instruction set • CPU PENTIUM Same as 586 • CPU 686 P6 instruction set • CPU PPRO Same as 686 • CPU P2 Same as 686 • CPU P3 Pentium III (Katmai) instruction sets • CPU KATMAI Same as P3 • CPU P4 Pentium 4 (Willamette) instruction set • CPU WILLAMETTE Same as P4 • CPU PRESCOTT Prescott instruction set 80 • CPU X64 x86−64 (x64/AMD64/Intel 64) instruction set • CPU IA64 IA64 CPU (in x86 mode) instruction set All options are case insensitive. All instructions will be selected only if they apply to the selected CPU or 6.12 FLOAT: Handling of floating−point constants By default, floating−point constants are rounded to nearest, and IEEE denormals are supported. TheFLOAT DAZ Flush denormals to zero • FLOAT NODAZ Do not flush denormals to zero (default) • FLOAT NEAR Round to nearest (default) • FLOAT UP Round up (toward +Infinity) • FLOAT DOWN Round down (toward –Infinity) • FLOAT ZERO Round toward zero • FLOAT DEFAULT Restore default settings The standard macros __FLOAT_DAZ__, __FLOAT_ROUND__, and __FLOAT__ contain the current state, as long as the programmer has avoided the use of the brackeded primitive form, ([FLOAT]). __FLOAT__ contains the full set of floating−point settings; this value can be saved away and invoked later to restore the setting. 6.13 [WARNING]: Enable or disable warnings The [WARNING] directive can be used to enable or disable classes of warnings in the same way as the −w option, see section 2.1.25 for more details about warning classes. • [warning +warning−class] enables warnings for warning−class. • [warning −warning−class] disables warnings for warning−class. • [warning *warning−class] restores warning−class to the original value, either the default value or as specified on the command line. The [WARNING] directive also accepts the all, error and error=warning−class specifiers. No \"user form\" (without the brackets) currently exists. 81 82 Chapter 7: Output Formats NASM is a portable assembler, designed to be able to compile on any ANSI C−supporting platform and−f option on the NASM command line. Each of these formats, along with its extensions to the base NASM syntax, is detailed in this chapter. .asm, .s, or whatever you like to use) from the input file name, and substituting an extension defined by the output 7.1 bin: Flat−Form Binary Output The bin format does not produce object files: it generates nothing in the output file except the code you wrote. Such ‘pure binary’ files are used by MS−DOS: .COM executables and .SYS device drivers are pure binary files. Pure binary output is also useful for operating system and boot loader development.bin format supports multiple section names. For details of how NASM handles sections in the bin format, see section 7.1.3.bin format puts NASM by default into 16−bit mode (see section 6.1). In order to use bin to write 32−bit or 64−bit code, such as an OS kernel, you need to explicitly issue the BITS 32 or BITS 64 directive. bin has no default output file name extension: instead, it leaves your file name as it is once the original extension has been removed. Thus, the default is for NASM to assemble binprog.asm into a binary file called binprog. 7.1.1 ORG: Binary File Program Origin The bin format provides an additional directive to the list given in chapter 6: ORG. The function of the ORG directive is to specify the origin address which NASM will assume the program begins at when it is loaded into memory. 0x00000104: org 0x100 ORG directive provided by MASM−compatible assemblers, which allows you to jump around in the object file and overwrite code you have already generated, NASM’s ORG does exactly what the directive says: origin. Its sole function is to specify one offset which is added to all internal address references within the section; it does not permit any of the trickery that MASM’s version does. See 7.1.2 bin Extensions to the SECTION Directive The bin output format extends the SECTION (or SEGMENT) directive to allow you to specify the alignment requirements of segments. This is done by appending the ALIGN qualifier to the end of the section−definition line. For example,.data and also specifies that it must be aligned on a 16−byte boundary. The parameter to ALIGN specifies how many low bits of the section start address must be forced to zero. The alignment value given may be any power of two. 83 7.1.3 Multisection Support for the bin Format The bin format allows the use of multiple sections, of arbitrary names, besides the \"known\" .text, .data, and .bss names. • Sections may be designated progbits or nobits. Default is progbits (except .bss, which defaults to nobits, of course). • Sections can be aligned at a specified boundary following the previous section with align=, or at an arbitrary byte−granular position with start=. • Sections can be given a virtual start address, which will be used for the calculation of all memoryvstart=. • Sections can be ordered using follows=<section> or vfollows=<section> as an alternative to specifying an explicit start address. • Arguments to org, start, vstart, and align= are critical expressions. See section 3.8. E.g. align=(1 << ALIGN_SHIFT) – ALIGN_SHIFT must be defined before it is used here. • Any code which comes before an explicit SECTION directive is directed by default into the .text section. • If an ORG statement is not given, ORG 0 is used by default. • The .bss section will be placed after the last progbits section, unless start=, vstart=, follows=, or vfollows= has been specified. • All sections are aligned on dword boundaries, unless a different alignment has been specified. • Sections may not overlap.NASM creates the section.<secname>.start for each section, which may be used in your code. 7.1.4 Map Files Map files can be generated in −f bin format by means of the [map] option. Map types of all (default), brief, sections, segments, or symbols may be specified. Output may be directed to stdout (default), stderr, or a specified file. E.g. [map symbols myfile.map]. No \"user form\" exists, the square brackets must be used. 7.2 ith: Intel Hex Output The ith file format produces Intel hex−format files. Just as the bin format, this is a flat memory image format with no support for relocation or linking. It is usually used with ROM programmers and similarbin file format is also supported by the ith file format. ith provides a default output file−name extension of .ith. 7.3 srec: Motorola S−Records Output The srec file format produces Motorola S−records files. Just as the bin format, this is a flat memory image format with no support for relocation or linking. It is usually used with ROM programmers andbin file format is also supported by the srec file format. srec provides a default output file−name extension of .srec. 84 7.4 obj: Microsoft OMF Object Files The obj file format (NASM calls it obj rather than omf for historical reasons) is the one produced by MASM and TASM, which is typically fed to 16−bit DOS linkers to produce .EXE files. It is also the format used by OS/2. provides a default output file−name extension of .obj. obj is not exclusively a 16−bit format, though: NASM has full support for the 32−bit extensions to the format. In particular, 32−bit obj format files are used by Borland’s Win32 compilers, instead of using Microsoft’s newer win32 object file format. The obj format does not define any special segment names: you can call your segments anything you like. Typical names for segments in obj format files are CODE, DATA and BSS. If your source file contains code before specifying an explicit SEGMENT directive, then NASM will invent its own segment called __NASMDEFSEG for you. When you define a segment in an obj file, NASM defines the segment name as a symbol as well, so that you can access the segment address of the segment. So, for example:obj format also enables the use of the SEG and WRT operators, so that you can write code which does things like 7.4.1 obj Extensions to the SEGMENT Directive The obj output format extends the SEGMENT (or SECTION) directive to allow you to specify various properties of the segment you are defining. This is done by appending extra qualifiers to the end of thecode, but also declares it to be a private segment, and requires that the portion of it described in this code module must be aligned on a 16−byte boundary.PRIVATE, PUBLIC, COMMON and STACK specify the combination characteristics of the segment. PRIVATE segments do not get combined with any others by the linker; PUBLIC and STACK 85 segments get concatenated together at link time; and COMMON segments all get overlaid on top of each other rather than stuck end−to−end. • ALIGN is used, as shown above, to specify how many low bits of the segment start address must be forced to zero. The alignment value given may be any power of two from 1 to 4096; in reality, the • CLASS can be used to specify the segment class; this feature indicates to the linker that segments of the same class should be placed near each other in the output file. The class name can be any word,CLASS=CODE. • OVERLAY, like CLASS, is specified with an arbitrary word as an argument, and provides overlay information to an overlay−capable linker. • Segments can be declared as USE16 or USE32, which has the effect of recording the choice in the object file and also ensuring that NASM’s default assembly mode when assembling in that segment • When writing OS/2 object files, you should declare 32−bit segments as FLAT, which causes the default segment base for anything in the segment to be the special group FLAT, and also defines the group if it is not already defined. • The obj file format also allows segments to be declared as having a pre−defined absolute segment address, although no linkers are currently known to make sensible use of this feature; nevertheless,SEGMENT SCREEN ABSOLUTE=0xB800 if you need to. The ABSOLUTE and ALIGN keywords are mutually exclusive. NASM’s default segment attributes are PUBLIC, ALIGN=1, no class, no overlay, and USE16. 7.4.2 GROUP: Defining Groups of Segments The obj format also allows segments to be grouped, so that a single segment register can be used to refer to all the segments in a group. NASM therefore supplies the GROUP directive, whereby you can code dgroup to contain the segments data and bss. Like SEGMENT, GROUP causes the group name to be defined as a symbol, so that you can refer to a variable var in the data segment as var wrt data or as var wrt dgroup, depending on which segment value is currently in your segment register.var, however, and var is declared in a segment which is part of a group, then NASM will default to giving you the offset of var from the beginning of the group, not the segment. Therefore SEG var, also, will return the group base rather than the segment base. NASM will allow a segment to be part of more than one group, but will generate a warning if you do this. 86 A group does not have to contain any segments; you can still make WRT references to a group which does not contain the variable you are referring to. OS/2, for example, defines the special group FLAT with no segments in it. 7.4.3 UPPERCASE: Disabling Case Sensitivity in Output Although NASM itself is case sensitive, some OMF linkers are not; therefore it can be useful for NASM toUPPERCASE format−specific directive causes all segment, group and symbol names that are written to the object file to be forced to upper case just before being is used alone on a line; it requires no parameters. 7.4.4 IMPORT: Importing DLL Symbols The IMPORT format−specific directive defines a symbol to be imported from a DLL, for use if you are writing a DLL’s import library in NASM. You still need to declare the symbol as EXTERN as well as using the IMPORT directive. The IMPORT directive takes two required parameters, separated by white space, which are (respectively) the name of the symbol you wish to import and the name of the library you wish to 7.4.5 EXPORT: Exporting DLL Symbols The EXPORT format−specific directive defines a global symbol to be exported as a DLL symbol, for use if you are writing a DLL in NASM. You still need to declare the symbol as GLOBAL as well as using the EXPORT directive. EXPORT takes one required parameter, which is the name of the symbol you wish to export, as it was defined in your source file. An optional second parameter (separated by white space from the first)external name of the symbol: the name by which you wish the symbol to be known to programs using the DLL. If this name is the same as the internal name, you may leave the secondresident indicates that the exported name is to be kept resident by the system loader. This is an optimisation for frequently used symbols imported by name. • nodata indicates that the exported symbol is a function which does not make use of any initialized data. • parm=NNN, where NNN is an integer, sets the number of parameter words for the case in which the symbol is a call gate between 32−bit and 16−bit segments. • An attribute which is just a number indicates that the symbol should be exported with an identifying For example: 87 export myfunc 7.4.6 ..start: Defining the Program Entry Point OMF linkers require exactly one of the object files being linked to define the program entry point, where execution will begin when the program is run. If the object file that defines the entry point is assembled..start at the point where you wish execution to begin. 7.4.7 obj Extensions to the EXTERN Directive If you declare an external symbol with the directivemov ax,foo will give you the offset of foo from its preferred segment base (as specified in whichever module foo is actually defined in). So to access the contents of foo you will usually need to do something likedgroup. So if DS already contained dgroup, you could simply code mov ax,[foo wrt dgroup] foo can be a pain; so NASM allows you to declare foo in the alternative form extern foo:wrt dgroup foo is in fact dgroup; so the expression seg foo will now return dgroup, and the expression foo is equivalent to foo wrt dgroup. This default−WRT mechanism can be used to make externals appear to be relative to any group or segment in your program. It can also be applied to common variables: see section 7.4.8. 7.4.8 obj Extensions to the COMMON Directive The obj format allows common variables to be either near or far; NASM allows you to specify which your variables should be by the use of the syntaxelements of a given size. So a 10−byte far common variable could be declared as ten one−byte elements, five two−byte elements, two five−byte elements or one ten−byte element.OMF linkers require the element size, as well as the variable size, to match when resolving common variables declared in more than one module. Therefore NASM must allow you to specify the 88 If no element size is specified, the default is 1. Also, the FAR keyword is not required when an element size is specified, since only far commons may have element sizes at all. So the above declarations couldCOMMON directive in obj also supports default−WRT specification like EXTERN does (explained in section 7.4.7). So you can also declare things like common foo 10:wrt dgroup 7.4.9 Embedded File Dependency Information Since NASM 2.13.02, obj files contain embedded dependency file information. To suppress the generation of dependencies, use 7.5 win32: Microsoft Win32 Object Files The win32 output format generates Microsoft Win32 object files, suitable for passing to Microsoft linkers such as Visual C++. Note that Borland Win32 compilers do not use this format, but use obj instead (see section 7.4). provides a default output file−name extension of .obj. Note that although Microsoft say that Win32 object files follow the COFF (Common Object File Format) standard, the object files produced by Microsoft Win32 compilers are not compatible with COFF linkerscoff output format; conversely, the coff format does not produce object files that Win32 linkers can generate correct output from. 7.5.1 win32 Extensions to the SECTION Directive Like the obj format, win32 allows you to specify additional information on the SECTION directive line, to control the type and properties of sections you declare. Section types and properties are.text, .data and .bss, but may still be overridden by these qualifiers.code, or equivalently text, defines the section to be a code section. This marks the section as readable and executable, but not writable, and also indicates to the linker that the type of the • data and bss define the section to be a data section, analogously to code. Data sections are marked as readable and writable, but not executable. data declares an initialized data section, whereas bss declares an uninitialized data section. • rdata declares an initialized data section that is readable but not writable. Microsoft compilers use this section to place constants in it. • info defines the section to be an informational section, which is not included in the executable file by the linker, but may (for example) pass information to the linker. For example, declaring an info–type section called .drectve causes the linker to interpret the contents of the section as command−line options. 89 • align=, used with a trailing number as in obj, gives the alignment requirements of the section. The maximum you may specify is 64: the Win32 object file format contains no means to request a The defaults assumed by NASM if you do not specify the above qualifiers are:.text. 7.5.2 win32: Safe Structured Exception Handling Among other improvements in Windows XP SP2 and Windows Server 2003 Microsoft has introduced/safeseh command line option. Without regard to this run−time check merits it’s natural to expect NASM to be capable of generating/safeseh linking. From developer’s viewpoint the problem is two−fold: • how to adapt modules not deploying exception handlers of their own; • how to adapt/develop modules utilizing custom exception handling;safeseh, which instructs the assembler to produce appropriately formatted input data for above mentioned \"safe exception handler table.\" Its typical use would be: 90 ret location at run−time, something linker has no power over, run−time that is. It should be explicitly mentioned that such failure to register handler’s entry point with safeseh directive has undesired side effect at run−time. If exception is raised and unregistered handler is to be executed, the@feat.00 symbol and input data for \"safe exception handler table\" causes no backward incompatibilities and \"safeseh\" modules generated by NASM 2.03 and later can still be linked by earlier 7.5.3 Debugging formats for Windows The win32 and win64 formats support the Microsoft CodeView debugging format. Currently CodeView version 8 format is supported (cv8), but newer versions of the CodeView debugger should be able to handle this format as well. 7.6 win64: Microsoft Win64 Object Files The win64 output format generates Microsoft Win64 object files, which is nearly 100% identical to the win32 object format (section 7.5) with the exception that it is meant to target 64−bit code and the x86−64 platform altogether. This object file is used exactly the same as the win32 object format (section 7.5), in NASM, with regard to this exception. 7.6.1 win64: Writing Position−Independent Code While REL takes good care of RIP−relative addressing, there is one aspect that is easy to overlook for a Win64 programmer: indirect references. Consider a switch dispatch table: 91 ’ADDR32’ relocation to ’.text’ invalid without /LARGEADDRESSAWARE:NOlea is encoded relative to instruction pointer, or in perfectly position−independent manner. But this is only part of the problem! Trouble iscaseN relocations will make their way to the final module and might have to be adjusted at .dll load time. To be specific when it can’t be loaded at preferred address. And when thiswrt ..imagebase operator, which returns offset from base address of the current image, be it .exe or .dll module, therefore the name. ForIMAGE_DOS_HEADER structure. Here is how to implement switch with these image−relative references: will become apparent in next paragraph. It should be noted that wrt ..imagebase is defined as 32−bit operand only: dd label wrt ..imagebase ; ok 7.6.2 win64: Structured Exception Handling Structured exception handing in Win64 is completely different matter from Win32. Upon exceptionUNWIND_INFO structure is identified. If it’s not found, then offending subroutine is assumed to be \"leaf\" and just mentioned lookup procedure is attempted for its caller. In Win64 leafnor modifies any Win64 non−volatile registers, including stack pointer. The latter ensures that it’s possible to identify leaf function’s caller by 92 While majority of subroutines written in assembler are not calling any other function, requirement forUNWIND_INFO structure is associated with such \"leaf\" function, the stack unwind procedure will expect to find caller’s return address on the top ofUNWIND_INFO structure, let’s discuss what’s in it and/or how it’s processed. First of all it is checked for presence of reference to custom language−specificor rest of UNWIND_INFO structure is processed as following. Beside optional reference to custom handler, it carries information about current callee’sUNWIND_INFO structure is associated, this time, with caller’s instruction pointer, which is then checked for presence of reference 93 section .pdata rdata align=4 .pdata section is element of the \"table comprising start and end addresses of function\" along with reference to associated UNWIND_INFO structure. And what you see in .xdata section is UNWIND_INFO structure describing function with no frame, but with designated exception handler. References are required to be image−relative (which is the real reason for implementing wrt ..imagebase operator). It should be noted that rdata align=n, as well as wrt ..imagebase, are optional in these two segments’ contexts, i.e. can be omitted. Latter means that all 32−bit references, not only above listed required ones, placed into these two segments turn out image−relative. Why is it important to understand? Developer is allowed to append handler−specificUNWIND_INFO structure, and if [s]he adds a 32−bit reference, then [s]he will have to remember to adjust its value to obtain the real pointer. nor modifies any non−volatile register, including stack pointer. But it’s not uncommon that assembler structure, which would surely be considered error−prone? Yes, there is. Recall that exception handler is called first, before stack layout is analyzed. As it turned out, it’s perfectly possiblemagic_point original rsp value remains in chosen volatile register and no non−volatile register, except for rsp, is modified. While past magic_point rsp remains constant till the very end of the function. In this case custom language−specific exception handler would look like this: 94 EXCEPTION_DISPOSITION handler (EXCEPTION_RECORD *rec,ULONG64 frame, UNWIND_INFO structure does not have to contain any information about stack frame and its layout. 7.7 coff: Common Object File Format The coff output type produces COFF object files suitable for linking with the DJGPP linker. coff provides a default output file−name extension of .o. The coff format supports the same extensions to the SECTION directive as win32 does, except that the align qualifier and the info section type are not supported. 7.8 macho32 and macho64: Mach Object File Format The macho32 and macho64 output formts produces Mach−O object files suitable for linking with the MacOS X linker. macho is a synonym for macho32. macho provides a default output file−name extension of .o. 7.8.1 macho extensions to the SECTION Directive The macho output format specifies section names in the format \"segment,section\". No spaces are allowed around the comma. The following flags can also be specified:data – this section contains initialized data items • code – this section contains code exclusively • mixed – this section contains both code and data • bss – this section is uninitialized and filled with zero • zerofill – same as bss • no_dead_strip – inhibit dead code stripping for this section • live_support – set the live support flag for this section • strip_static_syms – strip static symbols for this section • debug – this section contains debugging information • align=alignment – specify section alignment 95 The default is data, unless the section name is __text or __bss in which case the default is text or bss, respectively. For compatibility with other Unix platforms, the following standard names are also supported:.rodata section contains no relocations, it is instead put into the __TEXT,__const section unless this section has already been specified explicitly. However, it is probably better to specify and __DATA,__const explicitly as appropriate. 7.8.2 Thread Local Storage in Mach−O: macho special symbols and WRT Mach−O defines the following special symbols that can be used on the right−hand side of the WRT operator:..tlvp is used to specify access to thread−local storage. • ..gotpcrel is used to specify references to the Global Offset Table. The GOT is supported in the macho64 format only. 7.8.3 macho specfic directive subsections_via_symbols The directive subsections_via_symbols sets the MH_SUBSECTIONS_VIA_SYMBOLS flag in the Mach−O header, that effectively separates a block (or a subsection) based on a symbol. It is often used%pragma. It can also be specified in its %pragma form, in which case it will not affect non−Mach−O builds of the same source code: 7.8.4 macho specfic directive no_dead_strip The directive no_dead_strip sets the Mach−O SH_NO_DEAD_STRIP section flag on the section containing a a specific symbol. This directive takes a list of symbols as its arguments.%pragma. It can also be specified in its %pragma form, in which case it will not affect non−Mach−O builds of the same source code: 7.8.5 macho specific extensions to the GLOBAL Directive: private_extern The directive extension to GLOBAL marks the symbol with limited global scope. For example, you can specify the global symbol with this extension: can avoid it. 96 7.9 elf32, elf64, elfx32: Executable and Linkable Format Object Files The elf32, elf64 and elfx32 output formats generate ELF32 and ELF64 (Executable and Linkable Format) object files, as used by Linux as well as Unix System V, including Solaris x86, UnixWareelf provides a default output file−name extension of .o. elf is a synonym for elf32. The elfx32 format is used for the x32 ABI, which is a 32−bit ABI with the CPU in 64−bit mode. 7.9.1 ELF specific directive osabi The ELF header specifies the application binary interface for the target operating system (OSABI). Thisosabi directive with the numeric value (0−255) of the target system. If this directive is not used, the default value will be \"UNIX System V ABI\" (0) which will work on most systems 7.9.2 elf extensions to the SECTION Directive Like the obj format, elf allows you to specify additional information on the SECTION directive line, to control the type and properties of sections you declare. Section types and properties are generatedalloc defines the section to be one which is loaded into memory when the program is run. noalloc defines it to be one which is not, such as an informational or comment section. • exec defines the section to be one which should have execute permission when the program is run. noexec defines it as one which should not. • write defines the section to be one which should be writable when the program is run. nowrite defines it as one which should not. • progbits defines the section to be one with explicit contents stored in the object file: an ordinary code or data section, for example, nobits defines the section to be one with no explicit contents given, such as a BSS section. • align=, used with a trailing number as in obj, gives the alignment requirements of the section. • tls defines the section to be one which contains thread local variables. The defaults assumed by NASM if you do not specify the above qualifiers are: other in the above table. Please note that section names are case sensitive.) 97 7.9.3 Position−Independent Code: macho Special Symbols and WRT Since ELF does not support segment−base references, the WRT operator is not used for its normal purpose; therefore NASM’s elf output format makes use of WRT for a different purpose, namely the PIC−specific relocation types. defines five special symbols which you can use as the right−hand side of the WRT operator to obtain PIC relocation types. They are ..gotpc, ..gotoff, ..got, ..plt and ..sym. Their functions are summarized here:Referring to the symbol marking the global offset table base using wrt ..gotpc will end up giving the distance from the beginning of the current section to the global offset table._GLOBAL_OFFSET_TABLE_ is the standard symbol name used to refer to the GOT.) So you would then need to add $$ to the result to get the real address of the GOT. • Referring to a location in one of your own sections using wrt ..gotoff will give the distance from the beginning of the GOT to the specified location, so that adding on the address of the GOT would • Referring to an external or global symbol using wrt ..got causes the linker to build an entry in the GOT containing the address of the symbol, and the reference gives the distance from the beginning • Referring to a procedure name using wrt ..plt causes the linker to build a procedure linkage table entry for the symbol, and the reference gives the address of the PLT entry. You can only use or JMP), since ELF contains no relocation type to refer to PLT entries absolutely. • Referring to a symbol name using wrt ..sym causes NASM to write an ordinary relocation, but instead of making the relocation relative to the start of the section and then adding on the offset to A fuller explanation of how to use these relocation types to write shared libraries entirely in NASM is 7.9.4 Thread Local Storage in ELF: elf Special Symbols and WRT • In ELF32 mode, referring to an external or global symbol using wrt ..tlsie causes the linker to build an entry in the GOT containing the offset of the symbol within the TLS block, so you can access the value of the symbol with code such as: mov eax,[tid wrt ..tlsie] In ELF64 or ELFx32 mode, referring to an external or global symbol using wrt ..gottpoff causes the linker to build an entry in the GOT containing the offset of the symbol within the TLS block, so you can access the value of the symbol with code such as: mov rax,[rel tid wrt ..gottpoff] 7.9.5 elf Extensions to the GLOBAL Directive ELF object files can contain more information about a global symbol than just its address: they can contain the size of the symbol and its type as well. These are not merely debugger conveniences, butGLOBAL directive, allowing you to specify these features. 98 You can specify whether a global variable is a function or a data object by suffixing the name with afunction or data. (object is a synonym for data.) For example: global hashlookup:function, hashtable:datahashlookup as a function and hashtable as a data object. Optionally, you can control the ELF visibility of the symbol. Just add one of the visibility keywords:, internal, hidden, or protected. The default is default of course. For example, to make hashlookup hidden: global hashlookup:function hidden symbol table. Declaring the type and size of global symbols is necessary when writing shared library code. For more 7.9.6 elf Extensions to the COMMON Directive ELF also allows you to specify alignment requirements on common variables. This is done by putting a number (which must be a power of two) after the name and size of the common variable, separated (as 7.9.7 16−bit code and ELF The ELF32 specification doesn’t provide relocations for 8− and 16−bit values, but the GNU ld linker adds these as an extension. NASM can generate GNU−compatible relocations, to allow 16−bit code told. If NASM is used with the −w+gnu−elf−extensions option, a warning is issued when one of these relocations is generated. 7.9.8 Debug formats and ELF ELF provides debug information in STABS and DWARF formats. Line number information is generated for all executable sections, but please note that only the \".text\" section is executable by default. 7.10 aout: Linux a.out Object Files The aout format generates a.out object files, in the form used by early Linux systems (current Linux systems use ELF, see section 7.9.) These differ from other a.out object files in that the magic number in the first four bytes of the file is different; also, some implementations of a.out, for example NetBSD’s, support position−independent code, which Linux’s implementation does not. provides a default output file−name extension of .o. a.out is a very simple object format. It supports no special directives, no special symbols, no use of SEG or WRT, and no extensions to any standard directives. It supports only the three standard section names .text, .data and .bss. 99 7.11 aoutb: NetBSD/FreeBSD/OpenBSD a.out Object Files The aoutb format generates a.out object files, in the form used by the various free BSD Unix clones, NetBSD, FreeBSD and OpenBSD. For simple object files, this object format is exactly the same as aout except for the magic number in the first four bytes of the file. However, the aoutb format supports position−independent code in the same way as the elf format, so you can use it to write BSD shared libraries. aoutb provides a default output file−name extension of .o. aoutb supports no special directives, no special symbols, and only the three standard section names .text, .data and .bss. However, it also supports the same use of WRT as elf does, to provide position−independent code relocation types. See section 7.9.3 for full documentation of this feature. also supports the same extensions to the GLOBAL directive as elf does: see section 7.9.5 for documentation of this. 7.12 as86: Minix/Linux as86 Object Files The Minix/Linux 16−bit assembler as86 has its own non−standard object file format. Although its companion linker ld86 produces something close to ordinary a.out binaries as output, the object file format used to communicate between as86 and ld86 is not itself a.out. NASM supports this format, just in case it is useful, as as86. as86 provides a default output file−name extension of .o. as86 is a very simple object format (from the NASM user’s point of view). It supports no special directives, no use of SEG or WRT, and no extensions to any standard directives. It supports only the three standard section names .text, .data and .bss. The only special symbol supported is ..start. 7.13 rdf: Relocatable Dynamic Object File Format The rdf output format produces RDOFF object files. RDOFF (Relocatable Dynamic Object File Format) is a home−grown object−file format, designed alongside NASM itself and reflecting in its file format the is not used by any well−known operating systems. Those writing their own systems, however, may well wish to use RDOFF as their object format, on the grounds that it is designed primarily for simplicity and contains very little file−header bureaucracy. rdoff subdirectory holding a set of RDOFF utilities: an RDF linker, an RDF static−library manager, an RDF file dump utility, and a program which will load and execute an RDF executable under Linux. supports only the standard section names .text, .data and .bss. 7.13.1 Requiring a Library: The LIBRARY Directive RDOFF contains a mechanism for an object file to demand a given library to be linked to the module, either at load time or run time. This is done by the LIBRARY directive, which takes one argument which is the name of the module: 7.13.2 Specifying a Module Name: The MODULE Directive Special RDOFF header record is used to store the name of the module. It can be used, for example, by run−time loader to perform dynamic linking. MODULE directive takes one argument which is the name of current module: 100 module mymodname $, like: module $kernel.core 7.13.3 rdf Extensions to the GLOBAL Directive RDOFF global symbols can contain additional information needed by the static linker. You can mark a global symbol as exported, thus telling the linker do not strip it from target executable or library file.ELF, you can also specify whether an exported symbol is a procedure (function) or data object. Suffixing the name with a colon and the word export you make the symbol exported: global sys_open:export proc or function after declaration: data or object to the directive: global kernel_ticks:export data 7.13.4 rdf Extensions to the EXTERN Directive By default the EXTERN directive in RDOFF declares a \"pure external\" symbol (i.e. the static linker will complain if such a symbol is not resolved). To declare an \"imported\" symbol, which must be resolvedRDOFF offers an additional import modifier. As in GLOBAL, you can also specify whether an imported symbol is a procedure (function) or data object. For example:LIBRARY is also included, which gives the dynamic linker a hint as to where to find requested symbols. 7.14 dbg: Debugging Format The dbg format does not output an object file as such; instead, it outputs a text file which contains a complete list of all the transactions between the main body of NASM and the output−format back enddbg format like this: nasm −f dbg filename.asm filename.dbg. However, this will not work well on files which were designed for a different object format, because each object format defines its own macrosdbg format. Therefore it can be useful to run NASM twice, in order to do the preprocessing with the native object 101 This preprocesses rdfprog.asm into rdfprog.i, keeping the rdf object format selected in order to make sure RDF special directives are converted into primitive form correctly. Then the preprocesseddbg format to generate the final diagnostic output. This workaround will still typically not work for programs intended for obj format, because the obj SEGMENT and GROUP directives have side effects of defining the segment and group names as symbols; dbg will not do this, so the program will not assemble. You will have to work around that by defining the symbols yourself (using EXTERN, for example) if you really need to get a dbg trace of an obj–specific source file. dbg accepts any section name and any directives at all, and logs them all to its output file. dbg accepts and logs any %pragma, but the specific %pragma: %pragma dbg maxdump <size><size> is either a number or unlimited, can be used to control the maximum size for dumping the full contents of a rawdata output object. 102 Chapter 8: Writing 16−bit Code (DOS, Windows 3/3.1) This chapter attempts to cover some of the common issues encountered when writing 16−bit code toMS−DOS or Windows 3.x. It covers how to link programs to produce .EXE or .COM files, how to write .SYS device drivers, and how to interface assembly language code with 16−bit C compilers and with Borland Pascal. 8.1 Producing .EXE Files Any large program written under DOS needs to be built as a .EXE file: only .EXE files have the necessary internal structure required to span more than one 64K segment. Windows programs, also,.EXE files, since Windows does not support the .COM format. In general, you generate .EXE files by using the obj output format to produce one or more .OBJ files, and then linking them together using a linker. However, NASM also supports the direct generation of.EXE files using the bin output format (by using DB and DW to construct the .EXE file header), and a macro package is supplied to do this. Thanks to Yann Guidon for contributing the code.EXE natively as another output format in future releases. 8.1.1 Using the obj Format To Generate .EXE Files This section describes the usual method of generating .EXE files by linking .OBJ files together. Most 16−bit programming language packages come with a suitable linker; if you have none of these,LZH archive format from x2ftp.oulu.fi. An LZH archiver can be found at ftp.simtel.net. There is another ‘free’ linker (though this one doesn’t come with sources) called FREELINK, available from www.pcorner.com. A third, djlink, written by DJ Delorie, is available at www.delorie.com. A fourth linker, ALINK, written by Anthony A.J. Williams, is available at alink.sourceforge.net. When linking several .OBJ files into a .EXE file, you should ensure that exactly one of them has a start point defined (using the ..start special symbol defined by the obj format: see section 7.4.6). If no module defines a start point, the linker will not know what value to give the entry−point field in thewhich value to use. An example of a NASM source file which can be assembled to a .OBJ file and linked on its own to a .EXE is given here. It demonstrates the basic principles of defining a stack, initialising the segment registers, and declaring a start point. This file is also provided in the test subdirectory of the NASM archives, under the name objexe.asm. segment code DS to point to the data segment, and initializes SS and SP to point to the top of the provided stack. Notice that interrupts are implicitly disabled for one instruction after aSS, precisely for this situation, so that there’s no chance of an interrupt occurring between the loads of SS and SP and not having a stack to execute on. 103 Note also that the special symbol ..start is defined at the beginning of this code, which means that will be the entry point into the resulting executable file.DS:DX with a pointer to the greeting message (hello is implicitly relative to the segment data, which was loaded into DS in the setup code, so the full pointer is valid), and call the DOS print−string function. at the top of it. The directive segment stack stack defines a segment called stack, and also of type STACK. The latter is not necessary to the correct running of the program, but linkers are likely to issue warnings or errors if your program has no segment of type STACK. The above file, when assembled into a .OBJ file, will link on its own to a valid .EXE file, which when run will print ‘hello, world’ and then exit. 8.1.2 Using the bin Format To Generate .EXE Files The .EXE file format is simple enough that it’s possible to build a .EXE file by writing a pure−binary program and sticking a 32−byte header on the front. This header is simple enough that it can beDB and DW commands by NASM itself, so that you can use the bin output format to directly generate .EXE files. Included in the NASM archives, in the misc subdirectory, is a file exebin.mac of macros. It defines three macros: EXE_begin, EXE_stack and EXE_end. To produce a .EXE file using this method, you should start by using %include to load the exebin.mac macro package into your source file. You should then issue the EXE_begin macro call (which takes no arguments) to generate the file header data. Then write code as normal for the bin format – you can use all three standard sections .text, .data and .bss. At the end of the file you should call the EXE_end macro (again, no arguments), which defines some symbols to mark section sizes, and these symbols are referred to in the header code generated by EXE_begin. In this model, the code you end up writing starts at 0x100, just like a .COM file – in fact, if you strip off the 32−byte header from the resulting .EXE file, you will have a valid .COM program. All the segment bases are the same, so you are limited to a 64K program, again just like a .COM file. Note that an ORG directive is issued by the EXE_begin macro, so you should not explicitly issue one of your own. You can’t directly refer to your segment base value, unfortunately, since this would require a relocationCS instead. 104 On entry to your .EXE file, SS:SP are already set up to point to the top of a 2Kb stack. You can adjust the default stack size of 2Kb by calling the EXE_stack macro. For example, to change the stack size of your program to 64 bytes, you would call EXE_stack 64. A sample program which generates a .EXE file in this way is given in the test subdirectory of the NASM archive, as binexe.asm. 8.2 Producing .COM Files While large DOS programs must be written as .EXE files, small ones are often better written as .COM files. .COM files are pure binary, and therefore most easily produced using the bin output format. 8.2.1 Using the bin Format To Generate .COM Files .COM files expect to be loaded at offset 100h into their segment (though the segment may change). Execution then begins at 100h, i.e. right at the start of the program. So to write a .COM program, you would create a source file looking likebin format puts the .text section first in the file, so you can declare data or BSS items before beginning to write code if you want to and the code will still end up at the front of the file where it.COM file itself: instead, addresses of BSS items are resolved to point at space beyond the end of the file, on the grounds that this will be freebin format would produce a file called myprog if no explicit output file name were specified, so you have to override it and give the desired file name. 8.2.2 Using the obj Format To Generate .COM Files If you are writing a .COM program as more than one module, you may wish to assemble several .OBJ files and link them together into a .COM program. You can do this, provided you have a linker capable of outputting .COM files directly (TLINK does this), or alternatively a converter program such as EXE2BIN to transform the .EXE file output from the linker into a .COM file. If you do this, you need to take care of several things:The first object file containing code should start its code segment with a line like RESB 100h. This is to ensure that the code begins at offset 100h relative to the beginning of the code segment, so 105 that the linker or converter program does not have to adjust address references within the file when.COM file. Other assemblers use an ORG directive for this purpose, but ORG in NASM is a format−specific directive to the bin output format, and does not mean the same thing as it does in MASM−compatible assemblers. • You don’t need to define a stack segment.All your segments should be in the same group, so that every time your code or data references a.COM file is loaded, all the segment registers contain the same value. 8.3 Producing .SYS Files MS−DOS device drivers – .SYS files – are pure binary files, similar to .COM files, except that they start at origin zero rather than 100h. Therefore, if you are writing a device driver using the bin format, you do not need the ORG directive, since the default origin for bin is zero. Similarly, if you are using obj, you do not need the RESB 100h at the start of your code segment. .SYS files start with a header structure, containing pointers to the various routines inside the driver which do the work. This structure should be defined at the start of the code segment, even though it is.SYS files, and the data which has to go in the header structure, a list of books is given in the Frequently Asked Questions list for the newsgroup. 8.4 Interfacing to 16−bit C Programs This section covers the basics of writing assembly routines that call, or are called from, C programs. To.OBJ file, and link it with your C modules to produce a mixed−language program. 8.4.1 External Symbol Names C compilers have the convention that the names of all global symbols (functions or data) they defineprintf appears to an assembly language programmer as _printf. This means that in your assembly programs, you can define symbols without a leading underscore, and not have to worry about name clashes with C symbols. GLOBAL and EXTERN directives as follows: %rep construct could solve this.) If you then declare an external like this: 106 cextern printf printf as if it was a symbol, and the preprocessor will put the leading underscore on where necessary.cglobal macro works similarly. You must use cglobal before defining the symbol in question, but you would have had to do that anyway if you used GLOBAL. Also see section 2.1.28. 8.4.2 Memory Models NASM contains no mechanism to support the various C memory models directly; you have to keep trackIn models using a single code segment (tiny, small and compact), functions are near. This meansCS register never changes its value, and always gives the segment part of the full function address), and that functions are called using ordinary near instructions and return using RETN (which, in NASM, is synonymous with RET anyway). This means both that you should write your own routines to return with RETN, and that you should call external C routines with near CALL instructions. • In models using more than one code segment (medium, large and huge), functions are far. ThisCALL FAR (or CALL seg:offset) and return using RETF. Again, you should therefore write your own routines to return with RETF and use CALL FAR to call external routines. • In models using a single data segment (tiny, small and medium), data pointers are 16 bits long,DS register doesn’t change its value, and always gives the segment part of the full data item address). • In models using more than one data segment (compact, large and huge), data pointers are 32 bitsDS in your routines without restoring it afterwards, but ES is free for you to use to access the contents of 32−bit data pointers you are passed. • The huge memory model allows single data items to exceed 64K in size. In all other memory models, • In most memory models, there is a default data segment, whose segment address is kept in DS throughout the program. This data segment is typically the same segment as the stack, kept in SS, so that functions’ local variables (which are stored on the stack) and global data items can both beDS. Particularly large data items are typically stored in other segments. However, some memory models (though not the standard ones, usually) allow theSS and DS hold the same value to be removed. Be careful about functions’ local variables in this latter case. In models with a single code segment, the segment is called _TEXT, so your code segment must also go by this name in order to be linked into the same place as the main code segment. In models with a_DATA. 107 8.4.3 Function Definitions and Function Calls The C calling convention in 16−bit programs is as follows. In the following description, the words caller and callee are used to denote the function doing the calling and the function which gets called. • The caller pushes the function’s parameters on the stack, one after another, in reverse order (right to • The caller then executes a CALL instruction to pass control to the callee. This CALL is either near or far depending on the memory model. • The callee receives control, and typically (although this is not actually necessary, in functions whichSP in BP so as to be able to use BP as a base pointer to find its parameters on the stack. However, the caller was probably doing this too, so part of the calling convention states that BP must be preserved by any C function. Hence the callee, if it is going to set up BP as a frame pointer, must push the previous value first. • The callee may then access its parameters relative to BP. The word at [BP] holds the previous value of BP as it was pushed; the next word, at [BP+2], holds the offset part of the return address, pushed implicitly by CALL. In a small−model (near) function, the parameters start after that, at [BP+4]; in a large−model (far) function, the segment part of the return address lives at [BP+4], and the parameters begin at [BP+6]. The leftmost parameter of the function, since it was pushed last, is accessible at this offset from BP; the others follow, at successively greater offsets. Thus, in a function such as printf which takes a variable number of parameters, the pushing of the parameters in reverse order means that the function knows where to find its first parameter, which • The callee may also wish to decrease SP further, so as to allocate space on the stack for local variables, which will then be accessible at negative offsets from BP. • The callee, if it wishes to return a value to the caller, should leave the value in AL, AX or DX:AX depending on the size of the value. Floating−point results are sometimes (depending on theST0. • Once the callee has finished processing, it restores SP from BP if it had allocated local stack space, then pops the previous value of BP, and returns via RETN or RETF depending on memory model. • When the caller regains control from the callee, the function parameters are still on the stack, so itSP to remove them (instead of executing a number of slow POP instructions). Thus, if a function is accidentally called with the wrong number of parameters due to a prototype mismatch, the stack will still be returned to a sensible state since the caller,knows how many parameters it pushed, does the removing. It is instructive to compare this calling convention with that for Pascal programs (described in sectionRET or RETF instruction, so the caller does not have to do it. Also, the parameters are pushed in left−to−right order, not right−to−left, 108 sub sp,0x40 ; 64 bytes of local stack space RET by RETF, and look for the first parameter at [BP+6] instead of [BP+4]. Of course, if one of the parameters is a pointer, then the offsets of subsequent parameters will change depending on the memory model as well: far pointers take up four bytes on the stack when passed as a parameter, whereas near pointers take up two. DS already holds the segment base of the segment _DATA. If not, you would have to initialize it first. push word [myint] data type. The first argument (pushed last) to printf, however, is a data pointer, and therefore has to contain a segment and offset part. The segment should be stored second in memory, andPUSH DS would have been a shorter instruction than PUSH WORD SEG mystring, if DS was set up as the above example assumed.) Then the actual call becomes a far call, since functions expect far calls in large model; and SP has to be increased by 6 rather than 4 afterwards to make up for the extra word of parameters. 109 8.4.4 Accessing Data Items To get at the contents of C variables, or to declare variables which C can access, you need only declareGLOBAL or EXTERN. (Again, the names require leading underscores, as stated in section 8.4.1.) Thus, a C variable declared as int i can be accessed from assembler as extern _i extern int j, you do this (making sure you are assembling in the _DATA segment, if necessary): global _j int variables are two bytes long, so if a C program declares an array as int a[10], you can access a[3] by coding mov ax,[_a+6]. (The byte offset 6 is obtained by multiplying the desired array index, 3, by the size of the array element, 2.) The sizes of the C base types in 16−bit compilers are: 1 for char, 2 for short and int, 4 for long and float, and 8 for double. To access a C data structure, you need to know the offset from the base of the structure to the field youSTRUC), or by calculating the one offset and using just that. To do either of these, you should read your C compiler’s manual to find out how it organizes dataSTRUC macro, so you have to specify alignment yourself if the C compiler generates it. Typically, you might find that aint field would be aligned to a two−byte boundary. However, this sort of feature tends to be a configurable option in the C compiler, either using#pragma lines, so you have to find out how your own compiler does it. 8.4.5 c16.mac: Helper Macros for the 16−bit C Interface Included in the NASM archives, in the misc directory, is a file c16.mac of macros. It defines three macros: proc, arg and endproc. These are intended to be used for C−style procedure definitions, and they automate a lot of the work involved in keeping track of the calling convention.arg is also now built into NASM’s preprocessor. See section 4.8 for details.) 110 endproc _nearproc to be a procedure taking two arguments, the first (i) an integer and the second (j) a pointer to an integer. It returns i + *j. Note that the arg macro has an EQU as the first line of its expansion, and since the label before the macro call gets prepended to the first line of the expanded macro, the EQU works, defining %$i to be an offset from BP. A context−local variable is used, local to the context pushed by the proc macro and popped by the endproc macro, so that the same argument name can be used in later procedures. Of course, you don’t have to do that. The macro set produces code for near functions (tiny, small and compact−model code) by default. You. This changes the kind of return instruction generated by endproc, and also changes the starting point for the argument offsets. The macro set contains no intrinsic dependency on can take an optional parameter, giving the size of the argument. If no size is given, 2 is assumed, since it is likely that many function parameters will be of type int. The large−model equivalent of the above function would look like this:arg macro to define a parameter of size 4, because j is now a far pointer. When we load from j, we must load a segment and an offset. 8.5 Interfacing to Borland Pascal Programs Interfacing to Borland Pascal programs is similar in concept to interfacing to 16−bit C programs. The • The leading underscore required for interfacing to C programs is not required for Pascal.The memory model is always large: functions are far, data pointers are far, and no data item can beDS when control is passed to your assembly code. The only things that do not live in the default data segment are local variables (they live in the stack segment) and dynamically allocatedpointers, however, are far. • The function calling convention is different – described below. • Some data types, such as strings, are stored differently. 111 • There are restrictions on the segment names you are allowed to use – Borland Pascal will ignore 8.5.1 The Pascal Calling Convention The 16−bit Pascal calling convention is as follows. In the following description, the words caller and callee are used to denote the function doing the calling and the function which gets called. • The caller pushes the function’s parameters on the stack, one after another, in normal order (left to • The caller then executes a far CALL instruction to pass control to the callee. • The callee receives control, and typically (although this is not actually necessary, in functions whichSP in BP so as to be able to use BP as a base pointer to find its parameters on the stack. However, the caller was probably doing this too, so part of the calling convention states that BP must be preserved by any function. Hence the callee, if it is going to set up BP as a frame pointer, must push the previous value first. • The callee may then access its parameters relative to BP. The word at [BP] holds the previous value of BP as it was pushed. The next word, at [BP+2], holds the offset part of the return address, and the next one at [BP+4] the segment part. The parameters begin at [BP+6]. The rightmost parameter of the function, since it was pushed last, is accessible at this offset from BP; the others follow, at successively greater offsets. • The callee may also wish to decrease SP further, so as to allocate space on the stack for local variables, which will then be accessible at negative offsets from BP. • The callee, if it wishes to return a value to the caller, should leave the value in AL, AX or DX:AX depending on the size of the value. Floating−point results are returned in ST0. Results of type Real (Borland’s own custom floating−point data type, not handled directly by the FPU) are returned in. To return a result of type String, the caller pushes a pointer to a temporary string before pushing the parameters, and the callee places the returned string value at that location. TheRETF instruction. • Once the callee has finished processing, it restores SP from BP if it had allocated local stack space, then pops the previous value of BP, and returns via RETF. It uses the form of RETF with an immediate parameter, giving the number of bytes taken up by the parameters on the stack. This • When the caller regains control from the callee, the function parameters have already been removed Thus, you would define a function in Pascal style, taking two Integer–type parameters, in the following way: 112 At the other end of the process, to call a Pascal function from your assembly code, you would do 8.5.2 Borland Pascal Segment Name Restrictions Since Borland Pascal’s internal unit file format is completely different from OBJ, it only makes a very sketchy job of actually reading and understanding the various information contained in a real OBJ file when it links that in. Therefore an object file intended to be linked to a Pascal program must obey aProcedures and functions must be in a segment whose name is either CODE, CSEG, or something ending in _TEXT. • initialized data must be in a segment whose name is either CONST or something ending in _DATA. • Uninitialized data must be in a segment whose name is either DATA, DSEG, or something ending in _BSS. • Any other segments in the object file are completely ignored. GROUP directives and segment attributes are also ignored. 8.5.3 Using c16.mac With Pascal Programs The c16.mac macro package, described in section 8.4.5, can also be used to simplify writing functions to be called from Pascal programs, if you code %define PASCAL. This definition ensures that functions are far (it implies FARCODE), and also causes procedure return instructions to be generated with an operand.PASCAL does not change the code which calculates the argument offsets; you must declare your function’s arguments in reverse order. For example: 113 contents of the pointer. The only difference between this code and the large−model C version is that is defined instead of FARCODE, and that the arguments are declared in reverse order. 114 Chapter 9: Writing 32−bit Code (Unix, Win32, DJGPP) This chapter attempts to cover some of the common issues involved when writing 32−bit code, to runWin32, DJGPP or any of the PC Unix variants, runs in flat memory model. This means that the segment registers and paging have already been set up to give you the same 32−bit 4Gb address space no matter what segment you work relativeCALL and JMP live in the same address space as the data−section addresses you access your variables by and the stack−section addresses you access local variables and procedure 9.1 Interfacing to 32−bit C Programs A lot of the discussion in section 8.4, about interfacing to 16−bit C programs, still applies when working 9.1.1 External Symbol Names Most 32−bit C compilers share the convention used by 16−bit compilers, that the names of all globalELF specification states that C symbols do not have a leading underscore on their assembly−language names. The older Linux a.out C compiler, all Win32 compilers, DJGPP, and NetBSD and FreeBSD, all use the leading underscore; for these compilers, the macros cextern and cglobal, as given in section 8.4.1, will still work. For ELF, though, the leading underscore should not be used. See also section 2.1.28. 9.1.2 Function Definitions and Function Calls The C calling convention in 32−bit programs is as follows. In the following description, the words caller and callee are used to denote the function doing the calling and the function which gets called. • The caller pushes the function’s parameters on the stack, one after another, in reverse order (right to • The caller then executes a near CALL instruction to pass control to the callee. • The callee receives control, and typically (although this is not actually necessary, in functions whichESP in EBP so as to be able to use EBP as a base pointer to find its parameters on the stack. However, the caller was probably doing this too, so part of the calling convention states that EBP must be preserved by any C function. Hence the callee, if it is going to set up EBP as a frame pointer, must push the previous value first. • The callee may then access its parameters relative to EBP. The doubleword at [EBP] holds the previous value of EBP as it was pushed; the next doubleword, at [EBP+4], holds the return address, pushed implicitly by CALL. The parameters start after that, at [EBP+8]. The leftmost parameter of the function, since it was pushed last, is accessible at this offset from EBP; the others follow, at successively greater offsets. Thus, in a function such as printf which takes a variable number of parameters, the pushing of the parameters in reverse order means that the function 115 • The callee may also wish to decrease ESP further, so as to allocate space on the stack for local variables, which will then be accessible at negative offsets from EBP. • The callee, if it wishes to return a value to the caller, should leave the value in AL, AX or EAX depending on the size of the value. Floating−point results are typically returned in ST0. • Once the callee has finished processing, it restores ESP from EBP if it had allocated local stack space, then pops the previous value of EBP, and returns via RET (equivalently, RETN). • When the caller regains control from the callee, the function parameters are still on the stack, so itESP to remove them (instead of executing a number of slow POP instructions). Thus, if a function is accidentally called with the wrong number of parameters due to a prototype mismatch, the stack will still be returned to a sensible state since theknows how many parameters it pushed, does the removing. There is an alternative calling convention used by Win32 programs for Windows API calls, and also forby the Windows API such as window procedures: they follow what Microsoft calls the __stdcall convention. This is slightly closer to the Pascal convention, in that the callee clears the stack by passing a parameter to the RET instruction. However, the parameters are still pushed in right−to−left order. 116 9.1.3 Accessing Data Items To get at the contents of C variables, or to declare variables which C can access, you need only declareGLOBAL or EXTERN. (Again, the names require leading underscores, as stated in section 9.1.1.) Thus, a C variable declared as int i can be accessed from assembler as extern _i extern int j, you do this (making sure you are assembling in the _DATA segment, if necessary): global _j int variables are four bytes long, so if a C program declares an array as int a[10], you can access a[3] by coding mov ax,[_a+12]. (The byte offset 12 is obtained by multiplying the desired array index, 3, by the size of the array element, 4.) The sizes of the C base types in 32−bit compilers are: 1 for char, 2 for short, 4 for int, long and float, and 8 for double. Pointers, being 32−bit addresses, are also 4 bytes long. STRUC), or by calculating the one offset and using just that. To do either of these, you should read your C compiler’s manual to find out how it organizes dataSTRUC macro, so you have to specify alignment yourself if the C compiler generates it. Typically, you might find that aint field would be aligned to a four−byte boundary. However, this sort of feature is sometimes a configurable option in the C compiler, either#pragma lines, so you have to find out how your own compiler does it. 9.1.4 c32.mac: Helper Macros for the 32−bit C Interface Included in the NASM archives, in the misc directory, is a file c32.mac of macros. It defines three macros: proc, arg and endproc. These are intended to be used for C−style procedure definitions, and they automate a lot of the work involved in keeping track of the calling convention._proc32 to be a procedure taking two arguments, the first (i) an integer and the second (j) a pointer to an integer. It returns i + *j. 117 Note that the arg macro has an EQU as the first line of its expansion, and since the label before the macro call gets prepended to the first line of the expanded macro, the EQU works, defining %$i to be an offset from BP. A context−local variable is used, local to the context pushed by the proc macro and popped by the endproc macro, so that the same argument name can be used in later procedures. Of course, you don’t have to do that. arg can take an optional parameter, giving the size of the argument. If no size is given, 4 is assumed, since it is likely that many function parameters will be of type int or pointers. 9.2 Writing NetBSD/FreeBSD/OpenBSD and Linux/ELF Shared Libraries ELF replaced the older a.out object file format under Linux because it contains support for position−independent code (PIC), which makes writing shared libraries much easier. NASM supportsELF position−independent code features, so you can write Linux ELF shared libraries in NASM. NetBSD, and its close cousins FreeBSD and OpenBSD, take a different approach by hacking PIC supporta.out format. NASM supports this as the aoutb output format, so you can write BSD shared libraries in NASM too. global offset table, or GOT; the GOT is situated at a constant distance from your library’s code, so if you can find out where your library is loadedCALL and POP combination), you can obtain the address of the GOT, and you can then load the addresses of your variables out of linker−generated entries in the GOT.data section of a PIC shared library does not have these restrictions: since the data section is writable, it has to be copied into memory anyway rather than just paged in from the library file, so as 9.2.1 Obtaining the Address of the GOT Each code module in your shared library should define the GOT as an external symbol: 118 pop ebp _GLOBAL_OFFSET_TABLE requires a second leading underscore.) The first two lines of this function are simply the standard C prologue to set up a stack frame, and theEBX register, because PIC shared libraries use this register to store the address of the GOT. The interesting bit is the CALL instruction and the following two lines. The CALL and POP combination obtains the address of the label .get_GOT, without having to know in advance where the program was loaded (since the CALL instruction is encoded relative to the current position). The ADD instruction makes use of one of the special PIC relocation types: GOTPC relocation. With the WRT ..gotpc qualifier specified, the symbol referenced (here _GLOBAL_OFFSET_TABLE_, the special symbol assigned to the GOT) is given as an offset from the beginning of the section. (Actually, ELF encodes it as the offset from the operand field of the ADD instruction, but NASM simplifies this deliberately, so you do things the same way for both ELF and BSD.) So the instruction then adds the beginning of the section, to get the real address of the GOT, and subtracts the value of .get_GOT which it knows is in EBX. Therefore, by the time that instruction has finished, EBX contains the address of the GOT. If you didn’t follow that, don’t worry: it’s never necessary to obtain the address of the GOT by any other 9.2.2 Finding Your Local Data Items Having got the GOT, you can then use it to obtain the addresses of your data items. Most variables will..gotoff special WRT type. The way this works is like this:myvar wrt ..gotoff is calculated, when the shared library is linked, to be the offset to the local variable myvar from the beginning of the GOT. Therefore, adding it to EBX as above will place the real address of myvar in EAX. If you declare variables as GLOBAL without specifying a size for them, they are shared between code modules in the library, but do not get exported from the library to the program that loaded it. They will..gotoff mechanism. Note that due to a peculiarity of the way BSD a.out format handles this relocation type, there must be at least one non−local symbol in the same section as the address you’re trying to access. 9.2.3 Finding External and Common Data Items If your library needs to get at an external variable (external to the library, not just to one of the modules within it), you must use the ..got type to get at it. The ..got type, instead of giving you the offset from the GOT base to the variable, gives you the offset from the GOT base to a GOT entry containing the address of the variable. The linker will set up this GOT entry when it builds the library, and the dynamic in EAX, you would code 119 mov eax,[ebx+extvar wrt ..got]extvar out of an entry in the GOT. The linker, when it builds the shared library, collects together every relocation of type ..got, and builds the GOT so as to ensure it has every necessary entry present. 9.2.4 Exporting Symbols to the Library User If you want to export symbols to the user of the library, you have to declare whether they are functionsGLOBAL and supplying a size, the variable will end up living in the data section of the main program, rather than in your library’s data..got mechanism rather than ..gotoff, as if it were external (which, effectively, it has become). Equally, if you need to store the address of an exported global in one of your data sections, you can’t doglobal_data_item is merely an offset from the beginning of the .data section (or whatever); so this reference will end up pointing at your data section instead of at the exported global which resides elsewhere.WRT type ..sym to instruct NASM to search the symbol table for a particular symbol at that address, rather than just relocating by section base.believe the function lives. Either address is a valid way to call the function. 120 9.2.5 Calling Procedures Outside the Library Calling procedures outside your shared library has to be done by means of a procedure linkage table, or PLT. The PLT is placed at a known offset from where the library is loaded, so the library code can makeWRT ..plt. This is much easier than the GOT−based ones: you simply replace calls such as CALL printf with the PLT−relative version CALL printf WRT ..plt. 9.2.6 Generating the Library File Having written some code modules and assembled them to .o files, you then generate your shared library with a command such as /usr/lib or /lib, it is usually worth using the −soname flag to the linker, to store the final library file name, with a version number, into the library:library.so.1.2 into the library directory, and create library.so.1 as a symbolic link to it. 121 122 Chapter 10: Mixing 16 and 32 Bit Code This chapter tries to cover some of the issues, largely related to unusual forms of addressing and jump 10.1 Mixed−Size Jumps The most common form of mixed−size instruction is the one used when writing a 32−bit OS: having mixed−size instruction you need, since everything before it can be done in pure 16−bit code, and everything after it can be pure 32−bit. 0x9ABC and the jump will be an ordinary 16−bit far one. as86 to generate the required instruction by coding it manually, using DB instructions. NASM can go one better than that, by actually generating the right instruction itself. Here’s how to do it right:DWORD prefix (strictly speaking, it should come after the colon, since it is declaring the offset field to be a doubleword; but NASM will accept either form, since both are unambiguous) forces the offset prefix: jmp word 0x8765:0x4321 ; 32 to 16 bitWORD prefix is specified in 16−bit mode, or the DWORD prefix in 32−bit mode, they will be ignored, since each is explicitly forcing NASM into a mode it was in anyway. 10.2 Addressing Between Different−Size Segments If your OS is mixed 16 and 32−bit, or if you are writing a DOS extender, you are likely to have to deal with 123 This is fine, but slightly cumbersome (since it wastes an instruction and a register) if you already knowDWORD keyword, and it will be forced to be a 32−bit address: DWORD prefix comes before or after the segment override, so arguably a nicer−looking way to code the above instruction isDWORD prefix outside the square brackets, which controls the size of the data stored at the address, with the one inside the square brackets which controls the length of the address itself. The two can quite easily be different:WORD or DWORD prefixes along with the FAR prefix to indirect far jumps or calls. For example: 10.3 Other Mixed−Size Instructions The other way you might want to access data might be using the string instructions (LODSx, STOSx and so on) or the XLATB instruction. These instructions, since they take no parameters, might seem to have no easy way to make them perform 32−bit addressing when assembled in a 16−bit segment.a16, a32 and a64 prefixes. If you are coding LODSB in a 16−bit segment but it is supposed to be accessing a string in a 32−bit segment, you should load the desired address into and then code a32 lodsb LODSB loads from [DS:ESI] instead of [DS:SI]. To access a string in a 16−bit segment when coding in a 32−bit one, the corresponding a16 prefix can be used.a16, a32 and a64 prefixes can be applied to any instruction in NASM’s instruction table, but most of them can generate all the useful forms without them. The prefixes are necessary only for instructionsCMPSx, SCASx, LODSx, STOSx, MOVSx, INSx, OUTSx, and XLATB. Also, the various push and pop instructions (PUSHA and POPF as well as the more usual PUSH and POP) can accept a16, a32 or a64 prefixes to force a particular one of SP, ESP or RSP to be used as a stack pointer, in case the stack segment in use is a different size from the code segment. and POP, when applied to segment registers in 32−bit mode, also have the slightly odd behaviour that they push and pop 4 bytes at a time, of which the top two are ignored and the bottom two give theo16: o16 push ss 124 This code saves a doubleword of stack space by fitting two segment registers into the space whicho32 prefix to force the 32−bit behaviour when in 16−bit mode, but this seems less useful.) 125 126 Chapter 11: Writing 64−bit Code (Unix, Win64) This chapter attempts to cover some of the common issues involved when writing 64−bit code, to runFS and GS registers, which still add their bases. Position independence in 64−bit mode is significantly simpler, since the processor supports–relative addressing directly; see the REL keyword (section 3.3). On most 64−bit platforms, it is probably desirable to make that the default, using the directive DEFAULT REL (section 6.2). 64−bit programming is relatively similar to 32−bit programming, but of course pointers are 64 bits long;<inttypes.h>. All known 64−bit platforms except some embedded platforms require that the stack is 16−byte alignedRSP) needs to be aligned on an odd multiple of 8 bytes before the CALL instruction. In 64−bit mode, the default instruction size is still 32 bits. When loading a value into a 32−bit register 11.1 Register Names in 64−bit Mode NASM uses the following names for general−purpose registers in 64−bit mode, for 8−, 16−, 32− andR8L−R15L for 8−bit references to the higher registers. It is possible to use those names by definiting them as macros; similarly, if one wants to use numeric names for the low 8altreg (see section 5.1) can be used for this purpose. 11.2 Immediates and Displacements in 64−bit Mode In 64−bit mode, immediates and displacements are generally only 32 bits wide. NASM will thereforeMOV with an immediate into a 64−bit register. If this is not desirable, simply specify the equivalent 32−bit register, which will beDWORD: 127 mov rax,foo ; 64−bit immediate STRICT QWORD or STRICT DWORD is specified (see section 3.7):lea rax,[rel symbol] is position−independent, whereas mov rax,symbol is not. Most ABIs prefer or even require position−independent code in 64−bit mode. However, the MOV instruction is able to reference a symbol anywhere in the 64−bit address space, whereas LEA is only able to access a symbol within within 2 GB of the instruction itself (see below.)displacement is loading or storing, using MOV, AL, AX, EAX or RAX (but no other registers) to an absolute 64−bit address. Since this is a relatively rarely used instruction (64−bit code generally uses relative addressing), the programmer has to explicitly declareABS QWORD: default abs 11.3 Interfacing to 64−bit C Programs (Unix) On Unix, the 64−bit ABI as well as the x32 ABI (32−bit ABI with the CPU in 64−bit mode) is defined by theRDI, RSI, RDX, RCX, R8, and R9, in that order. Additional integer arguments are passed on the stack. These registers, plus RAX, R10 and R11 are destroyed by function calls, and thus are available for use by the function without saving.RAX and RDX, in that order. 128 Floating point is done using SSE registers, except for long double, which is 80 bits (TWORD) on most platforms (Android is one exception; there long double is 64 bits and treated the same as double.) Floating−point arguments are passed in XMM0 to XMM7; return is XMM0 and XMM1. long double are passed on the stack, and returned in ST0 and ST1. All SSE and x87 registers are destroyed by function calls.long is 64 bits. Integer and SSE register arguments are counted separately, so for the case of is passed in RDI, b in XMM0, and c in ESI. 11.4 Interfacing to 64−bit C Programs (Win64) The Win64 ABI is described by the document at: RCX, RDX, R8 and R9, in that order. Additional integer arguments are passed on the stack. These registers, plus RAX, R10 and R11 are destroyed by function calls, and thus are available for use by the function without saving.RAX only. Floating point is done using SSE registers, except for long double. Floating−point arguments are passed in XMM0 to XMM3; return is XMM0 only. On Win64, long is 32 bits; long long or _int64 is 64 bits. Integer and SSE register arguments are counted together, so for the case of is passed in RCX, b in XMM1, and c in R8D. 129 130 Chapter 12: Troubleshooting This chapter describes some of the common problems that users have been known to encounter with 12.1 Common Problems 12.1.1 NASM Generates Inefficient Code We sometimes get ‘bug’ reports about NASM generating inefficient, or even ‘wrong’, code onADD ESP,8. This is a deliberate design feature, connected to predictability of output: NASM, on seeing ADD ESP,8, will generate the form of the instruction which leaves room for a 32−bit offset. You need to code ADD ESP,BYTE 8 if you want the space−efficient form of the instruction. This isn’t a bug, it’s user error: if you prefer to have NASM produce the more efficient code−O option (see section 2.1.23). 12.1.2 My Jumps are Out of Range Similarly, people complain that when they issue conditional jumps (which are SHORT by default) that try to jump too far, NASM reports ‘short jump out of range’ instead of making the jumps longer.Jcc NEAR type instructions, because it doesn’t know that it’s working for a 386 or above. Alternatively, it could replace the out−of−range short JNE instruction with a very short JE instruction that jumps over a JMP NEAR; this is a sensible solution for processors below a 386, but hardly efficient on processors which have good branch prediction and could have used JNE NEAR instead. So, once again, it’s up to the user, not the assembler, to decide what instructions should be generated. See section 2.1.23. 12.1.3 ORG Doesn’t Work People writing boot sector programs in the bin format often complain that ORG doesn’t work the way they’d like: in order to place the 0xAA55 signature word at the end of a 512−byte boot sector, people who are used to MASM tend to codeORG directive in NASM, and will not work. The correct way to solve this problem in NASM is to use the TIMES directive, like this: ORG 0 TIMES directive will insert exactly enough zero bytes into the output to move the assembly point up to 510. This method also has the advantage that if you accidentally fill your boot sector too full, 131 12.1.4 TIMES Doesn’t Work The other common problem with the above code is people who write the TIMES line as TIMES 510−$ DB 0$ should be a pure number, just like 510, so the difference between them is also a pure number and can happily be fed to TIMES. NASM is a modular assembler: the various component parts are designed to be easily separable for re−use, so they don’t exchange information unnecessarily. In consequence, the bin output format, even though it has been told by the ORG directive that the .text section should start at 0, does not pass that information back to the expression evaluator. So from the evaluator’s point of view, $ isn’t a pure number: it’s an offset from a section base. Therefore the difference between $ and 510 is also not a pure number, but involves a section base. Values involving section bases cannot be passed asTIMES. The solution, as in the previous section, is to code the TIMES line in the form TIMES 510−($−$$) DB 0$ and $$ are offsets from the same section base, and so their difference is a pure number. This will solve the problem and generate sensible code. 132 Appendix A: Ndisasm The Netwide Disassembler, NDISASM A.1 Introduction The Netwide Disassembler is a small companion program to the Netwide Assembler, NASM. It seemed abinary source files. NDISASM does not have any understanding of object file formats, like objdump, and it will not understand DOS .EXE files like debug will. It just disassembles. A.2 Running NDISASM To disassemble a file, you will typically use a command of the form−b switch is present, NDISASM works in 16−bit mode by default. The −u switch (for USE32) also invokes 32−bit mode. Two more command line options are −r which reports the version number of NDISASM you are running, and −h which gives a short summary of command line options. A.2.1 COM Files: Specifying an Origin To disassemble a DOS .COM file correctly, a disassembler must assume that the first instruction in the file is loaded at address 0x100, rather than at zero. NDISASM, which assumes by default that any file you give it is loaded at zero, will therefore need to be informed of this.−o option allows you to declare a different origin for the file you are disassembling. Its argument may be expressed in any of the NASM numeric formats: decimal by default, if it begins with ‘$’ or ‘0x’ or ends in ‘H’ it’s hex, if it ends in ‘Q’ it’s octal, and if it ends in ‘B’ it’s binary. Hence, to disassemble a .COM file: ndisasm −o100h filename.com A.2.2 Code Following Data: Synchronisation Suppose you are disassembling a file which contains some data which isn’t machine code, and then contains some machine code. NDISASM will faithfully plough through the data section, producingFS OR AX,0x240A’), and generating ‘DB’ instructions ever so often if it’s totally stumped. Then it will reach the code section.before the beginning of the code section. It’s entirely possible that another spurious instruction will get generated, starting with the final byte of the data 133 To avoid this, you can specify a ‘synchronisation’ point, or indeed as many synchronisation points as you like (although NDISASM can only handle 2147483647 sync points internally). The definition of adb’ instead. So it will start disassembly exactly from the sync point, and so you will see all the instructions in your code section. Sync points are specified using the −s option: they are measured in terms of the program origin, not the file position. So if you want to synchronize after 32 bytes of a .COM file, you would have to do ndisasm −o100h −s120h file.com −s option. A.2.3 Mixed Code and Data: Automatic (Intelligent) Synchronisation Suppose you are disassembling the boot sector of a DOS floppy (maybe it has a virus, and you need to understand the virus so that you know what kinds of damage it might have done you). Typically, thisJMP instruction, then some data, then the rest of the code. So there is a very good chance of NDISASM being misaligned when the data ends and the code begins. Hence a sync point is needed. On the other hand, why should you have to specify the sync point manually? What you’d do in order toJMP instruction, and then to use its target address as a sync point. So can NDISASM do that for you? −a (for automatic sync) or −i (for intelligent sync) will enable auto−sync mode. Auto−sync mode automatically generates a sync point for any forward−referring PC−relative jump or call instruction that NDISASM encounters. (Sincenot guaranteed to catch all the sync points, and you may still have to place some manually. Auto−sync mode doesn’t prevent you from declaring manual sync points: it just adds automatically−i and some −s options. Another caveat with auto−sync mode is that if, by some unpleasant fluke, something in your data−k option (documented below) to suppress disassembly of the data area. A.2.4 Other Options The −e option skips a header on the file, by ignoring the first N bytes. This means that the header is not counted towards the disassembly offset: if you give −e10 −o10, disassembly will start at byte 10 in the file, and this will be given offset 10, not 20. 134 The −k option is provided with two comma−separated numeric arguments, the first of which is an assembly offset and the second is a number of bytes to skip. This will count the skipped bytes towards the assembly offset: its use is to suppress disassembly of a data section which wouldn’t contain 135 136 Appendix B: Instruction List B.1 Introduction The following sections show the instructions which NASM currently supports. For each instruction, B.1.1 Special instructions (pseudo−ops) DB B.1.2 Conventional instructions AAA 8086,NOLONG 137 ADC rm32,imm8 386,LOCK 138 ADD rm64,imm X64,LOCK 139 BSF reg32,mem 386 140 CALL imm32 386,NOLONG,BND 141 CMP reg_eax,imm 386 142 DMINT P6,CYRIX 143 FCOMI P6,FPU,ND 144 FINCSTP 8086,FPU 145 FSAVE mem 8086,FPU 146 FXCH fpureg 8086,FPU 147 IMUL reg16,imm 186,ND 148 JMP imm32|near 386,ND,NOLONG,BND 149 LGS reg32,mem 386 150 MONITOR PRESCOTT 151 MOV reg16,imm 8086 152 NOP rm64 X64 153 PACKSSWB mmxreg,mmxrm PENT,MMX 154 POP rm16 8086 155 PUSH rm64 X64 156 RDTSCP X86_64 157 SAHF 8086 158 SBB rm16,imm 8086,LOCK 159 SHRD reg16,reg16,imm 386 160 SUB reg64,reg64 X64 161 TEST mem,imm32 386 162 XCHG reg64,reg_rax X64 163 XOR mem,sbyteword16 8086,LOCK,ND B.1.3 Katmai Streaming SIMD instructions (SSE –– a.k.a. KNI, XMM, MMX2) ADDPS xmmreg,xmmrm128 KATMAI,SSE 164 CVTSI2SS xmmreg,rm64 X64,SSE,AR1 B.1.4 Introduced in Deschutes but necessary for SSE support FXRSTOR mem P6,SSE,FPU 165 FXSAVE mem P6,SSE,FPU B.1.5 XSAVE group (AVX and extended state) XGETBV NEHALEM B.1.6 Generic memory operations PREFETCHNTA mem8 KATMAI B.1.7 New MMX instructions introduced in Katmai MASKMOVQ mmxreg,mmxreg KATMAI,MMX B.1.8 AMD Enhanced 3DNow! (Athlon) instructions PF2IW mmxreg,mmxrm PENT,3DNOW 166 B.1.9 Willamette SSE2 Cacheability Instructions MASKMOVDQU xmmreg,xmmreg WILLAMETTE,SSE2 B.1.10 Willamette MMX instructions (SSE2 SIMD Integer Instructions) MOVD mem,xmmreg WILLAMETTE,SSE2,SD 167 PEXTRW reg32,xmmreg,imm WILLAMETTE,SSE2 168 PUNPCKHWD xmmreg,xmmrm WILLAMETTE,SSE2,SO B.1.11 Willamette Streaming SIMD instructions (SSE2) ADDPD xmmreg,xmmrm WILLAMETTE,SSE2,SO 169 CVTTSD2SI reg32,xmmreg WILLAMETTE,SSE2,AR1 B.1.12 Prescott New Instructions (SSE3) ADDSUBPD xmmreg,xmmrm PRESCOTT,SSE3,SO 170 B.1.13 VMX/SVM Instructions CLGI VMX,AMD B.1.14 Extended Page Tables VMX instructions INVEPT reg32,mem VMX,SO,NOLONG B.1.15 Tejas New Instructions (SSSE3) PABSB mmxreg,mmxrm SSSE3,MMX 171 PSHUFB mmxreg,mmxrm SSSE3,MMX B.1.16 AMD SSE4A EXTRQ xmmreg,imm,imm SSE4A,AMD B.1.17 New instructions in Barcelona LZCNT reg16,rm16 P6,AMD B.1.18 Penryn New Instructions (SSE4.1) BLENDPD xmmreg,xmmrm,imm SSE41 172 PINSRD xmmreg,mem,imm SSE41 B.1.19 Nehalem New Instructions (SSE4.2) CRC32 reg32,rm8 SSE42 B.1.20 Intel SMX GETSEC KATMAI B.1.21 Geode (Cyrix) 3DNow! additions PFRCPV mmxreg,mmxrm PENT,3DNOW,CYRIX 173 B.1.22 Intel new instructions in ??? MOVBE reg16,mem16 NEHALEM B.1.23 Intel AES instructions AESENC xmmreg,xmmrm128 SSE,WESTMERE B.1.24 Intel AVX AES instructions VAESENC xmmreg,xmmreg*,xmmrm128 AVX,SANDYBRIDGE B.1.25 Intel instruction extension based on pub number 319433−030 dated October 2017 VAESENC ymmreg,ymmreg*,ymmrm256 VAES B.1.26 Intel AVX instructions VADDPD xmmreg,xmmreg*,xmmrm128 AVX,SANDYBRIDGE 174 VADDSUBPS ymmreg,ymmreg*,ymmrm256 AVX,SANDYBRIDGE 175 VCMPEQ_UQPD ymmreg,ymmreg*,ymmrm256 AVX,SANDYBRIDGE 176 VCMPGE_OQPD ymmreg,ymmreg*,ymmrm256 AVX,SANDYBRIDGE 177 VCMPNEQ_OQPS ymmreg,ymmreg*,ymmrm256 AVX,SANDYBRIDGE 178 VCMPUNORDSD xmmreg,xmmreg*,xmmrm64 AVX,SANDYBRIDGE 179 VCMPORD_QSS xmmreg,xmmreg*,xmmrm64 AVX,SANDYBRIDGE 180 VCVTSI2SD xmmreg,xmmreg*,rm32 AVX,SANDYBRIDGE,SD 181 VMAXPD ymmreg,ymmreg*,ymmrm256 AVX,SANDYBRIDGE 182 VMOVMSKPS reg32,xmmreg AVX,SANDYBRIDGE 183 VPADDSW xmmreg,xmmreg*,xmmrm128 AVX,SANDYBRIDGE 184 VPINSRW xmmreg,xmmreg*,reg32,imm8 AVX,SANDYBRIDGE 185 VPSLLD xmmreg,xmmreg*,imm8 AVX,SANDYBRIDGE 186 VSTMXCSR mem32 AVX,SANDYBRIDGE B.1.27 Intel Carry−Less Multiplication instructions (CLMUL) PCLMULLQLQDQ xmmreg,xmmrm128 SSE,WESTMERE B.1.28 Intel AVX Carry−Less Multiplication instructions (CLMUL) VPCLMULLQLQDQ xmmreg,xmmreg*,xmmrm128 AVX,SANDYBRIDGE 187 VPCLMULLQHQDQ ymmreg,ymmreg*,ymmrm256 AVX512VL,VPCLMULQDQ B.1.29 Intel Fused Multiply−Add instructions (FMA) VFMADD132PS xmmreg,xmmreg,xmmrm128 FMA 188 VFMADDSUB231PD ymmreg,ymmreg,ymmrm256 FMA 189 VFNMADD132PS ymmreg,ymmreg,ymmrm256 FMA 190 VFMADD123SD xmmreg,xmmreg,xmmrm64 FMA B.1.30 Intel post−32 nm processor instructions RDFSBASE reg32 LONG 191 WRGSBASE reg64 LONG B.1.31 VIA (Centaur) security instructions XSTORE PENT,CYRIX B.1.32 AMD Lightweight Profiling (LWP) instructions LLWPCB reg32 AMD,386 B.1.33 AMD XOP and FMA4 instructions (SSE5) VFMADDPD xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 192 VFMADDSUBPS xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 193 VPCMOV xmmreg,xmmreg*,xmmrm128,xmmreg AMD,SSE5 194 VPSHAB xmmreg,xmmreg*,xmmrm128 AMD,SSE5 B.1.34 Intel AVX2 instructions VMPSADBW ymmreg,ymmreg*,ymmrm256,imm8 AVX2 195 VPHSUBSW ymmreg,ymmreg*,ymmrm256 AVX2 196 VPSLLD ymmreg,ymmreg*,xmmrm128 AVX2 197 VPBROADCASTQ ymmreg,xmmreg AVX2 B.1.35 Intel Transactional Synchronization Extensions (TSX) XABORT imm RTM 198 XBEGIN imm64|near RTM,LONG,ND B.1.36 Intel BMI1 and BMI2 instructions, AMD TBM instructions ANDN reg32,reg32,rm32 BMI1 199 T1MSKC reg64,rm64 LONG,TBM B.1.37 Intel Memory Protection Extensions (MPX) BNDMK bndreg,mem MPX,MIB B.1.38 Intel SHA acceleration instructions SHA1MSG1 xmmreg,xmmrm128 SHA B.1.39 AVX−512 mask register instructions KADDB kreg,kreg,kreg 200 KMOVB reg32,kreg B.1.40 AVX−512 instructions VADDPD xmmreg|mask|z,xmmreg*,xmmrm128|b64 AVX512VL 201 VADDPS xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VL 202 VBROADCASTSS ymmreg|mask|z,xmmreg AVX512VL 203 VCVTPS2PH xmmreg|mask|z,xmmreg,imm8 AVX512VL 204 VCVTTPS2UDQ ymmreg|mask|z,ymmrm256|b32 AVX512VL 205 VEXTRACTF32X4 xmmreg|mask|z,ymmreg,imm8 AVX512VL 206 VFMADD231PS xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL 207 VFMSUBADD213PD ymmreg|mask|z,ymmreg,ymmrm256|b64 AVX512VL 208 VFNMSUB231PS xmmreg|mask|z,xmmreg,xmmrm128|b32 AVX512VL 209 VINSERTF64X4 zmmreg|mask|z,zmmreg*,ymmrm256,imm8 AVX512 210 VMOVDQA64 ymmreg|mask|z,ymmrm256 AVX512VL 211 VMOVQ xmmrm64,xmmreg AVX512 212 VPABSQ ymmreg|mask|z,ymmrm256|b64 AVX512VL 213 VPANDQ ymmreg|mask|z,ymmreg*,ymmrm256|b64 AVX512VL 214 VPBROADCASTQ ymmreg|mask|z,xmmreg AVX512VL 215 VPCMPUD kreg|mask,ymmreg,ymmrm256|b32,imm8 AVX512VL 216 VPERMILPD zmmreg|mask|z,zmmrm512|b64,imm8 AVX512 217 VPEXTRB reg16,xmmreg,imm8 AVX512BW 218 VPMAXSD zmmreg|mask|z,zmmreg*,zmmrm512|b32 AVX512 219 VPMOVDB mem128|mask,zmmreg AVX512 220 VPMOVSQB xmmreg|mask|z,zmmreg AVX512 221 VPMOVUSQB xmmreg|mask|z,zmmreg AVX512 222 VPMULHRSW zmmreg|mask|z,zmmreg*,zmmrm512 AVX512BW 223 VPSADBW zmmreg,zmmreg*,zmmrm512 AVX512BW 224 VPSLLW zmmreg|mask|z,zmmrm512*,imm8 AVX512BW 225 VPSRLW zmmreg|mask|z,zmmreg*,xmmrm128 AVX512BW 226 VPTESTNMQ kreg|mask,zmmreg,zmmrm512|b64 AVX512 227 VREDUCEPD xmmreg|mask|z,xmmrm128|b64,imm8 AVX512VL/DQ 228 VSCATTERQPS ymem32|mask,xmmreg AVX512VL 229 B.1.41 Intel memory protection keys for userspace (PKU aka PKEYs) RDPKRU X64 B.1.42 Read Processor ID RDPID reg32 NOLONG B.1.43 New memory instructions CLFLUSHOPT mem B.1.44 Processor trace write PTWRITE rm32 B.1.45 Instructions from the Intel Instruction Set Extensions, B.1.46 doc 319433−034 May 2018 CLDEMOTE mem B.1.47 Galois field operations (GFNI) GF2P8AFFINEINVQB xmmreg,xmmrm128,imm8 GFNI,SSE 230 VGF2P8AFFINEQB ymmreg|mask|z,ymmreg*,ymmrm256|b64,imm8 AVX512VL,GFNI B.1.48 AVX512 Vector Bit Manipulation Instructions 2 VPCOMPRESSB mem128|mask,xmmreg AVX512VBMI2/VL 231 VPSHRDW ymmreg|mask|z,ymmreg*,ymmrm256,imm8 AVX512VBMI2/VL B.1.49 AVX512 VNNI VPDPBUSD xmmreg|mask|z,xmmreg*,xmmrm128|b32 AVX512VNNI/VL B.1.50 AVX512 Bit Algorithms VPOPCNTB xmmreg|mask|z,xmmrm128 AVX512BITALG/VL B.1.51 AVX512 4−iteration Multiply−Add V4FMADDPS zmmreg|mask|z,zmmreg|rs4,mem AVX5124FMAPS,SO 232 V4FMADDSS zmmreg|mask|z,zmmreg|rs4,mem AVX5124FMAPS,SO B.1.52 AVX512 4−iteration Dot Product V4DPWSSDS zmmreg|mask|z,zmmreg|rs4,mem AVX5124VNNIW,SO B.1.53 Intel Software Guard Extensions (SGX) ENCLS SGX B.1.54 Systematic names for the hinting nop instructions HINT_NOP0 rm16 P6,UNDOC 233 HINT_NOP13 rm32 P6,UNDOC 234 HINT_NOP31 rm32 P6,UNDOC 235 HINT_NOP49 rm32 P6,UNDOC 236 Appendix C: NASM Version History C.1 NASM 2 Series The NASM 2 series supports x86−64, and is the production version of NASM since 2007. C.1.1 Version 2.14.02 • Fix crash due to multiple errors or warnings during the code generation pass if a list file is specified. C.1.2 Version 2.14.01 • Create all system−defined macros defore processing command−line given preprocessing directives−p, −d, −u, −−pragma, −−before). • If debugging is enabled, define a __DEBUG_FORMAT__ predefined macro. See section 4.11.7. • Fix an assert for the case in the obj format when a SEG operator refers to an EXTERN symbol declared further down in the code. • Fix a corner case in the floating−point code where a binary, octal or hexadecimal floating−point • Support −MD without a filename, for gcc compatibility. −MF can be used to set the dependencies output filename. See section 2.1.7. • Fix −E in combination with −MD. See section 2.1.21. • Fix missing errors on redefined labels; would cause convergence failure instead which is very slow • Duplicate definitions of the same label with the same value is now explicitly permitted (2.14 would allow it in some circumstances.) • Add the option −−no−line to ignore %line directives in the source. See section 2.1.33 and section 4.10.1. C.1.3 Version 2.14 • Changed −I option semantics by adding a trailing path separator unconditionally. • Fixed null dereference in corrupted invalid single line macros. • Fixed division by zero which may happen if source code is malformed. • Fixed out of bound access in processing of malformed segment override. • Fixed out of bound access in certain EQU parsing. • Fixed buffer underflow in float parsing. • Added SGX (Intel Software Guard Extensions) instructions. • Added +n syntax for multiple contiguous registers. • Fixed subsections_via_symbols for macho object format. • Added the −−gprefix, −−gpostfix, −−lprefix, and −−lpostfix command line options, to allow command line base symbol renaming. See section 2.1.28. • Allow label renaming to be specified by %pragma in addition to from the command line. See section 6.9. 237 • Supported generic %pragma namespaces, output and debug. See section 6.10. • Added the −−pragma command line option to inject a %pragma directive. See section 2.1.29. • Added the −−before command line option to accept preprocess statement before input. See section 2.1.30. • Added AVX512 VBMI2 (Additional Bit Manipulation), VNNI (Vector Neural Network), BITALG (Bit Algorithm), and GFNI (Galois Field New Instruction) instructions. • Added the STATIC directive for local symbols that should be renamed using global−symbol rules. See section 6.8. • Allow a symbol to be defined as EXTERN and then later overridden as GLOBAL or COMMON. Furthermore, a symbol declared EXTERN and then defined will be treated as GLOBAL. See section 6.5. • The GLOBAL directive no longer is required to precede the definition of the symbol. • Support private_extern as macho specific extension to the GLOBAL directive. See section 7.8.5. • Updated UD0 encoding to match with the specification • Added the −−limit−X command line option to set execution limits. See section 2.1.31. • Updated the Codeview version number to be aligned with MASM. • Added the −−keep−all command line option to preserve output files. See section 2.1.32. • Added the −−include command line option, an alias to −P (section 2.1.18). • Added the −−help command line option as an alias to −h (section 3.1). • Added −W, −D, and −Q suffix aliases for RET instructions so the operand sizes of these instructions can be encoded without using o16, o32 or o64. C.1.4 Version 2.13.03 • Added AVX and AVX512 VAES* and VPCLMULQDQ instructions. • Fixed missing dwarf record in x32 ELF output format. C.1.5 Version 2.13.02 • Fix false positive in testing of numeric overflows. • Fix generation of PEXTRW instruction. • Fix smartalign package which could trigger an error during optimization if the alignment code expanded too much due to optimization of the previous code. • Fix a case where negative value in TIMES directive causes panic instead of an error. • Always finalize .debug_abbrev section with a null in dwarf output format. • Support debug flag in section attributes for macho output format. See section 7.8.1. • Support up to 16 characters in section names for macho output format. • Fix missing update of global BITS setting if SECTION directive specified a bit size using output format−specific extensions (e.g. USE32 for the obj output format.) • Fix the incorrect generation of VEX−encoded instruction when static mode decorators are specified • Option −MW to quote dependency outputs according to Watcom Make conventions instead of POSIX Make conventions. See section 2.1.11. 238 • The obj output format now contains embedded dependency file information, unless disabled with %pragma obj nodepend. See section 7.4.9. • Fix generation of dependency lists. • Fix a number of null pointer reference and memory allocation errors.Always generate symbol−relative relocations for the macho64 output format; at least some versions of the XCode/LLVM linker fails for section−relative relocations. C.1.6 Version 2.13.01 • Fix incorrect output for some types of FAR or SEG references in the obj output format, and possibly other 16−bit output formats. • Fix the address in the list file for an instruction containing a TIMES directive. • Fix error with TIMES used together with an instruction which can vary in size, e.g. JMP. • Fix breakage on some uses of the DZ pseudo−op. C.1.7 Version 2.13 • Support the official forms of the UD0 and UD1 instructions. • Allow self−segment−relative expressions in immediates and displacements, even when combined extern foo • Handle a 64−bit origin in NDISASM.NASM can now generate sparse output files for relevant output formats, if the underlying operating • The macho object format now supports the subsections_via_symbols and no_dead_strip directives, see section 7.8.4. • The macho object format now supports the no_dead_strip, live_support and strip_static_syms section flags, see section 7.8.1. • The macho object format now supports the dwarf debugging format, as required by newer toolchains. • All warnings can now be suppressed if desired; warnings not otherwise part of any warning class areother (e.g. −w−other). Furthermore, warning−as−error can now be controlled on a per warning class basis, using the syntaxwarning−class and its equivalent for all other warning control options. See section 2.1.25 for the command−line options and warning classes and section 6.13 for the [WARNING] directive. • Fix a number of bugs related to AVX−512 decorators.Significant improvements to building NASM with Microsoft Visual Studio via Mkfiles/msvc.mak. It is now possible to build the full Windows installer binary as long as the necessary prerequisites areMkfiles/README • To build NASM with custom modifications (table changes) or from the git tree now requires Perl 5.8 • Fix the {z} decorator on AVX−512 VMOVDQ* instructions. 239 • Add new warnings for certain dangerous constructs which never ought to have been allowed. InRESB family of instructions should have been taking a critical expression all along. • Fix the EVEX (AVX−512) versions of the VPBROADCAST, VPEXTR, and VPINSR instructions. • Support contracted forms of additional instructions. As a general rule, if an instruction has a addps xmm1,xmm0 ; SSE instruction • Fix Codeview malformed compiler version record.Add the CLWB and PCOMMIT instructions. Note that the PCOMMIT instruction has been deprecated and will never be included in a shipping product; it is included for completeness only. • Add the %pragma preprocessor directive for soft−error directives. • Add the RDPID instruction. C.1.8 Version 2.12.02 • Fix preprocessor errors, especially %error and %warning, inside %if statements. • Fix relative relocations in 32−bit Mach−O. • More Codeview debug format fixes.If the MASM PTR keyword is encountered, issue a warning. This is much more likely to indicate a MASM−ism encountered in NASM than it is a valid label. This warning can be suppressed with, the [warning] directive (see section 2.1.25) or by the macro definition %idefine ptr $%? (see section 4.1.5). • When an error or a warning comes from the expansion of a multi−line macro, display the file and line.nolist do not get displayed. • Add macros ilog2fw() and ilog2cw() to the ifunc macro package. See section 5.4.1. C.1.9 Version 2.12.01 • Portability fixes for some platforms. • Fix error when not specifying a list file. • Correct the handling of macro−local labels in the Codeview debugging format. • Add CLZERO, MONITORX and MWAITX instructions. C.1.10 Version 2.12 • Major fixes to the macho backend (section 7.8); earlier versions would produce invalid symbols and relocations on a regular basis. • Support for thread−local storage in Mach−O. • Support for arbitrary sections in Mach−O. • Fix wrong negative size treated as a big positive value passed into backend causing NASM to crash.Fix handling of zero−extending unsigned relocations, we have been printing wrong message and • Fix potential write of oversized (with size greater than allowed in output format) relative relocations. 240 • Portability fixes for building NASM with the LLVM compiler.Add support of Codeview version 8 (cv8) debug format for win32 and win64 formats in the COFF backend, see section 7.5.3. • Allow 64−bit outputs in 16/32−bit only backends. Unsigned 64−bit relocations are zero−extended−w−zext−reloc); signed 64−bit relocations are an error. • Line numbers in list files now correspond to the lines in the source files, instead of simply being • There is now an official 64−bit (x64 a.k.a. x86−64) build for Windows. C.1.11 Version 2.11.09 • Fix potential stack overwrite in macho32 backend. • Fix relocation records in macho64 backend. • Fix symbol lookup computation in macho64 backend. • Adjust .symtab and .rela.text sections alignments to 8 bytes in elf64 backed. • Fix section length computation in bin backend which leaded in incorrect relocation records. C.1.12 Version 2.11.08 • Fix section length computation in bin backend which leaded in incorrect relocation records. • Add a warning for numeric preprocessor definitions passed via command line which might have • Add ability to specify a module name record in rdoff linker with −mn option. • Increase label length capacity up to 256 bytes in rdoff backend for FreePascal sake, which tends to generate very long labels for procedures. • Fix segmentation failure when rip addressing is used in macho64 backend. • Fix access on out of memory when handling strings with a single grave. We have sixed similar • Fix NULL dereference in disassembled on BND instruction. C.1.13 Version 2.11.07 • Fix 256 bit VMOVNTPS instruction. • Fix −MD option handling, which was rather broken in previous release changing command line api. • Fix access to unitialized space when handling strings with a single grave. • Fix nil dereference in handling memory reference parsing. C.1.14 Version 2.11.06 • Update AVX512 instructions based on the Extension Reference (319433−021 Sept 2014). • Fix the behavior of −MF and −MD options (Bugzilla 3392280) • Updated Win32 Makefile to fix issue with build C.1.15 Version 2.11.05 • Add −−v as an alias for −v (see section 2.1.26), for command−line compatibility with Yasm. 241 • Fix a bug introduced in 2.11.03 whereby certain instructions would contain multiple REX prefixes, C.1.16 Version 2.11.04 • Removed an invalid error checking code. Sometimes a memref only with a displacement can also set vmovdqu32 [0xabcd]{k1}, zmm0Fixed a bug in disassembler that EVEX.L’L vector length was not matched when EVEX.b was set C.1.17 Version 2.11.03 • Fix a bug there REX prefixes were missing on instructions inside a TIMES statement. C.1.18 Version 2.11.02 • Add the XSAVEC, XSAVES and XRSTORS family instructions. • Add the CLFLUSHOPT instruction. C.1.19 Version 2.11.01 • Allow instructions which implicitly uses XMM0 (VBLENDVPD, VBLENDVPS, PBLENDVB and SHA256RNDS2) to be specified without an explicit xmm0 on the assembly line. In other words, the following two lines produce the same output: vblendvpd xmm2,xmm1,xmm0 ; Last operand is fixed xmm0 • In the ELF backends, don’t crash the assembler if section align is specified without a value. C.1.20 Version 2.11 • Add support for the Intel AVX−512 instruction set: • 16 new, 512−bit SIMD registers. Total 32 (ZMM0 ~ ZMM31) • 8 new opmask registers (K0 ~ K7). One of 7 registers (K1 ~ K7) can be used as an opmask for conditional execution. • A new EVEX encoding prefix. EVEX is based on VEX and provides more capabilities: opmasks, − opmask • Add support for ZWORD (512 bits), DZ and RESZ. • Add support for the MPX and SHA instruction sets. • Better handling of section redefinition. 242 • Generate manpages when running ’make dist’. • Handle all token chains in mmacro params range. • Support split [base,index] effective address: • Support BND prefix for branch instructions (for MPX). • The DEFAULT directive can now take BND and NOBND options to indicate whether all relevant branches should be getting BND prefixes. This is expected to be the normal for use in MPX code. • Add {evex}, {vex3} and {vex2} instruction prefixes to have NASM encode the corresponding instruction, if possible, with an EVEX, 3−byte VEX, or 2−byte VEX prefix, respectively. • Support for section names longer than 8 bytes in Win32/Win64 COFF.The NOSPLIT directive by itself no longer forces a single register to become an index register, unless it has an explicit multiplier. mov eax,[nosplit eax] ; eax as base register C.1.21 Version 2.10.09 • Pregenerate man pages. C.1.22 Version 2.10.08 • Fix VMOVNTDQA, MOVNTDQA and MOVLPD instructions. • Fix collision for VGATHERQPS, VPGATHERQD instructions. • Fix VPMOVSXBQ, VGATHERQPD, VSPLLW instructions. • Add a bunch of AMD TBM instructions. • Fix potential stack overwrite in numbers conversion. • Allow byte size in PREFETCHTx instructions. • Make manual pages up to date. • Make F3 and F2 SSE prefixes to override 66. • Support of AMD SVM instructions in 32 bit mode. • Fix near offsets code generation for JMP, CALL instrictions in long mode. • Fix preprocessor parse regression when id is expanding to a whitespace. C.1.23 Version 2.10.07 • Fix line continuation parsing being broken in previous version. C.1.24 Version 2.10.06 • Always quote the dependency source names when using the automatic dependency generation • If no dependency target name is specified via the −MT or −MQ options, quote the default output name. • Fix assembly of shift operations in CPU 8086 mode. 243 • Fix incorrect generation of explicit immediate byte for shift by 1 under certain circumstances. • Fix assembly of the VPCMPGTQ instruction. • Fix RIP−relative relocations in the macho64 backend. C.1.25 Version 2.10.05 • Add the CLAC and STAC instructions. C.1.26 Version 2.10.04 • Add back the inadvertently deleted 256−bit version of the VORPD instruction. • Correct disassembly of instructions starting with byte 82 hex. • Fix corner cases in token pasting, for example: C.1.27 Version 2.10.03 • Correct the assembly of the instruction: Previous versions would incorrectly generate F3 A2 for this instruction and issue a warning; correct behavior is to emit F3 88 05. C.1.28 Version 2.10.02 • Add the ifunc macro package with integer functions, currently only integer logarithms. See section 5.4. • Add the RDSEED, ADCX and ADOX instructions. C.1.29 Version 2.10.01 • Add missing VPMOVMSKB instruction with reg32, ymmreg operands. C.1.30 Version 2.10 • When optimization is enabled, mov r64,imm now optimizes to the shortest form possible between: mov r32,imm32 ; 5 bytes To force a specific form, use the STRICT keyword, see section 3.7. • Add support for the Intel AVX2 instruction set. • Add support for Bit Manipulation Instructions 1 and 2. • Add support for Intel Transactional Synchronization Extensions (TSX). • Add support for x32 ELF (32−bit ELF with the CPU in 64−bit mode.) See section 7.9. • Add support for bigendian UTF−16 and UTF−32. See section 3.4.5. C.1.31 Version 2.09.10 • Fix up NSIS script to protect uninstaller against registry keys absence or corruption. It brings in a few 244 C.1.32 Version 2.09.09 • Fix initialization of section attributes of bin output format. • Fix mach64 output format bug that crashes NASM due to NULL symbols. C.1.33 Version 2.09.08 • Fix __OUTPUT_FORMAT__ assignment when output driver alias is used. For example when −f elf is used __OUTPUT_FORMAT__ must be set to elf, if −f elf32 is used __OUTPUT_FORMAT__ must be assigned accordingly, i.e. to elf32. The rule applies to all output driver aliases. See section 4.11.6. C.1.34 Version 2.09.07 • Fix attempts to close same file several times when −a option is used. • Fixes for VEXTRACTF128, VMASKMOVPS encoding. C.1.35 Version 2.09.06 • Fix missed section attribute initialization in bin output target. C.1.36 Version 2.09.05 • Fix arguments encoding for VPEXTRW instruction. • Remove invalid form of VPEXTRW instruction. • Add VLDDQU as alias for VLDQQU to match specification. C.1.37 Version 2.09.04 • Fix incorrect labels offset for VEX intructions. • Eliminate bogus warning on implicit operand size override.%if term could not handle 64 bit numbers. • The COFF backend was limiting relocations number to 16 bits even if in real there were a way more C.1.38 Version 2.09.03 • Print %macro name inside %rep blocks on error. • Fix preprocessor expansion behaviour. It happened sometime too early and sometime simply • Fix unitialized data dereference on OMF output format. • Issue warning on unterminated %{ construct. • Fix for documentation typo. C.1.39 Version 2.09.02 • Fix reversed tokens when %deftok produces more than one output token. • Fix segmentation fault on disassembling some VEX instructions. • Missing %endif did not always cause error. • Fix typo in documentation.Compound context local preprocessor single line macro identifiers were not expanded early enough 245 C.1.40 Version 2.09.01 • Fix NULL dereference on missed %deftok second parameter. • Fix NULL dereference on invalid %substr parameters. C.1.41 Version 2.09 • Fixed assignment the magnitude of %rep counter. It is limited to 62 bits now. • Fixed NULL dereference if argument of %strlen resolves to whitespace. For example if nonexistent macro parameter is used. • %ifenv, %elifenv, %ifnenv, and %elifnenv directives introduced. See section 4.4.9. • Fixed NULL dereference if environment variable is missed. • Updates of new AVX v7 Intel instructions.PUSH imm32 is now officially documented. • Fix for encoding the LFS, LGS and LSS in 64−bit mode. • Fixes for compatibility with OpenWatcom compiler and DOS 8.3 file format limitation. • Macros parameters range expansion introduced. See section 4.3.4. • Backward compatibility on expanging of local sigle macros restored. • 8 bit relocations for elf and bin output formats are introduced. • Short intersegment jumps are permitted now. • An alignment more than 64 bytes are allowed for win32, win64 output formats. • SECTALIGN directive introduced. See section 4.11.14. • nojmp option introduced in smartalign package. See section 5.2. • Short aliases win, elf and macho for output formats are introduced. Each stands for win32, elf32 and macho32 accordingly. • Faster handling of missing directives implemented. • Various small improvements in documentation. • No hang anymore if unable to open malloc.log file. • The environments without vsnprintf function are able to build nasm again. • AMD LWP instructions updated. • Tighten EA checks. We warn a user if there overflow in EA addressing.Make −Ox the default optimization level. For the legacy behavior, specify −O0 explicitly. See section 2.1.23. • Environment variables read with %! or tested with %ifenv can now contain non−identifier characters if surrounded by quotes. See section 4.10.2. • Add a new standard macro package %use fp for floating−point convenience macros. See section 5.3. C.1.42 Version 2.08.02 • Fix crash under certain circumstances when using the %+ operator. 246 C.1.43 Version 2.08.01 • Fix the %use statement, which was broken in 2.08. C.1.44 Version 2.08 • A number of enhancements/fixes in macros area. • Support for converting strings to tokens. See section 4.1.9. • Fuzzy operand size logic introduced. • Fix COFF stack overrun on too long export identifiers. • Fix Macho−O alignment bug. • Fix crashes with –fwin32 on file with many exports. • Fix stack overrun for too long [DEBUG id]. • Fix incorrect sbyte usage in IMUL (hit only if optimization flag passed). • Append ending token for .stabs records in the ELF output format. • New NSIS script which uses ModernUI and MultiUser approach. • Visual Studio 2008 NASM integration (rules file). • Warn a user if a constant is too long (and as result will be stripped). • The obsoleted pre−XOP AMD SSE5 instruction set which was never actualized was removed. • Fix stack overrun on too long error file name passed from the command line.Bind symbols to the .text section by default (ie in case if SECTION directive was omitted) in the ELF • Fix sync points array index wrapping. • A few fixes for FMA4 and XOP instruction templates. • Add AMD Lightweight Profiling (LWP) instructions. • Fix the offset for %arg in 64−bit mode. • An undefined local macro (%$) no longer matches a global macro with the same name. • Fix NULL dereference on too long local labels. C.1.45 Version 2.07 • NASM is now under the 2−clause BSD license. See section 1.1.1. • Fix the section type for the .strtab section in the elf64 output format. • Fix the handling of COMMON directives in the obj output format. • New ith and srec output formats; these are variants of the bin output format which output Intel hex and Motorola S−records, respectively. See section 7.2 and section 7.3. • rdf2ihx replaced with an enhanced rdf2bin, which can output binary, COM, Intel hex or Motorola S−records. • The Windows installer now puts the NASM directory first in the PATH of the \"NASM Shell\". • Revert the early expansion behavior of %+ to pre−2.06 behavior: %+ is only expanded late. • Yet another Mach−O alignment fix. 247 • Don’t delete the list file on errors. Also, include error and warning information in the list file. • Support for 64−bit Mach−O output, see section 7.8. • Fix assert failure on certain operations that involve strings with high−bit bytes. C.1.46 Version 2.06 • This release is dedicated to the memory of Charles A. Crayne, long time NASM developer as well ascomp.lang.asm.x86 and author of the book Serious Assembler. We miss you, Chuck. • Support for indirect macro expansion (%[...]). See section 4.1.3. • %pop can now take an argument, see section 4.7.1. • The argument to %use is no longer macro−expanded. Use %[...] if macro expansion is desired. • Support for thread−local storage in ELF32 and ELF64. See section 7.9.4. • Fix crash on %ifmacro without an argument. • Correct the arguments to the POPCNT instruction. • Fix section alignment in the Mach−O format. • Update AVX support to version 5 of the Intel specification. • Fix the handling of accesses to context−local macros from higher levels in the context stack.Treat WAIT as a prefix rather than as an instruction, thereby allowing constructs like O16 FSAVE to work correctly. • Support for structures with a non−zero base offset. See section 4.11.11.Correctly handle preprocessor token concatenation (see section 4.3.9) involving floating−point • The PINSR series of instructions have been corrected and rationalized. • Removed AMD SSE5, replaced with the new XOP/FMA4/CVT16 (rev 3.03) spec. • The ELF backends no longer automatically generate a .comment section. • Add additional \"well−known\" ELF sections with default attributes. See section 7.9.2. C.1.47 Version 2.05.01 • Fix the −w/−W option parsing, which was broken in NASM 2.05. C.1.48 Version 2.05 • Fix redundant REX.W prefix on JMP reg64. • Make the behaviour of −O0 match NASM 0.98 legacy behavior. See section 2.1.23. • −w−user can be used to suppress the output of %warning directives. See section 2.1.25. • Fix bug where ALIGN would issue a full alignment datum instead of zero bytes. • Fix offsets in list files. • Fix %include inside multi−line macros or loops. • Fix error where NASM would generate a spurious warning on valid optimizations of immediate • Fix arguments to a number of the CVT SSE instructions. 248 • Fix RIP−relative offsets when the instruction carries an immediate. • Massive overhaul of the ELF64 backend for spec compliance. • Fix the Geode PFRCPV and PFRSQRTV instruction. • Fix the SSE 4.2 CRC32 instruction. C.1.49 Version 2.04 • Sanitize macro handing in the %error directive. • New %warning directive to issue user−controlled warnings. • %error directives are now deferred to the final assembly phase. • New %fatal directive to immediately terminate assembly. • New %strcat directive to join quoted strings together. • New %use macro directive to support standard macro directives. See section 4.6.4. • Excess default parameters to %macro now issues a warning by default. See section 4.3. • Fix %ifn and %elifn. • Fix nested %else clauses. • Correct the handling of nested %reps. • New %unmacro directive to undeclare a multi−line macro. See section 4.3.12. • Builtin macro __PASS__ which expands to the current assembly pass. See section 4.11.10. • __utf16__ and __utf32__ operators to generate UTF−16 and UTF−32 strings. See section 3.4.5. • Fix bug in case−insensitive matching when compiled on platforms that don’t use the configure script. Of the official release binaries, that only affected the OS/2 binary. • Support for x87 packed BCD constants. See section 3.4.7. • Correct the LTR and SLDT instructions in 64−bit mode. • Fix unnecessary REX.W prefix on indirect jumps in 64−bit mode. • Add AVX versions of the AES instructions (VAES...). • Fix the 256−bit FMA instructions. • Add 256−bit AVX stores per the latest AVX spec.VIA XCRYPT instructions can now be written either with or without REP, apparently different versions of the VIA spec wrote them differently. • Add missing 64−bit MOVNTI instruction. • Fix the operand size of VMREAD and VMWRITE. • Numerous bug fixes, especially to the AES, AVX and VTX instructions.The optimizer now always runs until it converges. It also runs even when disabled, but doesn’t • %push no longer needs a context identifier; omitting the context identifier results in an anonymous context. C.1.50 Version 2.03.01 • Fix buffer overflow in the listing module. 249 • Fix the handling of hexadecimal escape codes in ‘...‘ strings. • The Postscript/PDF documentation has been reformatted. • The −F option now implies −g. C.1.51 Version 2.03 • Add support for Intel AVX, CLMUL and FMA instructions, including YMM registers.dy, resy and yword for 32−byte operands. • Fix some SSE5 instructions. • Intel INVEPT, INVVPID and MOVBE instructions. • Fix checking for critical expressions when the optimizer is enabled. • Support the DWARF debugging format for ELF targets. • Fix optimizations of signed bytes. • Fix operation on bigendian machines. • Fix buffer overflow in the preprocessor.SAFESEH support for Win32, IMAGEREL for Win64 (SEH). • %? and %?? to refer to the name of a macro itself. In particular, %idefine keyword $%? can be used to make a keyword \"disappear\". • New options for dependency generation: −MD, −MF, −MP, −MT, −MQ. • New preprocessor directives %pathsearch and %depend; INCBIN reimplemented as a macro. • %include now resolves macros in a sane manner. • %substr can now be used to get other than one−character substrings. • New type of character/string constants, using backquotes (‘...‘), which support C−style escape sequences. • %defstr and %idefstr to stringize macro definitions before creation. • Fix forward references used in EQU statements. C.1.52 Version 2.02 • Additional fixes for MMX operands with explicit qword, as well as (hopefully) SSE operands with oword. • Fix handling of truncated strings with DO. • Fix segfaults due to memory overwrites when floating−point constants were used. • Fix segfaults due to missing include files. • Fix OpenWatcom Makefiles for DOS and OS/2. • Add autogenerated instruction list back into the documentation. • ELF: Fix segfault when generating stabs, and no symbols have been defined. • ELF: Experimental support for DWARF debugging information. • New compile date and time standard macros.%ifnum now returns true for negative numbers. • New %iftoken test for a single token. 250 • New %ifempty test for empty expansion. • Add support for the XSAVE instruction group. • Makefile for Netware/gcc. • Fix issue with some warnings getting emitted way too many times. • Autogenerated instruction list added to the documentation. C.1.53 Version 2.01 • Fix the handling of MMX registers with explicit qword tags on memory (broken in 2.00 due to 64−bit changes.) • Fix the PREFETCH instructions. • Fix the documentation. • Fix debugging info when using −f elf (backwards compatibility alias for −f elf32). • Man pages for rdoff tools (from the Debian project.) • ELF: handle large numbers of sections. • Fix corrupt output when the optimizer runs out of passes. C.1.54 Version 2.00 • Added c99 data−type compliance. • Added general x86−64 support. • Added win64 (x86−64 COFF) output format. • Added __BITS__ standard macro. • Renamed the elf output format to elf32 for clarity. • Added elf64 and macho (MacOS X) output formats. • Added Numeric constants in dq directive. • Added oword, do and reso pseudo operands. • Allow underscores in numbers. • Added 8−, 16− and 128−bit floating−point formats. • Added binary, octal and hexadecimal floating−point. • Correct the generation of floating−point constants. • Added floating−point option control. • Added Infinity and NaN floating point support. • Added ELF Symbol Visibility support. • Added setting OSABI value in ELF header directive. • Added Generate Makefile Dependencies option. • Added Unlimited Optimization Passes option. • Added %IFN and %ELIFN support. • Added Logical Negation Operator. • Enhanced Stack Relative Preprocessor Directives. 251 • Enhanced ELF Debug Formats. • Enhanced Send Errors to a File option. • Added SSSE3, SSE4.1, SSE4.2, SSE5 support. • Added a large number of additional instructions. • Significant performance improvements.−w+warning and −w−warning can now be written as –Wwarning and –Wno−warning, respectively. See section 2.1.25. • Add −w+error to treat warnings as errors. See section 2.1.25. • Add −w+all and −w−all to enable or disable all suppressible warnings. See section 2.1.25. C.2 NASM 0.98 Series The 0.98 series was the production versions of NASM from 1999 to 2007. C.2.1 Version 0.98.39 • fix buffer overflow • fix outas86’s .bss handling • \"make spotless\" no longer deletes config.h.in.%(el)if(n)idn insensitivity to string quotes difference (#809300). • (nasm.c)__OUTPUT_FORMAT__ changed to string value instead of symbol. C.2.2 Version 0.98.38 • Add Makefile for 16−bit DOS binaries under OpenWatcom, and modify mkdep.pl to be able to generate completely pathless dependencies, as required by OpenWatcom wmake (it supports path • Fix the STR instruction. • Fix the ELF output format, which was broken under certain circumstances due to the addition of • Quick−fix Borland format debug−info for −f obj • Fix for %rep with no arguments (#560568) • Fix concatenation of preprocessor function call (#794686) • Fix long label causes coredump (#677841)Use autoheader as well as autoconf to keep configure from generating ridiculously long command • Make sure that all of the formats which support debugging output actually will suppress debugging−g not specified. C.2.3 Version 0.98.37 • Paths given in −I switch searched for incbin–ed as well as %include–ed files. • Added stabs debugging for the ELF output format, patch from Martin Wawro. • Fix output/outbin.c to allow origin > 80000000h. • Make −U switch work. 252 • Fix the use of relative offsets with explicit prefixes, e.g. a32 loop foo. • Remove backslash(). • Fix the SMSW and SLDT instructions. • −O2 and −O3 are no longer aliases for −O10 and −O15. If you mean the latter, please say so! :) C.2.4 Version 0.98.36 • Update rdoff – librarian/archiver – common rec – docs! • Fix signed/unsigned problems. • Fix JMP FAR label and CALL FAR label. • Add new multisection support – map files – fix align bug • Fix sysexit, movhps/movlps reg,reg bugs in insns.datQ or O suffixes indicate octal • Support Prescott new instructions (PNI). • Cyrix XSTORE instruction. C.2.5 Version 0.98.35 • Fix build failure on 16−bit DOS (Makefile.bc3 workaround for compiler bug.) • Fix dependencies and compiler warnings. • Add \"const\" in a number of places. • Add –X option to specify error reporting format (use –Xvc to integrate with Microsoft Visual Studio.) • Minor changes for code legibility. • Drop use of tmpnam() in rdoff (security fix.) C.2.6 Version 0.98.34 • Correct additional address−size vs. operand−size confusions. • Generate dependencies for all Makefiles automatically.Add support for unimplemented (but theoretically available) registers such as tr0 and cr5. Segment • Correct some disassembler bugs related to redundant address−size prefixes. Some work still • Correctly generate an error for things like \"SEG eax\". • Add the JMPE instruction, enabled by \"CPU IA64\". • Correct compilation on newer gcc/glibc platforms. • Issue an error on things like \"jmp far eax\". C.2.7 Version 0.98.33 • New __NASM_PATCHLEVEL__ and __NASM_VERSION_ID__ standard macros to round out the • New keyword \"strict\" to disable the optimization of specific operands. • Fix the handing of size overrides with JMP instructions (instructions such as \"jmp dword foo\".) 253 • Fix the handling of \"ABSOLUTE label\", where \"label\" points into a relocatable segment. • Fix OBJ output format with lots of externs. • More documentation updates. • Add –Ov option to get verbose information about optimizations. • Undo a braindead change which broke %elif directives. • Makefile updates. C.2.8 Version 0.98.32 • Fix NASM crashing when %macro directives were left unterminated. • Lots of documentation updates. • Complete rewrite of the PostScript/PDF documentation generator. • The MS Visual C++ Makefile was updated and corrected. • Recognize .rodata as a standard section name in ELF. • Fix some obsolete Perl4−isms in Perl scripts. • Fix configure.in to work with autoconf 2.5x. • Fix a couple of \"make cleaner\" misses. • Make the normal \"./configure && make\" work with Cygwin. C.2.9 Version 0.98.31 • Correctly build in a separate object directory again. • Derive all references to the version number from the version file. • New standard macros __NASM_SUBMINOR__ and __NASM_VER__ macros. • Lots of Makefile updates and bug fixes. • New %ifmacro directive to test for multiline macros. • Documentation updates. • Fixes for 16−bit OBJ format output. • Changed the NASM environment variable to NASMENV. C.2.10 Version 0.98.30 • Changed doc files a lot: completely removed old READMExx and Wishlist files, incorporating all • I waited a long time to rename zoutieee.c to (original) outieee.c • moved all output modules to output/ subdirectory. • Added ’make strip’ target to strip debug info from nasm & ndisasm. • Added INSTALL file with installation instructions. • Added –v option description to nasm man. • Added dist makefile target to produce source distributions. • 16−bit support for ELF output format (GNU extension, but useful.) 254 C.2.11 Version 0.98.28 • Fastcooked this for Debian’s Woody release: Frank applied the INCBIN bug patch to 0.98.25alt and C.2.12 Version 0.98.26 • Reorganised files even better from 0.98.25alt C.2.13 Version 0.98.25alt • Prettified the source tree. Moved files to more reasonable places. • Added findleak.pl script to misc/ directory. • Attempted to fix doc. C.2.14 Version 0.98.25 • Line continuation character \\. • Docs inadvertantly reverted – \"dos packaging\". C.2.15 Version 0.98.24p1 • FIXME: Someone, document this please. C.2.16 Version 0.98.24 • Documentation – Ndisasm doc added to Nasm.doc. C.2.17 Version 0.98.23 • Attempted to remove rdoff version1 • Lino Mastrodomenico’s patches to preproc.c (%$$ bug?). C.2.18 Version 0.98.22 • Update rdoff2 – attempt to remove v1. C.2.19 Version 0.98.21 • Optimization fixes. C.2.20 Version 0.98.20 • Optimization fixes. C.2.21 Version 0.98.19 • H. J. Lu’s patch back out. C.2.22 Version 0.98.18 • Added \".rdata\" to \"−f win32\". C.2.23 Version 0.98.17 • H. J. Lu’s \"bogus elf\" patch. (Red Hat problem?) C.2.24 Version 0.98.16 • Fix whitespace before \"[section ...\" bug. 255 C.2.25 Version 0.98.15 • Rdoff changes (?). • Fix fixes to memory leaks. C.2.26 Version 0.98.14 • Fix memory leaks. C.2.27 Version 0.98.13 • There was no 0.98.13 C.2.28 Version 0.98.12 • Update optimization (new function of \"−O1\") • Changes to test/bintest.asm (?). C.2.29 Version 0.98.11 • Optimization changes. • Ndisasm fixed. C.2.30 Version 0.98.10 • There was no 0.98.10 C.2.31 Version 0.98.09 • Add multiple sections support to \"−f bin\". • Changed GLOBAL_TEMP_BASE in outelf.c from 6 to 15. • Add \"−v\" as an alias to the \"−r\" switch. • Remove \"#ifdef\" from Tasm compatibility options. • Remove redundant size−overrides on \"mov ds, ex\", etc. • Fixes to SSE2, other insns.dat (?). • Enable uppercase \"I\" and \"P\" switches. • Case insinsitive \"seg\" and \"wrt\". • Update install.sh (?). • Allocate tokens in blocks. • Improve \"invalid effective address\" messages. C.2.32 Version 0.98.08 • Add \"%strlen\" and \"%substr\" macro operators • Fixed broken c16.mac. • Unterminated string error reported. • Fixed bugs as per 0.98bf C.2.33 Version 0.98.09b with John Coffman patches released 28−Oct−2001 Changes from 0.98.07 release to 98.09b as of 28−Oct−2001 256 • More closely compatible with 0.98 when –O0 is implied or specified. Not strictly identical, since • More forgiving with the PUSH instruction. 0.98 requires a size to be specified always. 0.98.09b will • Changed definition of the optimization flag: C.2.34 Version 0.98.07 released 01/28/01 • Added Stepane Denis’ SSE2 instructions to a *working* version of the code – some earlier versions • Cosmetic modifications to nasm.c, nasm.h, AUTHORS, MODIFIED C.2.35 Version 0.98.06f released 01/18/01 • Add \"metalbrain\"s jecxz bug fix in insns.dat • Alter nasmdoc.src to match – version \"0.98.06f\" C.2.36 Version 0.98.06e released 01/09/01 • Removed the \"outforms.h\" file – it appears to be someone’s old backup of \"outform.h\". version • fbk – finally added the fix for the \"multiple %includes bug\", known since 7/27/99 – reported • Nelson Rush resigns from the group. Big thanks to Nelson for his leadership and enthusiasm in • fbk – [list +], [list –] directives – ineptly implemented, should be re−written or removed, perhaps. • Brian Raiter / fbk – \"elfso bug\" fix – applied to aoutb format as well – testing might be desirable... • James Seter – –postfix, –prefix command line switches. • Yuri Zaporozhets – rdoff utility changes. C.2.37 Version 0.98p1 • GAS−like palign (Panos Minos) 257 • FIXME: Someone, fill this in with details C.2.38 Version 0.98bf (bug−fixed) • Fixed – elf and aoutb bug – shared libraries – multiple \"%include\" bug in \"−f obj\" – jcxz, jecxz bug – C.2.39 Version 0.98.03 with John Coffman’s changes released 27−Jul−2000 • Added signed byte optimizations for the 0x81/0x83 class of instructions: ADC, ADD, AND, CMP, OR, • Added multi−pass JMP and Jcc offset optimization. Offsets on forward references will preferentially • Added a new directive: ’cpu XXX’, where XXX is any of: 8086, 186, 286, 386, 486, 586, pentium, 686, • Added to ’standard.mac’, the \"use16\" and \"use32\" forms of the \"bits 16/32\" directive. This is nothing • Changed label allocation from 320/32 (10000 labels @ 200K+) to 32/37 (1000 labels); makes running C.2.40 Version 0.98.03 \"Integrated patchfile 0.98−0.98.01. I call this version 0.98.03 for historical reasons: 0.98.02 was trashed.\" • Kendall Bennett’s SciTech MGL changesNote that you must define \"TASM_COMPAT\" at compile−time to get the Tasm Ideal Mode • All changes can be compiled in and out using the TASM_COMPAT macros, and when compiled • standard.mac, macros.c: Added macros to ignore TASM directives before first include • nasm.h: Added extern declaration for tasm_compatible_mode • nasm.c: Added global variable tasm_compatible_mode • Added command line switch for TASM compatible mode (−t) • Changed version command line to reflect when compiled with TASM additionsAdded response file processing to allow all arguments on a single line (response file is @resp rather • labels.c: Changes islocal() macro to support TASM style @@local labels. • Added islocalchar() macro to support TASM style @@local labels. 258 • parser.c: Added support for TASM style memory references (ie: mov [DWORD eax],10 rather than the • preproc.c: Added new directives, %arg, %local, %stacksize to directives table • Added support for TASM style directives without a leading % symbol. • Integrated a block of changes from Andrew Zabolotny <bit@eltech.ru>:A new keyword %xdefine and its case−insensitive counterpart %ixdefine. They work almost the same way as %define and %idefine but expand the definition immediately, not on the invocation. Something like a cross between %define and %assign. The \"x\" suffix stands for \"eXpand\", so \"xdefine\" can be deciphered as \"expand−and−define\". Thus you can do things like this: %assign ofs 0 Changed the place where the expansion of %$name macros are expanded. Now they are converted %macro abc 1 Now last line will be expanded into \"hello\" as expected. This also allows for lots of goodies, a good • Added a check for \"cstk\" in smacro_defined() before calling get_ctx() – this allows for things like: to work without warnings even in no context. • Added a check for \"cstk\" in %if*ctx and %elif*ctx directives – this allows to use %ifctx without excessive warnings. If there is no active context, %ifctx goes through \"false\" branch. • Removed \"user error: \" prefix with %error directive: it just clobbers the output and has absolutely no functionality. Besides, this allows to write macros that does not differ from built−in functions in • Added expansion of string that is output by %error directive. Now you can do things like: %define hello(x) Hello, x! Same happened with %include directive. • Now all directives that expect an identifier will try to expand and concatenate everything without 259 %define %$abc hello would produce \"incorrect\" output: last line will expand to hello goodbyehello Not quite what you expected, eh? :−) The answer is that preprocessor treats the %define construct as if it would be %define __ %$abc goodbye (note the white space between __ and %$abc). After my \"fix\" it will \"correctly\" expand into goodbye as expected. Note that I use quotes around words \"correct\", \"incorrect\" etc because this is rather a Same change was applied to:,%macro,%imacro,%define,%idefine,%xdefine,%ixdefine, %assign,%iassign,%undef • A new directive [WARNING {+|−}warning−id] have been added. It works only if the assembly phase is • A new warning type: macro−selfref. By default this warning is disabled; when enabled NASM warns [WARNING macro−selfref] will produce a warning, but if we remove the first line we won’t see it anymore (which is The Right • Added a \"error\" routine to preprocessor which always will set ERR_PASS1 bit in severity_code. This • Added the %+ operator in single−line macros for concatenating two identifiers. Usage example: After first expansion, third line will become \"_myfunc\". After this expansion is performed again so it • Now if preprocessor is in a non−emitting state, no warning or error will be emitted. Example: 260 even macro−parameter references %1 or local Context−local variables on expansion as a last resort are looked up in outer contexts. For example, %push outer will expand correctly the fourth line to [esp]; if we’ll define another %$a inside the \"inner\" context, it won’t look in outer contexts. This behaviour is needed because we don’t want nested contexts to act on already defined local %define %$arg1 [esp+4] In this example the \"if\" mmacro enters into the \"if\" context, so %$arg1 is not valid anymore inside • Fixed memory leak in %undef. The origline wasn’t freed before exiting on success. • Fixed trap in preprocessor when line expanded to empty set of tokens. This happens, for example, in #define SOMETHING C.2.41 Version 0.98 All changes since NASM 0.98p3 have been produced by H. Peter Anvin <hpa@zytor.com>. • The documentation comment delimiter is • Allow EQU definitions to refer to external labels; reported by Pedro Gimeno. • Re−enable support for RDOFF v1; reported by Pedro Gimeno. • Updated License file per OK from Simon and Julian. C.2.42 Version 0.98p9 • Update documentation (although the instruction set reference will have to wait; I don’t want to hold • Verified that the NASM implementation of the PEXTRW and PMOVMSKB instructions is correct. The • Fix handling of implicit sizes in PSHUFW and PINSRW, reported by Stefan Hoffmeister. 261 • Resurrect the –s option, which was removed when changing the diagnostic output to stdout. C.2.43 Version 0.98p8 • Fix for \"DB\" when NASM is running on a bigendian machine. • Invoke insns.pl once for each output script, making Makefile.in legal for \"make –j\". • Improve the Unix configure−based makefiles to make package creation easier.Included an RPM .spec file for building RPM (RedHat Package Manager) packages on Linux or Unix • Fix Makefile dependency problems. • Change src/rdsrc.pl to include sectioning information in info output; required for install−info to work.Updated the RDOFF distribution to version 2 from Jules; minor massaging to make it compile in my • Split doc files that can be built by anyone with a Perl interpreter off into a separate archive. • \"Dress rehearsal\" release! C.2.44 Version 0.98p7 • Fixed opcodes with a third byte−sized immediate argument to not complain if given \"byte\" on the • Allow %undef to remove single−line macros with arguments. This matches the behaviour of #undef in the C preprocessor. • Allow –d, –u, –i and –p to be specified as –D, –U, –I and –P for compatibility with most C compilers • Minor cleanups. • Went through the list of Katmai instructions and hopefully fixed the (rather few) mistakes in it.(Hopefully) fixed a number of disassembler bugs related to ambiguous instructions (disambiguated • Fix for bug reported by Mark Junger: \"call dword 0x12345678\" should work and may add an OSP • Fix for environments when \"stderr\" isn’t a compile−time constant. C.2.45 Version 0.98p6 • Took officially over coordination of the 0.98 release; so drop the p3.x notation. Skipped p4 and p5 to • Update the documentation; however, it still doesn’t include documentation for the various new • Recognize \"idt\" or \"centaur\" for the –p option to ndisasm.Changed error messages back to stderr where they belong, but add an –E option to redirect them • –M option to generate Makefile dependencies (based on code from Alex Verstak.)%undef preprocessor directive, and –u option, that undefines a single−line macro. • OS/2 Makefile (Mkfiles/Makefile.os2) for Borland under OS/2; from Chuck Crayne. 262 • Various minor bugfixes (reported by): – Dangling %s in preproc.c (Martin Junker) • THERE ARE KNOWN BUGS IN SSE AND THE OTHER KATMAI INSTRUCTIONS. I am on a trip and didn’t • Updated the License file per agreement with Simon and Jules to include a GPL distribution clause. C.2.46 Version 0.98p3.7 • (Hopefully) fixed the canned Makefiles to include the outrdf2 and zoutieee modules. • Renamed changes.asm to changed.asm. C.2.47 Version 0.98p3.6 • Fixed a bunch of instructions that were added in 0.98p3.5 which had memory operands, and the C.2.48 Version 0.98p3.5 • Merged in changes from John S. Fine’s 0.98−J5 release. John’s based 0.98−J5 on my 0.98p3.3 • Expanded the instructions flag field to a long so we can fit more flags; mark SSE (KNI) and AMD or • Fix the \"PRIV\" flag on a bunch of instructions, and create new \"PROT\" flag for protected−mode−only • Added AMD−only SYSCALL and SYSRET instructions. • Make SSE actually work, and add new Katmai MMX instructions.Added a –p (preferred vendor) option to ndisasm so that it can distinguish e.g. Cyrix opcodes also ndisasm −p cyrix aliased.bin • Added a bunch of Cyrix−specific instructions. C.2.49 Version 0.98p3.4 • Made at least an attempt to modify all the additional Makefiles (in the Mkfiles directory). I can’t test • DOS DJGPP+\"Opus Make\" Makefile from John S. Fine. • changes.asm changes from John S. Fine. C.2.50 Version 0.98p3.3 • Patch from Conan Brink to allow nesting of %rep directives. • If we’re going to allow INT01 as an alias for INT1/ICEBP (one of Jules 0.98p3 changes), then we • Updated changes.asm to include the latest changes. 263 • Tried to clean up the <CR>s that had snuck in from a DOS/Windows environment into my Unix • We would silently generate broken tools if insns.dat wasn’t sorted properly. Change insns.pl so that • Fix bug in insns.pl (introduced by me) which would cause conditional instructions to have an extra C.2.51 Version 0.98p3.2 • Merged in John S. Fine’s changes from his 0.98−J4 prerelease; see http://www.csoft.net/cz/johnfine/Changed previous \"spotless\" Makefile target (appropriate for distribution) to \"distclean\", and added • Removed BASIC programs from distribution. Get a Perl interpreter instead (see below.) • Calling this \"pre−release 3.2\" rather than \"p3−hpa2\" because of John’s contributions.Actually link in the IEEE output format (zoutieee.c); fix a bunch of compiler warnings in that file. Note C.2.52 Version 0.98p3−hpa • Merged nasm098p3.zip with nasm−0.97.tar.gz to create a fully buildable version for Unix systems • Changed insns.pl to create the instruction tables in nasm.h and names.c, so that a new instruction • Added the following new instructions: SYSENTER, SYSEXIT, FXSAVE, FXRSTOR, UD1, UD2 (the latter • MAX_SYMBOL was defined to be 9, but LOADALL286 and LOADALL386 are 10 characters long. Now • A note on the BASIC programs included: forget them. insns.bas is already out of date. Get yourself a C.2.53 Version 0.98 pre−release 3 • added response file support, improved command line handling, new layout help screenfixed limit checking bug, ’OUT byte nn, reg’ bug, and a couple of rdoff related bugs, updated Wishlist; C.2.54 Version 0.98 pre−release 2 • fixed bug in outcoff.c to do with truncating section names longer than 8 characters, referencing C.2.55 Version 0.98 pre−release 1 • Fixed a bug whereby STRUC didn’t work at all in RDF. • Fixed a problem with group specification in PUBDEFs in OBJ. • Improved ease of adding new output formats. Contribution due to Fox Cutter.Fixed a bug in relocations in the ‘bin’ format: was showing up when a relocatable reference crossed 264 • Fixed a bug in local labels: local−label lookups were inconsistent between passes one and two if an • Fixed a seg−fault in the preprocessor (again) which happened when you use a blank line as the first • Fixed a stale−pointer bug in the handling of the NASM environment variable. Thanks to Thomas • ELF had a hard limit on the number of sections which caused segfaults when transgressed. Fixed. • Added ability for ndisasm to read from stdin by using ‘−’ as the filename. • ndisasm wasn’t outputting the TO keyword. Fixed.Fixed error cascade on bogus expression in %if – an error in evaluation was causing the entire %if to be discarded, thus creating trouble later when the %else or %endif was encountered. • Forward reference tracking was instruction−granular not operand− granular, which was causing • All messages now appear on stdout, as sending them to stderr serves no useful purpose other than • Fixed the problem with EQUs pointing to an external symbol – this now generates an error message. • Allowed multiple size prefixes to an operand, of which only the first is taken into account.Incorporated John Fine’s changes, including fixes of a large number of preprocessor bugs, some • Reformatted a lot of the source code to be more readable. Included ’coding.txt’ as a guideline for • Stopped nested %reps causing a panic – they now cause a slightly more friendly error message instead. • Fixed floating point constant problems (patch by Pedro Gimeno) • Fixed the return value of insn_size() not being checked for –1, indicating an error. • Incorporated 3Dnow! instructions. • Fixed the ’mov eax, eax + ebx’ bug. • Fixed the GLOBAL EQU bug in ELF. Released developers release 3. • Incorporated John Fine’s command line parsing changes • Incorporated David Lindauer’s OMF debug supportMade changes for LCC 4.0 support (__NASM_CDecl__, removed register size specification warning when sizes agree). C.3 NASM 0.9 Series Revisions before 0.98. C.3.1 Version 0.97 released December 1997 • This was entirely a bug−fix release to 0.96, which seems to have got cursed. Silly me. 265 • Fixed stupid mistake in OBJ which caused ‘MOV EAX,<constant>’ to fail. Caused by an error in the • ndisasm hung at EOF when compiled with lcc on Linux because lcc on Linux somehow breaks feof(). • A heading in the documentation was missing due to a markup error in the indexing. Fixed.Fixed failure to update all pointers on realloc() within extended− operand code in parser.c. Was • Fixed a subtle preprocessor bug whereby invoking one multi−line macro on the first line of the • Added internal.doc back in to the distribution archives – it was missing in 0.96 *blush*Fixed bug causing 0.96 to be unable to assemble its own test files, specifically objtest.asm. *blush • Fixed seg−faults and bogus error messages caused by mismatching %rep and %endrep within multi−line macro definitions. • Fixed a problem with buffer overrun in OBJ, which was causing corruption at ends of long PUBDEF • Separated DOS archives into main−program and documentation to reduce download size. C.3.2 Version 0.96 released November 1997 • Fixed a bug whereby, if ‘nasm sourcefile’ would cause a filename collision warning and put output • Fixed minor instruction table problems: FUCOM and FUCOMP didn’t have two−operand forms; • Fixed a problem with the local−label mechanism, whereby strange types of symbol (EQUs, • Fixed a bug whereby the stub preprocessor didn’t communicate with the listing file generator, so • Merged ‘os2’ object file format back into ‘obj’, after discovering that ‘obj’ _also_ shouldn’t have a • Removed the fixed−size temporary storage in the evaluator. Very very long expressions (like ‘mov • Fixed a bug involving segfaults on disassembly of MMX instructions, by changing the meaning of one • Fixed some buffer overrun problems with large OBJ output files. Thanks to DJ Delorie for the bug 266 • Made preprocess−only mode actually listen to the %line markers as it prints them, so that it can report errors more sanely. • Re−designed the evaluator to keep more sensible track of expressions involving forward references: mov ax,foo | bar • Added the ALIGN and ALIGNB standard macros. • Added PIC support in ELF: use of WRT to obtain the four extra relocation types needed.Added the ability for output file formats to define their own extensions to the GLOBAL, COMMON and • Implemented common−variable alignment, and global−symbol type and size declarations, in ELF.Implemented NEAR and FAR keywords for common variables, plus far−common element size • Added a feature whereby EXTERNs and COMMONs in OBJ can be given a default WRT specification • Transformed the Unix NASM archive into an auto−configuring package.Added a sanity−check for people applying SEG to things which are already segment bases: this • Added the ability, in OBJ format, to deal with ‘MOV EAX,<segment>’ type references: OBJ doesn’t • Added the ability to specify sections’ alignment requirements in Win32 object files and pure binary • Added preprocess−time expression evaluation: the %assign (and %iassign) directive and the bare %if (and %elif) conditional. Added relational operators to the evaluator, for use only in %if constructs: the standard relationals = < > <= >= <> (and C−like synonyms == and !=) plus • Added a preprocessor repeat construct: %rep / %exitrep / %endrep. • Added the __FILE__ and __LINE__ standard macros.Added a sanity check for number constants being greater than 0xFFFFFFFF. The warning can be • Added the %0 token whereby a variadic multi−line macro can tell how many parameters it’s been • Added %rotate, allowing multi−line macro parameters to be cycled. • Added the ‘*’ option for the maximum parameter count on multi−line macros, allowing them to take • Added the ability for the user−level forms of EXTERN, GLOBAL and COMMON to take more than one • Added the IMPORT and EXPORT directives in OBJ format, to deal with Windows DLLs.Added some more preprocessor %if constructs: %ifidn / %ifidni (exact textual identity), and %ifid / %ifnum / %ifstr (token type testing). 267 • Added the ability to distinguish SHL AX,1 (the 8086 version) from SHL AX,BYTE 1 (the • Added NetBSD/FreeBSD/OpenBSD’s variant of a.out format, complete with PIC shared library • Changed NASM’s idiosyncratic handling of FCLEX, FDISI, FENI, FINIT, FSAVE, FSTCW, FSTENV, and • Improved the flexibility of ABSOLUTE: you can now give it an expression rather than being restricted • Added the ability for a variable to be declared as EXTERN multiple times, and the subsequent • We now allow instruction prefixes (CS, DS, LOCK, REPZ etc) to be alone on a line (without a following • Improved sanity checks on whether the arguments to EXTERN, GLOBAL and COMMON are valid • Added misc/exebin.mac to allow direct generation of .EXE files by hacking up an EXE header using • ndisasm forgot to check whether the input file had been successfully opened. Now it does. Doh! • Added the Cyrix extensions to the MMX instruction set.Added a hinting mechanism to allow [EAX+EBX] and [EBX+EAX] to be assembled differently. This is • Added support for the PharLap OMF extension for 4096−byte segment alignment. C.3.3 Version 0.95 released July 1997 • Fixed yet another ELF bug. This one manifested if the user relied on the default segment, and • Added makefiles (for NASM and the RDF tools) to build Win32 console apps under Symantec C++. • Added ‘macros.bas’ and ‘insns.bas’, QBasic versions of the Perl scripts that convert ‘standard.mac’ • Changed the diassembled forms of the conditional instructions so that JB is now emitted as JC, and • Added ‘@’ to the list of valid characters to begin an identifier with. • Documentary changes, notably the addition of the ‘Common Problems’ section in nasm.doc. • Fixed a bug relating to 32−bit PC−relative fixups in OBJ.Fixed a bug in perm_copy() in labels.c which was causing exceptions in cleanup_labels() on some • Positivity sanity check in TIMES argument changed from a warning to an error following a further • Changed the acceptable limits on byte and word operands to allow things like ‘~10111001b’ to work. 268 • Fixed a major problem in the preprocessor which caused seg−faults if macro definitions contained • Fixed inadequate error checking on the commas separating the arguments to ‘db’, ‘dw’ etc. • Fixed a crippling bug in the handling of macros with operand counts defined with a ‘+’ modifier.Fixed a bug whereby object file formats which stored the input file name in the output file (such as • Removed [INC] and [INCLUDE] support for good, since they were obsolete anyway.Fixed a bug in OBJ which caused all fixups to be output in 16−bit (old−format) FIXUPP records, rather • Added, tentatively, OS/2 object file support (as a minor variant on OBJ). • Updates to Fox Cutter’s Borland C makefile, Makefile.bc2. • Removed a spurious second fclose() on the output file.Added the ‘−s’ command line option to redirect all messages which would go to stderr (errors, help • Added the ‘−w’ command line option to selectively suppress some classes of assembly warning • Added the ‘−p’ pre−include and ‘−d’ pre−define command−line options. • Added an include file search path: the ‘−i’ command line option.Fixed a silly little preprocessor bug whereby starting a line with a ‘%!’ environment−variable • Added the long−awaited listing file support: the ‘−l’ command line option.Fixed a problem with OBJ format whereby, in the absence of any explicit segment definition, • Added the NASM environment variable.From this version forward, Win32 console−mode binaries will be included in the DOS distribution in • Added ‘return 0;’ to test/objlink.c to prevent compiler warnings. • Added the __NASM_MAJOR__ and __NASM_MINOR__ standard defines.Added an alternative memory−reference syntax in which prefixing an operand with ‘&’ is equivalent • Errors in pass two now cause the program to return a non−zero error code, which they didn’t before.Fixed the single−line macro cycle detection, which didn’t work at all on macros with no parameters • Fixed the implementation of WRT, which was too restrictive in that you couldn’t do ‘mov ax,[di+abc C.3.4 Version 0.94 released April 1997 • Major item: added the macro processor. 269 • Added undocumented instructions SMI, IBTS, XBTS and LOADALL286. Also reorganised CMPXCHG • Fixed two more stupid bugs in ELF, which were causing ‘ld’ to continue to seg−fault in a lot of • Fixed a seg−fault in the label manager.Stopped FBLD and FBSTP from _requiring_ the TWORD keyword, which is the only option for BCD • Ensured FLDCW, FSTCW and FSTSW can cope with the WORD keyword, if anyone bothers to provide • Some forms of FDIV/FDIVR and FSUB/FSUBR were still inverted: a vestige of a bug that I thought had • Another minor phase error (insofar as a phase error can _ever_ be minor) fixed, this one occurring in rol ax,forward_reference The number supplied to TIMES is now sanity−checked for positivity, and also may be greater than • Added Watcom C makefiles, and misc/pmw.bat, donated by Dominik Behr. • Added the INCBIN pseudo−opcode.Due to the advent of the preprocessor, the [INCLUDE] and [INC] directives have become obsolete. • Fixed a bug in OBJ format, which caused incorrect object records to be output when absolute labels • Updates to RDOFF subdirectory, and changes to outrdf.c. C.3.5 Version 0.93 released January 1997 This release went out in a great hurry after semi−crippling bugs were found in 0.92. • Really did fix the stack overflows this time. *blush* • Had problems with EA instruction sizes changing between passes, when an offset contained a • Stupid bug in the revised ELF section generation fixed (associated string−table section for .symtab • Included a new Borland C makefile, Makefile.bc2, donated by Fox Cutter <lmb@comtch.iea.com>. C.3.6 Version 0.92 released January 1997 • The FDIVP/FDIVRP and FSUBP/FSUBRP pairs had been inverted: this was fixed. This also affected the • Fixed a bug regarding 32−bit effective addresses of the form [other_register+ESP]. • Documentary changes, notably documentation of the fact that Borland Win32 compilers use ‘obj’ 270 • Fixed the COMENT record in OBJ files, which was formatted incorrectly. • Fixed a bug causing segfaults in large RDF files.OBJ format now strips initial periods from segment and group definitions, in order to avoid • Fixed a bug in disassembling far calls and jumps in NDISASM. • Added support for user−defined sections in COFF and ELF files.Compiled the DOS binaries with a sensible amount of stack, to prevent stack overflows on any • Fixed a bug in handling of files that do not terminate in a newline. C.3.7 Version 0.91 released November 1996 • Loads of bug fixes. • Support for RDF added. • Support for DBG debugging format added. • Support for 32−bit extensions to Microsoft OBJ format added. • Revised for Borland C: some variable names changed, makefile added. • LCC support revised to actually work. • JMP/CALL NEAR/FAR notation added. • ‘a16’, ‘o16’, ‘a32’ and ‘o32’ prefixes added. • Range checking on short jumps implemented. • MMX instruction support added. • Negative floating point constant support added. • Memory handling improved to bypass 64K barrier under DOS.$ prefix to force treatment of reserved words as identifiers added. • Default−size mechanism for object formats added. • Compile−time configurability added.#, @, ~ and c{?} are now valid characters in labels. • −e and −k options in NDISASM added. C.3.8 Version 0.90 released October 1996 First release version. First support for object file output. Other changes from previous version (0.3x) too 271 272 Appendix D: Building NASM from Source The source code for NASM is available from our website, http://wwww.nasm.us/, see section E.1. D.1 Building from a Source Archive The source archives available on the web site should be capable of building on a number of platforms.sh), run: sh configure configure; see sh configure −−help. A set of Makefiles for some other environments are also available; please see the file. To build the installer for the Windows platform, you will need the Nullsoft Scriptable Installer, NSIS, installed. D.2 Building from the git Repository The NASM development tree is kept in a source code repository using the git distributed source control system. The link is available on the website. This is recommended only to participate in thegit repository you will need a Perl and, if building on a Unix system, GNU autoconf. configure script and then build as listed above. 273 274 Appendix E: Contact Information E.1 Website NASM has a website at http://www.nasm.us/. New releases, release candidates, and daily development snapshots of NASM are available from the E.1.1 User Forums Users of NASM may find the Forums on the website useful. These are, however, not frequented much by E.1.2 Development Community The development of NASM is coordinated primarily though the nasm−devel mailing list. If you wish to participate in development of NASM, please join this mailing list. Subscription links and archives of past E.2 Reporting Bugs To report bugs in NASM, please use the bug tracker at http://www.nasm.us/ (click on \"Bug Tracker\"), or if that fails then through one of the contacts in section E.1.please make sure your bug report includes the following information: • What operating system you’re running NASM under. Linux, FreeBSD, NetBSD, MacOS X, Win16, • If you compiled your own executable from a source archive, compiled your own executable from, used the standard distribution binaries from the website, or got an executable from somewhere else (e.g. a Linux distribution.) If you were using a locally built executable, try to • Which version of NASM you’re using, and exactly how you invoked it. Give us the precise commandNASMENV environment variable if any. • Which versions of any supplementary programs you’re using, and how you invoked them. If the • If at all possible, send us a NASM source file which exhibits the problem. If this causes copyrightonly for the purposes of debugging NASM, and that we will delete all our copies of it as soon as we have found and fixed the bug or bugs in question; and secondly, wenot to be mailed large chunks of code anyway. The smaller the file, the better. A three−line sample file that does nothing useful except demonstrate the problem is much easier to 275 work with than a fully fledged ten−thousand−line program. (Of course, some errors do only crop up in large files, so this may not be possible.) • A description of what the problem actually is. ‘It doesn’t work’ is not a helpful description! Please describe exactly what is happening that shouldn’t be, or what isn’t happening that should. Examplesshould be generating’; ‘the object file produced from this source code crashes my linker’; ‘the ninth byte of the output file is 66 and I think it should be 77 • If you believe the output file from NASM to be faulty, send it to us. That allows us to determine • Any other information or data files that might be helpful. If, for example, the problem involves NASMboth object files, so we can see what TASM is doing differently from us. 276 Index ! operator, unary 39 != operator 56 $$ token 38, 98 $ Here token 38 prefix 31, 35, 101 % operator 39 %! 67 %$ and %$$ prefixes 61 %% operator 39, 49 %+ 45 %? 45 %?? 45 %[ 45 & operator 39 && operator 56 * operator 39 + modifier 50 + operator binary 39 unary 39 − operator binary 39 unary 39 ..@ symbol prefix 41, 49 / operator 39 // operator 39 < operator 56 << operator 39 <= operator 56 <> operator 56 = operator 56 == operator 56 > operator 56 >= operator 56 >> operator 39 ? MASM syntax 32 ^ operator 39 ^^ operator 56 | operator 38 || operator 56 ~ operator 39 %0 parameter count 52 %00 52 %+1 and %−1 syntax 54 16−bit mode, versus 32−bit mode 75 64−bit displacement 128 64−bit immediate 127 option 23, 134 A16 31 a16 124 A32 31 a32 124 A64 31 a64 124 a86 27, 28 ABS 34, 76 ABSOLUTE 77, 86 addition 39 addressing, mixed−size 123 address−size prefixes 31 algebra 3471, 73, 83, 86 smart 73 ALIGNB 71 alignment in bin sections 83 in elf sections 97 in obj sections 86 in win32 sections 90 of elf common variables 99 ALIGNMODE 73 __ALIGNMODE__ 73 ALINK 103 alink.sourceforge.net 103 all 25 alloc 97 alternate register names 7373 ambiguity 28 BSD version 100 Linux version 99 aout 99 aoutb 100, 118 %arg 64 arg 110, 117 as86 100 assembler directives 75 assembly−time options 2346 ASSUME 28 AT 71 Autoconf 134 −b 133 bad−pragma 25 −−before 26 bin 20, 83 multisection 84 277 binary 35 binary files 32 bit shift 3975, 83 __BITS__ 68 bitwise AND 39 bitwise OR 38 bitwise XOR 39 block IFs 6376 bnd 25 boot loader 83 boot sector 131 Pascal 111 Win32 compilers 85 braces after % sign 54 around macro parameters 48 BSD 118 .bss 97, 99, 100 bug tracker 275275 BYTE 131 C calling convention 108, 115 C symbol names 106110, 113 c32.mac 117 CALL FAR 40 case sensitivity 27, 43, 44, 46, 48, 57, 87 changing sections 76 character constant 32, 36 character strings 35 circular references 4386 %clear 67 CodeView debugging format 95 colon 31 .COM 83, 105 comma 51 command−line 19, 83 commas in macro parameters 5097 COMMON 79, 85 elf extensions to 99 obj extensions to 88 Common Object File Format 95 common variables 79 alignment in elf 99 element size 88 comp.os.msdos.programmer 106 concatenating macro parameters 53 concatenating strings 47 condition codes as macro parameters 54 conditional assembly 55 conditional jumps 131 conditional−return macro 54 constants 35 context fall−through lookup 62 context stack 60, 63 context−local labels 61 context−local single−line macros 61 counting macro parameters 5280 CPUID 36 creating contexts 61 critical expression 32, 40, 46, 7791 −D option 23 −d option 23 daily development snapshots 27597, 99, 100 _DATA 107 data 99, 101 data structure 110, 11769 __DATE_NUM__ 69 DB 32, 36, 37 dbg 101 DD 32, 36, 37 DEBUG 80 debug information 21 debug information format 2169 decimal 35 declaring structures 7076 default 99 default macro parameters 51 default name 83WRT mechanism 88 %define 23, 43 defining sections 7647 %deftok 47 %depend 60 design goals 27 DevPac 32, 41 disabling listing expansion 54 division 39 DJGPP 95, 115103 DLL symbols exporting 87 importing 87 DO 32, 36, 37 DOS 22 278 DOS archive 32, 36, 37 .drectve 89 DT 32, 36, 37 DUP 29, 33 DW 32, 36, 37 DWORD 32 DY 32, 36 DZ 32 −E option 23 −e option 23, 134 effective addresses 31, 33 element size, in common variables 8897 shared libraries 16−bit code and 99 elf, debug formats and 9997 elf64 97 elfx32 97 %elif 55, 56, 57 %elifctx 56 %elifdef 56 %elifempty 58 %elifenv 58 %elifid 58 %elifidn 57 %elifidni 57 %elifmacro 56 %elifn 55, 57 %elifnctx 56 %elifndef 56 %elifnempty 58 %elifnenv 58 %elifnid 58 %elifnidn 57 %elifnidni 57 %elifnmacro 56 %elifnnum 58 %elifnstr 58 %elifntoken 58 %elifnum 58 %elifstr 58 %eliftoken 58 %else 55 endproc 110, 117 %endrep 58 ENDSTRUC 70, 77 environment 2732, 33 %error 66 error messages 22 error reporting format 21 escape sequences 3571 exact matches 5585, 103 EXE2BIN 105 EXE_begin 104 exebin.mac 104 exec 97 Executable and Linkable Format 97104 EXE_stack 104 %exitrep 59 EXPORT 87 export 101 exporting symbols 78 expressions 23, 38 extension 19, 8378 obj extensions to 88 rdf extensions to 101 extracting substrings 48 option 21 −f option 20, 83 far call 28 far common variables 88 far pointer 40111, 113 %fatal 66 __FILE__ 68 FLAT 86 flat memory model 115 flat−form binary 8381 __FLOAT__ 81 __float128h__ 37 __float128l__ 37 __float16__ 37 __float32__ 37 __float64__ 37 __float8__ 37 __float80e__ 37 __float80m__ 37 __FLOAT_DAZ__ 81 float−denorm 25 floating−point constants 37, 81 packed BCD constants 38 floating−point 28, 31, 32, 3725 __FLOAT_ROUND__ 81 float−toolong 25 float−underflow 25 follows= 84 format−specific directives 75 279 fp 74 frame pointer 108, 112, 115 FreeBSD 100, 118 FreeLink 103103 function 99, 101 functions C calling convention 108, 115 Pascal calling convention 112 −g option 21 git 273 GLOBAL 78 aoutb extensions to 98 elf extensions to 98 rdf extensions to 101 global offset table 11898 (G|L)POSTFIX 79 −−(g|l)postfix 26 (G|L)PREFIX 79 −−(g|l)prefix 26 gnu−elf−extensions 25 ..got 98 GOT relocations 119 GOT 98, 11898 GOTOFF relocations 119 ..gotpc 98 GOTPC relocations 119 ..gottpoff 98 graphics 32 greedy macro parameters 5086 groups 39 −h 133 hexadecimal 3599 hle 25 hybrid syntaxes 28 option 22 −i option 22, 134 %iassign 46 %idefine 43 %idefstr 47 %ideftok 47 IEND 71 %if 55, 56 %ifctx 56, 63 %ifdef 55 %ifempty 58 %ifenv 58 %ifid 57 %ifidn 57 %ifidni 57 %ifmacro 56 %ifn 55, 57 %ifnctx 56 %ifndef 56 %ifnempty 58 %ifnenv 58 %ifnid 58 %ifnidn 57 %ifnidni 57 %ifnmacro 56 %ifnnum 58 %ifnstr 58 %ifntoken 58 %ifnum 57 %ifstr 57 %iftoken 58 ifunc 74 ilog2() 74 ilog2c() 74 ilog2cw() 74 ilog2e() 74 ilog2f() 74 ilog2fw() 74 ilog2w() 74 %imacro 48 IMPORT 87 import library 87 importing symbols 7832, 36 %include 22, 59 include search path 22 including other files 59 inefficient code 131 infinite loop 3838 infinity 38 informational section 89 instances of structures 71 instruction list 137 integer functions 39, 74 integer logarithms 74 intel hex 84 Intel number formats 3899 ISTRUC 71 iterating over macro parameters 5284 %ixdefine 44 Jcc NEAR 131 JMP DWORD 123 jumps, mixed−size 123135 −−keep−all 27 −l option 20 280 label preceeding macro 52 label prefix 4151 .lbss 97 ld86 100 .ldata 97 LIBRARY 100 license 17 −−limit−X 26 %line 27, 66 __LINE__ 68 linker, free 103 a.out 99 as86 100 ELF 97 listing file 20 little−endian 3665 local labels 4125 logical AND 56 logical negation 39 logical OR 56 logical XOR 5697 −M option 20 Mach, object file format 95 Mach−O, object file format 9595 macho64 95 MacOS X 9548 macro indirection 45 macro library 22 macro parameters range 50 macro processor 4325 macro−local labels 4924 macros 33 macro−selfref 24 makefile dependencies 20 map files 84 MASM 27, 33, 85 option 20 memory models 28, 107 memory operand 32 memory references 27, 33 option 20 −MG option 20 Microsoft OMF 85 minifloat 37100 misc subdirectory 104, 110, 117 mixed−language program 106 mixed−size addressing 123 mixed−size instruction 123100 modulo operators 39 motorola s−records 84 option 21 −MQ option 21 MS−DOS 83 MS−DOS device drivers 106 option 21 multi−line macros 24, 48 multipass optimization 24 multiple section names 83 multiplication 39 macro 53 multisection 84 option 21 __NaN__ 38 NaN 38 NASM version 67 nasm version history 237 nasm version id 67 nasm version string 6885 nasm−devel 275 NASMENV 27 nasm −hf 20 __NASM_MAJOR__ 67 __NASM_MINOR__ 67 nasm.out 19 ___NASM_PATCHLEVEL__ 67 __NASM_SNAPSHOT__ 67 __NASM_SUBMINOR__ 67 __NASM_VER__ 68 __NASM_VERSION_ID__ 67 ndisasm 133 near call 28 near common variables 88 NetBSD 100, 118 new releases 27597 nobits 84, 97 NOBND 76 no_dead_strip 96 noexec 97 −−no−line 27, 67 .nolist 54 not−my−pragma 25 ‘nowait’ 2997 281 NSIS 273 Nullsoft Scriptable Installer 27325 numeric constants 32, 35 option 24 −o option 19, 133 O16 31 o16 124 O32 31 o32 125 O64 31 .OBJ 103 obj 85 object 99, 101 octal 35 OF_DEFAULT 20 OFFSET 28 OMF 85 omitted parameters 51 one’s complement 39 OpenBSD 100, 118 operands 31 operand−size prefixes 31 operating system 83 writing 123 operators 3883, 105, 106, 131 orphan−labels 25, 31 OS/2 85, 8697 other 24 other preprocessor directives 66 out of range, jumps 13180 output file format 20 output formats 8368 overlapping segments 3986 overloading multi−line macros 49 single−line macros 43 −P option 22 −p option 22, 60 paradox 40113 Pascal calling convention 11269 passes, assembly 22, 60 period 41 Perl PharLap 86 PIC 98, 100, 118 ..plt 98 PLT relocations 98, 120, 121 plt relocations 12161 position−independent code 98, 100, 11826 precedence 38 pre−defining macros 23, 44 preferred 39 pre−including files 22 preprocess−only mode 23 preprocessor 23, 33, 39, 43 preprocessor expressions 23 preprocessor loops 58 preprocessor variables 46 primitive directives 7585 private_extern 96 proc 101, 110, 117 procedure linkage table 98, 120, 121 processor mode 7584, 97 program entry point 88, 103 program origin 8399 pseudo−instructions 3225 PUBLIC 78, 85 pure binary 8360, 61 __QNaN__ 38 quick start 2732 −r 133 rdf 100 rdoff subdirectory 100 redirecting errors 2234, 76 relational operators 56 release candidates 275 Format 100 relocations, PIC−specific 98 removing contexts 61 renaming contexts 6233, 58 repeating 33, 5862 reporting bugs 27529, 32 RESD 32 RESO 32 RESQ 32 REST 32 282 RESW 32 RESY 32 RESZ 32 .rodata 97 %rotate 52 rotating macro parameters 52 option 22, 134 searching for include files 5976, 77 SECTALIGN 72 SECTION 76 elf extensions to 97 macho extensions to 95 win32 extensions to 89 section alignment in bin 83 in elf 97 in obj 86 in win32 90 section, bin extensions to 8339, 85 SEGMENT 76 elf extensions to 85 segment address 39 in bin 83 in obj 86 segment names, Borland Pascal 113 segment override 28, 31 segments 39 groups of 86 separator character 27 shared libraries 100, 118 shared library 98 command 52 SIB byte signed division 39 signed modulo 39 single−line macros 43 size, of symbols 9873 __SNaN__ 38 snapshots, daily development 275 Solaris x86 97121 sound 32 source−listing file 20 square brackets 27, 3384 STACK 85 stack relative preprocessor directives 6465 standard macro packages 73 standard macros 67 standardized section names 76, 89, 97, 99, 100 ..start 88, 103 start= 84 STATIC 79 stderr 22 stdout 22 %strcat 47 STRICT 40 string constant 32 string constants 36 string length 47 string manipulation in macros 4735 %strlen 47 STRUC 70, 77, 110, 117 stub preprocessor 2396 %substr 48 subtraction 39 suppressing preprocessing 23 switching between sections 7698 symbol sizes, specifying 98 symbol types, specifying 98 exporting from DLLs 87 importing from DLLs 87 synchronisation 134 .SYS 83, 106 −t 24 TASM 24 tasm 27, 8597 TBYTE 29 .tdata 97 test subdirectory 103 testing arbitrary numeric expressions 56 context stack 56 exact text identity 57 multi−line macro existence 56 single−line macro existence 55 token types 57 .text 97, 99, 100 _TEXT 107 thread local storage in elf 98 thread local storage in mach−o 9669 __TIME_NUM__ 69 TIMES 32, 33, 40, 131, 132 TLINK 105 tls 96, 97, 9898 283 trailing colon 3129, 32 type, of symbols 98 option 23 −u option 23, 133 unary operators 3923, 46 undefining macros 23 underscore, in C symbols 106 Unicode 36, 37 uninitialized 32 uninitialized storage 29 SCO 97 System V 97 UnixWare 9725 unknown−warning 25 %unmacro 55 unrolled loops 33 unsigned division 39 unsigned modulo 3927, 87 %use 60, 73 __USE_*__ 69 USE16 76, 86 USE32 76, 86 user 25 user−defined errors 66 user−level assembler directives 67 user−level directives 7569 __UTC_DATE_NUM__ 69 __UTC_TIME__ 69 __UTC_TIME_NUM__ 69 UTF−16 37 UTF−32 3736 __utf16__ 37 __utf16be__ 37 __utf16le__ 37 __utf32__ 37 __utf32be__ 37 __utf32le__ 37 −−v 26 −v option 26 VAL 103 valid characters 31 variable types 2826 version number of NASM 6784 Visual C++ 89 vstart= 84 −W option 24 −w option 24 %warning 66 [WARNING] 25, 81 warning classes 24 warnings 24 website 275 option 25 win64 91, 127 Win64 85, 89, 115 Windows 103 windows debugging formats 91 option 25 write 97 writing operating systems 12339, 85, 96, 98, 100 WRT ..got 119 WRT ..gotoff 119 WRT ..gotpc 119 WRT ..plt 121 WRT ..sym 120 WWW page 103 www.pcorner.com 103 −X option 21 x2ftp.oulu.fi 103 x32 97 %xdefine 44 −y option 26 −Z option 22 zext−reloc 25 284","libVersion":"0.2.3","langs":""}