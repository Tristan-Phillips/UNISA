{"path":"UNISA/98906 - BSc Science in Computing/COS3751 - Techniques of Artificial Intelligence/Telegram Notes/Materials/COS3751_2021_202_ALL_B.pdf","text":"BAR CODE Deﬁne Tomorrow. university of south africa Tutorial Letter 202/1/2021 Techniques of Artiﬁcial Intelligence COS3751 Semester 1 School of Computing This tutorial letter contains model solutions for assignment 02 COS3751/202/1/2021 ASSIGNMENT 2 Solution Total Marks: 150 Unique Assignment Number: 738958/763908 Study material: Chapters 5 and 6. You may skip sections 5.5, 5.6, and 5.7. Question 1: 13 Marks (1.1) (3)Clearly explain what a utility function is, and why it is used during adversarial searches. A utility function provides an indication of the apparent numerical value✓of a state (either terminal or non-terminal)✓s for player p. It is used to ﬁnd the best available move for a player✓. (1.2) (4)Is the ideal strategy only available if we have perfect information? Explain your answer. No✓. Agents can still get the ideal strategy when playing without all the information ✓. This means the ideal strategy includes the notion of limited information✓, however, an agent that has perfect information will most likely outperform and agent that has limited/imperfect information for the same problem✓. (1.3) (3)Explain how forward pruning works. Provide at least one approach to forward prun- ing in your explanation, as well as a problem that may be encountered with forward pruning. Forward pruning means that some nodes are pruned without even considering them✓. Beam search [others are also considered] only considers a sample of the best moves at each ply✓, but this may lead to the best move being pruned away✓. (1.4) (3)Does the order in which nodes are examined in minimax matter? Explain your answer. Only if we prune✓. Otherwise minimax is an exhaustive search✓(for the parameters such as depth – plys – it is conﬁgured for✓) and node orders do not matter. Question 2: 31 Marks Consider Figure 1 and answer the questions that follow. (The utility value of the leaf nodes are provided in brackets in the leaf node.) (2.1) (9)Provide the minimax values for all the nodes. A = -7✓, B = -7✓, C = -8✓, D = -7✓, E = 0✓, F = 5✓, G = -8✓, H = -3✓, I = 3✓ 2 COS3751/202/1/2021 A B C D J E K F L M G H I N O P Q R -7 0 -4 5 -8 -12 -3 3 -4 Figure 1: Minimax, alpha/beta A B C D J E K F L M G H I N O P Q R -7 0 -4 5 -8 -12 -3 3 -4 MAX(-7,-8) = -7 MIN(MIN(-7,0),5)) = -7 MAX = -7 MAX = 0 MAX(-4,5) = 5 MAX(-8,-12) = -8 MAX = -3 MAX(3,-4) = 3 MIN(MIN(-8,-3),3) = -8 (2.2) (2)Which move should MAX make? Explain your answer. B✓. The utility value for MAX for move B is higher than that of move C✓. (2.3) (14)Write down the α/β values for all the nodes (except the leaf nodes) if alpha/beta prun- ing is applied to the tree. Provided below is < node >= (α, β): A = (-7, ∞)✓2, B = (−∞,-7)✓2, C = (-7,∞)✓2, D = (-7, ∞)✓2, E = (−∞,-7)✓2, F = (-∞,-7)✓2, G = (-7, ∞)✓2. A visual representation is provided below (the number in parenthesis is the step in the progress of the algorithm). 3 A B C D J E K F L M G H I N O P Q R -7 0 -4 5 -8 -12 -3 3 -4 v = \b\b−∞ − 7 α = \b\b−∞ − 7 β = ∞ v =ˆ∞ − 7 α = −∞ β =ˆ∞ − 7 v = \b\b−∞ − 7 α = \b\b−∞ − 7 β = ∞ v = \b\b−∞0 α = −∞ β = −7 v = \b\b−∞ − 4 α = −∞ β = −7 v = \b\b−∞ − 8 α = −7 β = ∞ v =ˆ∞ − 8 α = −7 β = ∞ When v = −8, v ≤ α ⇒ α-cut When v = −4, v ≥ β ⇒ β-cut (1) (2) (3) -7 (4) (5) 0 (6) (7) -4 (8) -7 (9) (10) (11) -8 (12) -8 The tree was traversed from left to right, and v = ˘˘˘−∞ 3 means that the original value of v was −∞ but was replaced with 3 during execution of the algorithm. We follow the red dashed arrows: down, then up with a return value. (2.4) (6)Write down which nodes were cut and what type of cut was made in each case (alpha, or beta). α-cut✓below C (H and I is not expanded)✓2. β-cut✓below F (M is not expanded)✓2 Also note: if there were an additional node below E, there would have been a β-cut. This would have happened because after v = MAX (v , 0) = 0 (v = −∞), we have that v ≥ β (β = −7), which is the requirement for a β-cut. Question 3: 23 Marks (3.1) Consider a simpliﬁed version of Nim: Two players (A and B) take turns removing items from a heap (just one heap). Each player may remove either one or two items from the heap. The heap starts off with ﬁve items, and player A moves ﬁrst. The objective of the game is to be the last player to remove items from the heap. That is, if it is your turn to move, and the heap is empty, you’ve lost the game. A partial game tree for the game is shown in Figure 2 on page 5. The state represented in each node is (P, n) where P ∈ {A, B} (the player whose turn it is to move next) and 0 ≤ n ≤ 5 (the number of items remaining in the heap). Thus (A, 5) would mean that player A will move next, and there are ﬁve items left in the heap. The label next to each edge indicates the number of items removed by the player whose turn it was to move. Terminal states are shown in rectangles. The utility value for a win uw for player A is +1, and a loss ul is −1 (draws are not possible in this game). Players are greedy, and 4 COS3751/202/1/2021 if a win is possible, they will take it. (A,5) (B,4) (A,2) (B,0) 22 (A,3) (B,1) (A,0) 1 2 (B,2) (A,0) 2 11 1 (B,3) . . .2 Figure 2: Partial game tree for simpliﬁed Nim. Suppose you are trying to build a minimal tree for the game using expected utility values for different states (since you have access to the entire search tree you are able to use statistics based on the number of occurrences of events – or the maximum likelihood estimator). You want to limit the depth of the tree to 2 (the root node and one level below). (a) (5)Differentiate between utility and expected utility, provide an example to illustrate. Any search algorithm in AI makes use of an evaluation function. This function either returns a true untility, or an expected value (utility). Utility is an ideal evaluation of the state which provides a quantitive indication of the state’s desirability. This is typically done when it is possible to play a game to a terminal state, and then back up the utility values to branch (internal) nodes. If the number of actions from a state is numerous, and the depth to reach a terminal state is large, this becomes impractical. An expected utility is intended to be an evaluation of a state which makes use of features of the state to try and determine a utility that is expected from that state. In many cases expected utility could simply be the probability of winning from a particular state (see next question). ✓5 (b) (9)What is the expected utility value for state (B, 4) (E(B,4)) for player A? Show your calculations. Should A play to state (B, 4) by taking just 1 item from the heap? Why/why not (refer to the expected utility value you calculated when answering this part of the question)? 5 We simply calculate the number of possible wins and losses for A from (B, 4). There are 3 outcomes from this state, in which A will win exactly 1 time. Thus the probability (p) of a win from (B, 4) is p = 1 3 = 0.34✓2 The probability (q = 1 − p) of losing from this position is q = 2 3 = 0.67✓2. The expected utility value is E(B,4) = uw p + ulq = 1 × 0.33 + −1 × 0.67 = −0.34✓3. Since there are no draw in this game, A will most probably lose if this state is reached (since our expected utility is closer to -1 (a loss) than 1 (a win))✓✓. (c) (9) Now calculate the expected utility value for (B, 3). Show your calculations. Will A beneﬁt from making this move instead of moving to (B, 4)? Justify your answer. We calculate the expected utility for (B, 3). Let’s ﬁrst draw a sub-tree of what the outcome will be: (B,3) (A,2) (B,0) 2 1 (A,1) (B,0 1 2 There are 2 possible outcomes in which A wins each time, thus: p = 2 2 = 1, q = 1 − p = 0 and the expected utility is E(B,3) = +1 × 1 + −1 × 0 = 1 a guaranteed win for A.✓8. A should thus always take 2 items from a 5 item heap to guarantee a win✓. Question 4: 11 Marks Answer the following questions on Constraint Satisfaction Problems (CSPs). (4.1) (2)Deﬁne the Least Constraining Value (LCV) heuristic. The heuristic prefers values that rule out✓the fewest choices for neighbours✓(it tries not to limit the number of choices that remain for neighbours). 6 COS3751/202/1/2021 (4.2) (3)Explain why establishing strong k-consistency is a problem. This means we must show that the graph is k-consistent, k −1-consistent and so on✓. This can only be done in exponential time✓which makes large problems intractable.✓ (4.3) (2)Deﬁne the degree heuristic. This heuristic attempts to reduce ✓the branching ✓factor on future choices. (4.4) (2)If no legal assignments for a variable remain during a solution to a CSP, does it mean that the algorithm will be able to ﬁnd a solution by simply backtracking? Explain your answer. No✓. It may very well be that there is no answer (there is no form of consistency for the problem given the constraints, resulting in no solution).✓ (4.5) (2)Explain what forward checking for a CSP is. It is a domain reduction technique which establishes arc consistency✓2. (Or: it re- moves values from the domain of the neighbours of the variable for which the forward checking is being done✓0✓0 – also acceptable answer.) Question 5: 43 Marks Consider the following cryptarithmetic puzzle: N E V E R + A L W A Y S N E A R L Y Cryparithmetic puzzles can be represented as CSPs if properly reformulated. Answer the ques- tions that follow. (5.1) (11)Deﬁne the variables for this cryptarithmetic puzzle. (Include any carry variables that may be required). It is important to deﬁne all the variables involved: including the carry variables. Please take note of the notation used, you have to at least be consistent in your application of the notation. The convention is to use the set χ (or X) for the variables, and D (with subscript) for the domains of variables. χ = {N, E, V , R, A, L, W , Y , S, C1, C2, C3, C4, C5} ✓9 ✓2 (carry variables) (5.2) (4)Provide the domains for the variables. We know that no number may begin with a 0, and that, no two of the variables may assigned the same digit. We also know that the carry variables has a very limited domain. We encode these in the domains. Dχ/{N,A,C1,C2,C3,C4,C5} = [0, 9], D{N,A} = [1, 9], D{C1,C2,C3,C4,C5} = [0, 1] ✓4 7 (5.3) (8)Provide the constraints for this puzzle. 1. alldiff(N, E, V , R, A, L, W , Y , S)✓ 2. R + S = Y + C1 × 10✓ 3. C1 + E + Y = L + C2 × 10✓ 4. C2 + V + A = R + C3 × 10✓ 5. C3 + E + W = A + C4 × 10✓ 6. C4 + N + L = E + C5 × 10✓ 7. C5 + A = N✓ 8. C5 = 1✓ (5.4) (10)Provide the solution to this crypt-arithmetic puzzle, show all the steps you took to arrive at the answer (also show which heuristic you employed, and your backtracking strategy (if used)). We use a plain brute force approach. We start by considering the constraints. Since C5 = 1, it means that A is one less than N. Thus, A cannot be 9, since that would make N = 10 which is not legal. So we reduce DA = [1, 8], then N = [2, 9] 1. We can now choose based on MRV, E = 0. Now C3 = 1 C1 = 1, DY = [9], but R + S ̸= 19. 2. Choose E = 1, DL = [3, 9] (a) Choose V = 0. C2 = 1, DR = [3, 9], DA = [2, 8],DN = [3, 9] i. L = 3. DA = [4, 8], DN = [5, 9], DY = [2], but R + S ̸= 2. For all L ∈ {3, 4, 5, 6, 7, 8, 9} the same goes. Thus we backtrack to V . (b) Choose V = 2. DA = [3, 8],DN = [4, 9], i. R = 0. R ̸= S. ii. R = 3. No legal value in A’s domain remains to get to 3 or 13. Same for R = 4 iii. R = 5. A = 3, N = 4. No legal values in DW remain. iv. R = 6. DA = [3, 4], DN = [4, 5], DW = [3]. A. W = 3. A = 4, N = 5. But L cannot be 5 or 6. v. R = 7. DA = [4, 5], DN = [5, 6], DW = [3, 4], DL = [5]. But then A or N will clash with L. vi. R = 8. DA = [5, 6], DN = [6, 7], DW = [3, 5]. A. Y = 3. S = 5, C1 = 1, but then L = 5. B. Y = 4. S = 6, C1 = 1, but then L = 6. This will carry on for all values of Y . 8 COS3751/202/1/2021 vii. R = 9. DA = [6, 7], DN = [7, 8], DL = [3, 4], but DY = [3, 8]. We’ve exhausted R. (c) So we carry on until V = 5. i. R = 2. DA = [6, 7], DN = [7, 8], C3 = 1. W = 4. But A ̸= 6 since V +A ̸= R. ii. R = 3. DA = [6, 8], DN = [7, 9], C3 = 1, DW = {2, 4, 6}. A. L = 0. N = 9, but E + W < 10. B. L = 2. Y = 0. DA = [7], D = 7, A = 8, N = 9, W = 6. Our solution is thus: 9 1 5 1 3 + 8 2 6 8 0 7 9 1 8 3 2 0 ✓10 (5.5) (10)Draw the constraint hypergraph for the puzzle. N EVR A L W Y S C1C2C3C4C5 ✓2 for correct alldiff node ✓2 for correct variable nodes ✓2 for correct aux nodes ✓2 for correct constraint edges between nodes ✓2 for correct alldiff edges. 9 Question 6: 29 Marks Consider the problem of assigning registers on a central processing unit (CPU) to the variables in a program. Since a program may have many variables and there are a limited number of registers on the CPU, assigning registers to variables is an important problem. Since only certain variables are in use at different times during the execution of the program (vari- ables that are being used at a particular time are called alive), the real task is merely to ﬁgure out which alive variables to assign to the limited number of registers. This is a classic graph-colouring problem. For a certain program the following holds: 1. There are seven variables in use in the program. 2. Program variables A,B, and D are alive together. Program variables C,D,E, and F are alive together, and program variables A,E, and G are alive together. 3. There are four registers available for assignment to program variables. (6.1) (9)Deﬁne the variables for this CSP. ✓9 X = {A, B, C, D, E, F , G} (6.2) (4)Deﬁne the domain for each variable in the CSP. Students can decide on any colour. Half mark each✓4 Dx∈X = {R, G, B, Y } (6.3) (11)Deﬁne the constraints for the variables in the CSP. A ̸= B✓, A ̸= D✓, A ̸= E✓, A ̸= G✓, B ̸= D✓, C ̸= D✓, C ̸= E✓, C ̸= F ✓, D ̸= E✓, D ̸= F ✓, E ̸= F ✓, G ̸= E (6.4) (5)Provide the constraint graph for this problem. Does a solution exist? If no solution exists, explain what parameters from the problem would have to change in order to get to a solution. A solution does exist.✓5 A B C D E FG Copyright ©UNISA 2021 10","libVersion":"0.2.3","langs":""}