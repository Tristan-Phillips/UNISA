{"path":"UNISA/98906 - BSc Science in Computing/COS3721 - Operating Systems and Architecture/Unsorted/COS 3721/Exams/2018-October/Qp/bg3.png","text":"Page 3 of ยง C0s3721 October/November 2018 22 Consider a system consisting of four resources of the same type that are shared by three processes, each of which needs at most two resources. Is this system deadlock free? Show the full workings. [41 23 Discuss how the following pairs of scheduling cnteria conflict 1n certain settings. [61 (a) CPU uulization and response time 2) (b) Average turnaround time and maximum waiting time 2) (c) /O device utihzation and CPU utihization 2) 24 The following processes are being scheduled using a preemptive, round-robin scheduling algonthm Each process is assigned a numerical prionity, with a higher number indicating a lower relative prionty In addition to the processes listed below, the system also has an idle task (which consumes no CPU resources and 15 1dentified as Pidle) Thus task has prionty 0 and 1s scheduled whenever the system has no other available processes to run The length of a time quantum 1s 10 unts. If a process is pre-empted by a higher-priority process, the pre-empted process 1s placed at the end of the queue [ Priorty | Burstiime | Avival | | P ] 5 [ 10 [ 100 ] (a) Show the scheduling order of the processes using a Gantt chart 4] (b) Calculate the turnaround time and the waiting time for each process 4] (c) What 1s the CPU utihzation rate? 2 Question 3: 10 Marks 31 When a page fault occurs, the process requesting the page must block while waiting for the page to be brought from disk into physical memory Assume that there exists a process with five user- level threads and that the mapping of user threads to kernel threads 1s one to one If one user thread incurs a page fault while accessing its stack, would the other user threads belonging to the [ same process also be affected by the page fault that 1s, would they also have to wait for the faulting page to be brought into memory? Explain 4] 32 Explain what has to happen for a set of processes to achieve a deadlock state. [2] [TURN OVER]","libVersion":"0.2.3","langs":"eng"}