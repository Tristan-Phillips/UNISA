{"path":"UNISA/98906 - BSc Science in Computing/COS3751 - Techniques of Artificial Intelligence/Telegram Notes/03-problems.pdf","text":"3. Solving Problems by SearchingFoundations of AIProblem-Solving Agents, Formulating Problems, Search StrategiesLuc De Raedtand Wolfram Burgardand Bernhard NebelContents•Problem-Solving Agents•Formulating Problems•Problem Types•Example Problems•Search StrategiesProblem-Solving Agents\u0000Goal-based agentsFormulation:goaland problemGiven:initial stateGoal:To reach the specified goal (a state) through the execution of appropriate actions.\u0000Searchfor a suitable actionsequenceand executethe actionsA Simple Problem-Solving AgentProperties of this Agent•static world•observable environment•discrete states•deterministic environmentProblem Formulation•Goal formulationWorld states with certain properties•Definition of the state space(important: only the relevant aspects \u0000abstraction•Definition of the actions that can change the world state•Definition of the problem type, which is dependent on the knowledge of the world states and actions\u0000states in the search space•Determination of the search cost(search costs, offline costs) and the execution costs (path costs, online costs)Note:The type of problem formulation can have a big influence on the difficulty of finding a solution.Example Problem FormulationGiven an n x n board from which two diagonally opposite corners have been removed (here 8X8): Goal: Cover the board completely with dominoes, each of which covers two neighbouringsquares.\u0000Goal, state space, actions, search, …Alternative Problem FormulationQuestion: Can a chess board consisting of n2/2 black and n2/2-2 white squares be completely covered with dominoes such that each domino covers one black and one white square? …clearly not.Problem Formulation for the Vacuum Cleaner World•World state space: 2 positions, dirt or no dirt\u0000\u0000\u0000\u00008 world states•Actions: Left (L), Right (R), or Suck (S)•Goal: no dirt in the rooms•Path costs: one unit per actionProblem Types: Knowledge of States and Actions•Single-state problemComplete world state knowledgeComplete action knowledge\u0000The agent always knows its world state•Multiple-state problemIncomplete world state knowledgeIncomplete action knowledge\u0000The agent only knows which group of world states it is in•Contingency problemIt is impossible to define a complete sequence of actions that constitute a solution in advance because information about the intermediary states is unknown.•Exploration problemState space and effects of actions unknown. Difficult!The Vacuum Cleaner Problem as a One-State ProblemIf the environment is completely accessible, the vacuum cleaner always knows where it is and where the dirt is. The solution then is reduced to searching for a path from the initial state to the goal state.States for the search: The world states 1-8.The Vacuum Cleaner World as a Multiple-State ProblemIf the vacuum cleaner has no sensors, it doesn’t know where it or the dirt is. In spite of this, it can still solve the problem. Here, states are knowledge states.States for the search: The power setof the world states 1-8.Concepts (1)Initial StateThe state from which the agent infers that it is at the beginningState SpaceSet of all possible statesActionsDescription of possible actions and their outcome (successor function)Goal TestTests whether the state description matches a goal state Concepts (2)PathA sequence of actions leading from one state to another. Path CostsCost function gover paths. Usually the sum of the costs of the actions along the path.SolutionPath from an initial to a goal stateSearch CostsTime and storage requirements to find a solutionTotal CostsSearch costs + path costsExample: The 8-Puzzle•States:Description of the location of each of the eight tiles and (for efficiency) the blank square.•Initial State:Initial configuration of the puzzle.•Actions or Successor function:Moving the blank left, right, up, or down.•Goal Test:Does the state match the configuration on the right (or any other configuration)?•Path Costs:Each step costs 1 unit (path costs corresponds to its length).Example: 8-Queens Problem•States:Any arrangement of 0 to 8 queens on the board.•Initial state:No queen on the board.•Successor function:Add a queen to an empty field on the board.•Goal test:8 queens on the board such that no queen attacks another•Path costs:0 (we are only interested in the solution).Almost a solution:Alternative Formulations •Naïve formulation–States: Any arrangement of 0-8 queens–Problem: 64´63 ´…´57≈1014possible states•Better formulation–States: Any arrangement of nqueens (0 ≤n≤8) one per column in the leftmost ncolumns such that no queen attacks another.–Successor function: Add a queen to any square in the leftmost empty column such that it is not attacked by any other queen. –Problem: 2,057 states–Sometimes no admissible states can be found.Example: Missionaries and Cannibals•Three missionariesand three cannibalsare on one side of a river that they wish to cross.•A boatis available that can hold at most two people.•You must never leave a group of missionaries outnumbered by cannibals on the same bank.Informal problem description:\u0000Find an action sequence that brings everyone safely to the opposite bank.Formalization of the M&C ProblemStates:triple (x,y,z) with 0 ≤x,y,z ≤3, where x,y, and z represent the number of missionaries, cannibals and boats currently on the original bank.Initial State:(3,3,1)Successor function:From each state, either bring one missionary, one cannibal, two missionaries, two cannibals, or one of each type to the other bank.Note: Not all states are attainable (e.g. (0,0,1)), and some are illegal.Goal State:(0,0,0)Path Costs:1 unit per crossingExamples of Real-World Problems•Route Planning, Shortest Path ProblemSimple in principle (polynomial problem). Complications arise when path costs are unknown or vary dynamically (e.g. Route planning in Canada)•Traveling Salesperson Problem (TSP)A common prototype for NP-complete problems•VLSI LayoutAnother NP-complete problem•Robot Navigation (with a high degree of freedom)Difficulty increases quickly with the level of freedom. Further possible complications: errors of perception, unknown environments•Assembly SequencingPlanning of the assembly of complex objects (by robots)(2,3,0)(1,3,0)(2,3,0)General SearchFrom the initial state, produce all successive states step by step \u0000search tree.(3,3,1)(3,2,0)(2,2,0)(1,3,0)(3,1,0)(3,3,1)(a) initial state(b) after expansionof (3,2,0)of (3,3,1)(c) after expansion(3,3,1)(3,2,0)(2,2,0)(3,1,0)(3,3,1)Implementing the Search TreeData structure for nodes in the search tree:State:state in the state spaceParent-Node:Predecessor nodesAction:The operator that generated the nodeDepth:number of steps along the path from the initial statePath Cost:Cost of the path from the initial state to the nodeOperations on a queue:Make-Queue(Elements):Creates a queueEmpty?(Queue):Empty test First(Queue):Returns the first element of the queueRemove-First(Queue):Returns the first elementInsert(Element, Queue):Inserts new elements into the queue (various possibilities) Insert-All(Elements, Queue):Inserts a set of elements into the queueNodes in the Search TreeGeneral Tree-Search ProcedureCriteria for Search StrategiesCompleteness:Is the strategy guaranteed to find a solution when there is one?Time Complexity:How long does it take to find a solution?Space Complexity:How much memory does the search require?Optimality:Does the strategy find the best solution (with the lowest path cost)?Search StrategiesUninformed or blind searches: No information on the length or cost of a path to the solution.•breadth-first search, uniform cost search, depth-first search,•depth-limited search, Iterative deepening search, and•bi-directional search.In contrast: informed or heuristic approachesBreadth-First SearchNodes are expanded in the order they were produced. (fringe = FIFO-QUEUE()).•Always finds the shallowest goal statefirst.•Completeness.•The solution is optimal, provided the path cost is a non-decreasing function of the depth of the node(e.g. when every action has identical, non-negative costs).Breadth-First Search (2)The costs, however, are very high. Let bbe the maximal branching factor and dthe depth of a solution path. Then the maximal number of nodes expanded isb + b2+ b3+ … + bd+ (bd+1 –b) ∈O(bd+1)Example: b= 10, 10,000 nodes/second, 1,000 bytes/node:1 exabyte3,523 years10151410 petabytes35 years101312101 terabytes129 days1011101 terabyte31 hours109810 gigabytes19 minutes1076106 megabytes11 seconds111,10041 megabyte.11 seconds1,1002MemoryTimeNodesDepthUniform Cost SearchModification of breadth-first search to always expand the node with the lowest-cost g(n).Always finds the cheapest solution, given that g(successor(n)) >= g(n) for all n.Depth-First SearchAlways expands and unexpanded node at the greatest depth (Queue-Fn = Enqueue-at-front).Example (Nodes at depth 3 are assumed to have no successors):Depth-Limited SearchDepth-first search with an imposed cutoff on the maximum depth of a path. e.g. route planning: with ncities, the maximum depth is n–1.Here, a depth of 9 is sufficient (diameter of the problem).Iterative Deepening Search (1)•Combines depth-and breadth-first searches•Optimal and complete like breadth-first search, but requires less memoryExampleIterative Deepening Search (2)Number of expansionsb + b2+ … + bd-1+ bd+ bd+1 -bBreadth-First-Search(d)b + (d-1)b2+ … + 3bd-2+ 2bd-1+ 1bdIterative Deepening Search50 + 400 + 3,000 + 20,000 + 100,000 = 123,450Iterative Deepening Search10 + 100 + 1,000 + 10,000 + 100,000 + 999,990 = 1,111,100Breadth-First-SearchExample: b = 10, d = 5For b = 10, only 11% of the nodes expanded by breadth-first-search are generated, so that the memory + time requirements are considerably lower.Time complexity: O(bd) Memory complexity: O(b´d)\u0000Iterative deepening in general is the preferred uninformed search method when there is a large search space and the depth of the solution is not known.Bidirectional SearchesAs long as forwards and backwards searches are symmetrical, search times of O(2´bd/2) = O(bd/2) can be reached.e.g. for b=10, d=6, instead of 111111 only 2222 nodes!Problems with Bidirectional Search•The operators are not always reversible, which makes calculation of the predecessors very difficult.•In some cases there are many possible goal states, which may not be easily describable. Example: The predecessors of the checkmate in chess.•There must be an efficient way to check if a new node already appears in the search treeof the other half of the search.•What kind of searchshould be chosen for each direction(the previous figure shows a breadth-first search, which is not always optimal)?Comparison of Search StrategiesTime complexity, space complexity, optimality, completenessbbranching factorddepth of solution, mmaximum depth of the search tree, ldepth limit, C*cost of the optimal solution, ∈minimal cost of an actionSuperscripts:a)b is finite b)if step costs not less than ∈c)if step costs are all identical d)if both directions use breadth-first search Repeated States•We have ignored so far what happens if we repeatedly visitthe same node.•Repeated states may lead to a large (exponential) overhead•(a) -> tree with 2d leaves•(c) -> tree with 4dleavesGraph Search•Add a closedlist to the tree search algorithm•Ignorenewly expanded state if already in closedlist•Closed listcan be implemented as hash•Potential problems–Needs a lot of memory–Can ignore better solutions if a node is visited first on a suboptimal pathSummary•Before an agent can start searching for solutions, it must formulate a goaland then use that goal to formulate a problem.•A problem consists of five parts: The state space, an initialsituation, actions,a goal test, and path costs. A pathfrom an initial state to a goal state is a solution.•A general searchalgorithm can be used to solve any problem. Specific variants of the algorithm can use different search strategies.•Search algorithms are judged on the basis of completeness, optimality, time complexity, and space complexity.•It can make sense to detect and eliminate repeated states.","libVersion":"0.2.3","langs":""}