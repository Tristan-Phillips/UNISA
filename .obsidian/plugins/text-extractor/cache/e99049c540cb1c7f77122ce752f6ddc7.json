{"path":"Subjects/COS3711 - Advanced Programming/Unsorted/Notes/Ch12_New_MetaObjects.pdf","text":"Qt Core Internals Meta Objects  Object Model  Meta Object System  Property System  Signal and Slots  Event System Object Model Qt’s Object Model (QObject) • GUI programming is a domain that requires both runtime efficiency and a high level of flexibility. Although C++ object model is efficient at runtime but its static nature is inefficient in graphical domain. Qt provides this, by combining the speed of C++ with the flexibility of the Qt Object Model. • Meta-Object system : Allows runtime introspection, manipulation and invocation of properties and methods in the object. Meta Object System • The QMetaObject class contains meta- information about Qt objects. • Classes must be predefined with Qt “moc” • Class declarations must include Q_OBJECT macro • Responsible for the signals/slots inter-object communication mechanism, runtime type information, and the Qt property system • Qmake takes care of this automatically Property Systems  Provides a sophisticated property system  Does not rely on non-standard compiler features like __property or [property].  Works with any standard C++ compiler on every platform Qt supports.  To declare a property, use the Q_PROPERTY() macro in a class that inherits QObject. Q_PROPERTY(type name READ getFunction [WRITE setFunction] [RESET resetFunction] [NOTIFY notifySignal] [DESIGNABLE bool] [SCRIPTABLE bool] [STORED bool] [USER bool] [CONSTANT] [FINAL]) Property Systems Keep track of a priority value. priority(name of property) and its type will be enumeration type named Priority class MyClass : public QObject { Q_OBJECT Q_PROPERTY(Priority priority READ, priority WRITE, setPriority NOTIFY priorityChanged) Q_ENUMS(Priority) Signals and Slots • Signal and Slots run at the run time • Use the “connect” method to join signal and slots • connect( slider, SIGNAL( valueChanged( double ) ) , plot, SLOT(setIntervalTime(double))); • Predefined signals and slots by classes • Otherwise you have to write it depends of what you need • In the header file: • Q_SIGNALS(signals): • Q_SLOTS(slots): • Parsed by Qt’s Meta Object Compiler (moc) Same type, and number of parameters Signals • A signal is a way to inform a possible observer something of interest has happened inside the observed class • A PushButton clicked (an asynchronous service) where the value of Slider is changing. • Signals are member functions that automatically implements in the meta-object • Only the function declaration is provided by the developer • Signal is sent, or emitted using the keyword emit ( i.e. Emit someSignal(“Hello”) ) Slots • Regular class member methods • Should be declared as void • Slots can return a value when called as a method • Return values are ignored when invoked from a signal • May include in access specifier(pubic, private, ..) • A slot is a function that is to be executed when a signal has been emitted: (i.e. when QPushButton is pressed, Close a Qdialog) Event Systems • Events are objects, derived from abstract QEvent class, usually receives from window system and dispatch it to widgets. • When an event occurs, Qt Creates an event object (an instance of the QEvent), and therefore delivers to an instance of QObject. Based on the type of event delivered, response will be send if the event was accepted or ignored • Such as QMouseEvent and QKeyEvent, come from the window system; How Events are Delivered When an event occurs, • Qt Creates an event object (an instance of the QEvent), • Delivers it to a particular instance of QObject Based on the type of event delivered, response will be send if the event was accepted or ignored • Such as QMouseEvent and QKeyEvent, come from the window system; How Events are Delivered Event Types Most events types have special classes, notably • QResizeEvent, • QPaintEvent, • QMouseEvent, • QKeyEvent, • QCloseEvent. Each class subclasses QEvent and adds event-specific functions. For example, QResizeEvent adds size()","libVersion":"0.2.3","langs":""}