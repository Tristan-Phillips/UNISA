{"path":"UNISA/98906 - BSc Science in Computing/COS3751 - Techniques of Artificial Intelligence/Student Notes/COS3751 Assignment 2 2023.pdf","text":"BAR CODE Deﬁne Tomorrow. university of south africa Tutorial Letter 201/0/2023 Techniques of Artiﬁcial Intelligence COS3751 Year module School of Computing This tutorial letter contains assignment 02 COS3751/201/0/2023 ASSIGNMENT 2 Due Date: 21 July 2023 Total Marks: 145 Unique Assignment Number: 633536 FOR SUPER SEMESTER – Semesters 1 & 2 Study material: Chapters 5 and 6. You may skip sections 5.5, 5.6, and 5.7. Question 1: 13 Marks (1.1) (3)Clearly explain what a utility function is, and why it is used during adversarial searches. (1.2) (4)Is the ideal strategy only available if we have perfect information? Explain your an- swer. (1.3) (3)Explain how forward pruning works. Provide at least one approach to forward prun- ing in your explanation, as well as a problem that may be encountered with forward pruning. (1.4) (3)Does the order in which nodes are examined in minimax matter? Explain your answer. Question 2: 31 Marks Consider Figure 1 and answer the questions that follow. (The utility value of the leaf nodes are provided in brackets in the leaf node.) A B C D J E K F L M G H I N O P Q R -7 0 -4 5 -8 -12 -3 3 -4 Figure 1: Minimax, alpha/beta 2 COS3751/201/0/2023 (2.1) (9)Provide the minimax values for all the nodes. (2.2) (2)Which move should MAX make? Explain your answer. (2.3) (14)Write down the α/β values for all the nodes (except the leaf nodes) if alpha/beta prun- ing is applied to the tree. (2.4) (6)Write down which nodes were cut and what type of cut was made in each case (alpha, or beta). Question 3: 23 Marks (3.1) Consider a simpliﬁed version of Nim: Two players (A and B) take turns removing items from a heap (just one heap). Each player may remove either one or two items from the heap. The heap starts off with ﬁve items, and player A moves ﬁrst. The objective of the game is to be the last player to remove items from the heap. That is, if it is your turn to move, and the heap is empty, you’ve lost the game. A partial game tree for the game is shown in Figure 2 on page 4. The state represented in each node is (P, n) where P ∈ {A, B} (the player whose turn it is to move next) and 0 ≤ n ≤ 5 (the number of items remaining in the heap). Thus (A, 5) would mean that player A will move next, and there are ﬁve items left in the heap. The label next to each edge indicates the number of items removed by the player whose turn it was to move. Terminal states are shown in rectangles. The utility value for a win uw for player A is +1, and a loss ul is −1 (draws are not possible in this game). Players are greedy, and if a win is possible, they will take it. Suppose you are trying to build a minimal tree for the game using expected utility values for different states (since you have access to the entire search tree you are able to use statistics based on the number of occurrences of events – or the maximum likelihood estimator). You want to limit the depth of the tree to 2 (the root node and one level below). (a) (5)Differentiate between utility and expected utility, provide an example to illustrate. (b) (9)What is the expected utility value for state (B, 4) (E(B,4)) for player A? Show your calculations. Should A play to state (B, 4) by taking just 1 item from the heap? Why/why not (refer to the expected utility value you calculated when answering this part of the question)? (c) (9) Now calculate the expected utility value for (B, 3). Show your calculations. Will A beneﬁt from making this move instead of moving to (B, 4)? Justify your answer. Question 4: 11 Marks Answer the following questions on Constraint Satisfaction Problems (CSPs). 3 (A,5) (B,4) (A,2) (B,0) 22 (A,3) (B,1) (A,0) 1 2 (B,2) (A,0) 2 11 1 (B,3) . . .2 Figure 2: Partial game tree for simpliﬁed Nim. (4.1) (2)Deﬁne the Least Constraining Value (LCV) heuristic. (4.2) (3)Explain why establishing strong k-consistency is a problem. (4.3) (2)Deﬁne the degree heuristic. (4.4) (2)If no legal assignments for a variable remain during a solution to a CSP, does it mean that the algorithm will be able to ﬁnd a solution by simply backtracking? Explain your answer. (4.5) (2)Explain what forward checking for a CSP is. Question 5: 38 Marks Consider the following cryptarithmetic puzzle: N E V E R + A L W A Y S N E A R L Y Cryparithmetic puzzles can be represented as CSPs if properly reformulated. Answer the ques- tions that follow. (5.1) (11)Deﬁne the variables for this cryptarithmetic puzzle. (Include any carry variables that may be required). 4 COS3751/201/0/2023 (5.2) (4)Provide the domains for the variables. (5.3) (8)Provide the constraints for this puzzle. (5.4) (10)Provide the solution to this crypt-arithmetic puzzle, show all the steps you took to arrive at the answer (also show which heuristic you employed, and your backtracking strategy (if used)). (5.5) (5)Draw the constraint hypergraph for the puzzle. Question 6: 29 Marks Consider the problem of assigning registers on a central processing unit (CPU) to the variables in a program. Since a program may have many variables and there are a limited number of registers on the CPU, assigning registers to variables is an important problem. Since only certain variables are in use at different times during the execution of the program (vari- ables that are being used at a particular time are called alive), the real task is merely to ﬁgure out which alive variables to assign to the limited number of registers. This is a classic graph-colouring problem. For a certain program the following holds: 1. There are seven variables in use in the program. 2. Program variables A,B, and D are alive together. Program variables C,D,E, and F are alive together, and program variables A,E, and G are alive together. 3. There are four registers available for assignment to program variables. (6.1) (9)Deﬁne the variables for this CSP. (6.2) (4)Deﬁne the domain for each variable in the CSP. (6.3) (11)Deﬁne the constraints for the variables in the CSP. (6.4) (5)Provide the constraint graph for this problem. Does a solution exist? If no solution exists, explain what parameters from the problem would have to change in order to get to a solution. Copyright © UNISA 2023 5","libVersion":"0.2.3","langs":""}