{"path":"Subjects/COS3711 - Advanced Programming/Unsorted/Open Book Exam Files/Virtual Classes/VC10_Networking.pdf","text":"COS3711 – Advanced Programming Virtual Class: COS3711 - 22 - Y TL104 – Networking & TL105 - Cloud Computing Lecturer: Dr C Pilkington Tutor: Ron Barnard Networking & Cloud Computing Outcomes ▪ Know the difference between, and use of, various networking protocols, including FTP, TCP, and UDP; ▪ Understand and implement the process and tools Qt provides to handle networked applications; ▪ Describe the basic concepts and infrastructure related to cloud computing; ▪ Describe the benefits that can be gained from utilizing cloud computing platforms and tools. Networking & Cloud Computing Protocols Protocol Name Description TCP Transmission Control Protocol Provides reliable, error-checked, delivery of data between applications on hosts communicating over an IP network. One of the main protocols of the Internet Protocol suite. Connection-oriented: connection between client and server must be established before data can be transmitted. IP Internet Protocol Principle communication protocol of the Internet Protocol suite. IP packets include a header – source and destination addresses etc, and a payload – the data. Delivers packets from source to destination based on IP addresses in the header. Connectionless protocol. Networking & Cloud Computing Protocols Protocol Name Description TCP/IP Suite of data communication protocols – TCP and IP are the two main protocols. Provides end-to-end data communication over the Internet, or an Intranet. Specifies how data is broken into packets, addressed, transmitted, routed, and received. TCP/IP is divided into four layers - • Application layer – Provides applications with standardized data exchange. Protocols include HTTP, HTTPS, FTP, SMTP, POP3, IMAP. • Transport layer – Provides end-to-end communication across a network. Protocols include TCP and UDP. Networking & Cloud Computing Protocols Protocol Name Description TCP/IP (contd) Suite of data communication protocols – TCP and IP are the two main protocols. • Network layer – Connects independent networks to transport packets across network boundaries. Protocol IP. • Physical layer – Access to physical devices connected to a network. Protocols Ethernet, or Address Resolution Protocol (ARP). TCP/IP is non-proprietary (Not controlled by any company), compatible with all operating systems, and all types of hardware and networks. UDP User Datagram Protocol Used to send messages (datagrams) to other hosts on an IP network. Simple connectionless communication with minimal protocols. Networking & Cloud Computing Protocols Protocol Name Description HTTP Hypertext Transfer Protocol Handles communication between web server and web browser – uses TCP/IP. HTTPS Hypertext Transfer Protocol Secure Handles secure communication between web server and web browser – uses TCP/IP. FTP File Transfer Protocol Handles transmission of files between computers – uses TCP/IP. SMTP Simple Mail Transfer Protocol Used for sending e-mails to a server for relaying. Can be used to send and receive, but e-mail clients typically only use for sending. POP Post Office Protocol (PoP3) Provides access to a mailbox on a server for a client, over an IP network. Optional to delete, or leave retrieved messages on server. Networking & Cloud Computing Protocols Protocol Name Description IMAP Internet Message Access Protocol Used by e-mail clients to retrieve e-mail messages over a TCP/IP connection. Generally leaves messages on the server until user explicitly deletes them. Connectionless communication – Each data unit is individually addressed and routed based on information carried in each unit, rather than using a pre-arranged fixed data channel. Messages can be sent without prior arrangement – sender does not ensure that intended receiver is available to receive data message. Data may arrive out of sequence, or not at all. Connection-oriented communication – Requires logical connection between the two processes before data is exchanged. Connection must be maintained during the entire time that communication is taking place, and then released afterwards. TCP/IP vs OSI – TCP/IP is roughly a compressed version of OSI – 4 layers vs 7 layers. OSI more theoretical, TCP/IP more practical. TCP/IP greater market acceptance. Networking & Cloud Computing TCP vs UDP TCP UDP Connection-oriented protocol. Connectionless protocol. Slower than UDP. Faster communication than TCP. Error-checking, guaranteed in-order delivery. Basic error-checking (Checksums), no guaranteed delivery. Discards defective packets. Larger overhead, greater use of available bandwidth. Error-checking / connection management. Much smaller overhead – minimal overhead for error-checking, no overhead for opening a connection, maintaining a connection, or terminating a connection. Lost packets re-transmitted. Data sent whether or not it is received – no re- transmission. Point-to-point only. Point-to-point, or Broadcast. Used by HTTPS, HTTP, SMTP, POP, FTP. Reliable communication required. Used for video-conferencing, streaming, VoIP. Fast / low overhead communication required. Networking & Cloud Computing Qt Networking Classes QUrl – Provides an interface for working with URL's. QTcpSocket – Provides a TCP socket, enables a TCP connection and transfer of data. QTcpServer – Provides a TCP based server, makes it possible to accept incoming TCP connections, generates QTcpSocket instances for each connection. QSslSocket – Provides an SSL encrypted socket for clients and servers. Establishes a secure, encrypted TCP connection. (SSL – Secure Sockets Layer). QUdpSocket – Provides a UDP socket, can send and receive UDP datagrams. QNetworkDatagram – Provides data and metadata of a UDP datagram. QHostAddress – Provides an IP address, IPv4 or Ipv6. Predefined addresses: Null, LocalHost, LocalHostIPv6, Broadcast, Any. Note: Must add: QT += network to project file to use networking classes. NB: Look at “Network Programming with Qt” in Qt documentation. Networking & Cloud Computing QTcp – Methods Methods - QTcpServer QTcpServer(QObject *parent = nullptr) Constructor bool listen(QHostAddress, port) – Default is 'Any', 0 Tells server to listen for incoming connections. QTcpSocket nextPendingConnection() Returns a connected QTcpSocket. close() Stops listening for incoming connections. Signals - QTcpServer void newConnection() Emitted when a new connection is available. Methods - QTcpSocket QTcpSocket(QObject *parent = nullptr) Constructor void connectToHost(QHostAddress hostAddress, port) void connectToHost(QString hostName, port) Attempts to connect to hostName / hostAddress on port specified. ***Overloaded name / address qint64 QIODevice::write(const QbyteArray &data) Returns the number of bytes actually written. close() Closes the I/O device for the socket. QByteArray QIODevice::readAll() Reads all data from the device. Signals - QTcpSocket void QIODevice::readyRead() Emitted once every time new data is available. Networking & Cloud Computing QTcp - Networking example code TCPServer.cpp // Connect signals and slots connect(btnStart, &QPushButton::clicked, this, &SV::startServer); connect(tcpServer, &QTcpServer::newConnection,this, &SV::handleConnection); connect(tcpSocket, &QTcpSocket::readyRead, this, &SV::readMessage); void ServerView::startServer() [slot] Connected to button clicked() { // Listen on any address, port 100 if (!tcpServer->listen(QHostAddress::Any, 100)) { QMessageBox::critical(this, \"TCP Server\", \"Error: server\"); tcpServer->close(); return; } lblMessage->setText(\"Listening on port 100\"); } Networking & Cloud Computing QTcp - Networking example code TCPServer.cpp void ServerView::handleConnection() [slot] Connected to newConnection() { tcpSocket = tcpServer->nextPendingConnection(); txtDisplay->append(\"New connection\"); tcpSocket->write(\"Hello client\\n\"); tcpSocket->flush(); //tcpSocket->close(); } void ServerView::readMessage() [slot] Connected to readyRead() signal { QByteArray buffer = tcpSocket->readAll(); // Alt read() methods txtDisplay->append(QString::fromUtf8(buffer)); } Would also require a sendMessage() slot to handle two way communication. Networking & Cloud Computing QTcp - Networking example code TCPClient.cpp // Connect signals and slots connect(btnStart, &QPushButton::clicked, this, &CV::startClient); connect(tcpSocket, &QTcpSocket::readyRead, this, &CV::readMessage); void ClientView::startClient() [slot] Connected to button clicked() { // Connect on any address, port 100 tcpSocket->connectToHost(QHostAddress(\"127.0.0.1\"), 100); // *** lblMessage->setText(\"Connected on port 100\"); } // *** Emits connected() signal, also errorOccured() signal void ClientView::readMessage() [slot] Connected to readyRead() signal { QByteArray buffer = tcpSocket->readAll(); txtDisplay->append(QString::fromUtf8(buffer)); } Would also require a sendMessage() slot to handle two way communication. Networking & Cloud Computing QUdpSocket – Methods Methods bool QUdpSocket::hasPendingDatagrams() const Returns true if at least one datagram is waiting to be read. qint64 QUdpSocket::pendingDatagramSize() const Returns size of first pending UDP datagram. qint64 QUdpSocket::readDatagram(params) char *data, qint64 maxSize, QHostAddress *address = nullptr, quint16 *port = nullptr Receives datagram no larger than maxSize, and stores it in data. Sender's host address and port are stored in *address and *port (Unless null). Returns size of datagram on success, else -1. QNetworkDatagram QUdpSocket::receiveDatagram() Param – qint64 maxsize = -1 Receives datagram no larger than maxSize and returns it in QNetworkDatagram object. qint64 QUdpSocket::writeDatagram() (overloaded) Params vary Sends datagram to host address and port number specified. bool QAbstractSocket::bind() (overloaded) After binding, signal QUdpSocket::readyRead() is emitted whenever a UDP datagram arrives on the specified address and port. Networking & Cloud Computing QUdpSocket – Signal Signal void QIODevice::readyRead() Emitted once whenever datagrams arrive on the specified address and port. QUdpSocket / UDP Summary - • UDP - Lightweight, unreliable, datagram-oriented, connectionless protocol. Can be used when reliability is not important; • UDP - Transfers data as datagrams instead of as a continuous stream of data - TCP. • Datagram - A data packet of limited size (normally smaller than 512 bytes), containing the IP address and port of the datagram's sender and receiver, in addition to the data being transferred. • Broadcast – One host broadcasts a datagram to the network, which all other hosts on the network can receive. Datagram sent to special address QHostAddress::Broadcast (255.255.255.255) Networking & Cloud Computing UDP Networking examples UDPListener.cpp void UDPListen::listenMessage() // [slot] Connected to button clicked() { // Initialize UDP socket - LocalHost is IP address 127.0.0.1 udp->bind(QHostAddress::LocalHost, 7755); // QUdpSocket *udp; connect(udp, SIGNAL(readyRead()), this, SLOT(readMessage())); } void UDPListen::readMessage() // [slot] Connected to readyRead() signal { QByteArray buffer; buffer.resize(udp->pendingDatagramSize()); QHostAddress senderAddress; quint16 senderPort(0); udp->readDatagram(buffer.data(),buffer.size(),&senderAddress,&senderPort); // Handle output - // Sender: senderAddress.toString() // Sender port: QString::number(senderPort) // Message: buffer.data() } Networking & Cloud Computing UDP Networking example UDPSender.cpp void UDPSend::sendMessage() // [slot] Connected to button clicked() { lblInfo->setText(\"Sending message\"); data.clear(); // QByteArray data; data.append(selectMsg().toLatin1()); udp->writeDatagram(data, QHostAddress::LocalHost, 7755); } Broadcast // Broadcast Listener udp->bind(1234,QUdpSocket::ShareAddress) // QUdpSocket *udp; // Broadcast Sender void UDPBroadcast::sendMessage() { lblInfo->setText(\"Sending message\"); data.clear(); // QByteArray data; data.append(selectMsg().toLatin1()); udp->writeDatagram(data, QHostAddress::Broadcast, 1234); } Networking & Cloud Computing Cloud Computing Definition of Cloud Computing - Cloud computing is the on-demand delivery of IT resources over the Internet with pay-as-you-go, or monthly subscription, pricing. Instead of buying, owning, and maintaining physical data centres and servers, users can access technology services, such as computing power, storage, and databases, on an as-needed basis from a cloud provider. Advantages / Benefits of Cloud Computing - • Cost – Eliminates capital cost of providing and maintaining hardware, software, datacentres and specialist staff. • Speed – Vast computing capacity can be accessed within minutes. • Global scale (Elasticity) - Capacity can be scaled elastically (up or down) to deliver the appropriate amount of IT resources as and when required, and at varying geographic locations. • Productivity – Capacity is available on demand – no planning, acquisition, installation, setup etc required. IT staff can concentrate on actual computing. • Performance – Most providers have a worldwide network of secure datacentres, which are regularly upgraded. Reduces latency and potential downtime. Networking & Cloud Computing Cloud Computing • Reliability – Backup, disaster recovery, and business continuity are easier and less expensive because data can be mirrored at multiple sites on the network. • Security – Most providers offer broad set of policies, technologies, controls, and expertise to protect data, applications, and infrastructure from threats. Types of Cloud Computing - • Public cloud - The entire computing infrastructure is owned and operated by the cloud provider, and the provider delivers services to the customer over the internet. Customers do not have to maintain their own IT infrastructure, and can quickly add more users or computing power as needed. Multiple customers share the cloud provider’s IT infrastructure. • Private cloud - A private cloud is used exclusively by one organization. It can be hosted at the organization’s location, or at the cloud provider’s datacentre. A private cloud provides the highest level of security and control. • Hybrid cloud – Combines both public and private clouds. Generally, hybrid cloud customers host their business-critical applications on their own servers for more security and control, and host their secondary applications at the cloud provider’s location. Networking & Cloud Computing Cloud Computing Types of Cloud Computing services – • Infrastructure as a Service (IaaS) - Enables customers to access infrastructure services on an on- demand basis via the internet. The key advantage is that the cloud provider hosts the infrastructure components that provide computing, storage, and network capacity so that subscribers can run their workloads in the cloud. The cloud subscriber is usually responsible for installing, configuring, securing, and maintaining any software on the cloud solutions, such as database, middleware, and application software. • Platform as a Service (PaaS) – Provides developer tools and software that customers need to build and manage mobile and web applications without investing in, or maintaining, the underlying infrastructure. The provider hosts the infrastructure and middleware components, and the customer accesses those services via a web browser to develop software applications. • Serverless computing – Cloud provider handles setup and management of servers. Allows customers to focus on building application functionality without managing servers and infrastructure. Overlaps with PaaS. There is still a server, but it is 'invisible' to the customer. • Software as a Service (SaaS) - Delivery of software applications to the customer, hosted at the cloud provider’s location. The customer accesses the applications over the internet. Underlying hardware, infrastructure, operating system, and software are managed by the cloud provider. Networking & Cloud Computing Cloud Computing Service Providers – Market share (June 2022) • Amazon Web Services (AWS) - 34% • Microsoft Azure - 22% • Google Cloud - 9% • Alibaba Cloud - 6% • Oracle / IBM Cloud - 2% each Networking & Cloud Computing Cloud Computing Uses of cloud computing - • Create cloud-native applications – Build, deploy, and scale web and mobile applications. • Test and build applications – Use cloud infrastructure that can easily be scaled up or down. • Store, backup, and recover data, disaster recovery – Data stored offsite, accessed over the Internet. • Analyze data – Use cloud services such as machine learning and artificial intelligence. • Stream audio and video – Anywhere, anytime accessibility with global distribution. • Embed intelligence – Engage customers, and provide insights from data captured. • Deliver software on demand (SaaS) – Latest versions and updates available anytime, anywhere. Networking & Cloud Computing Summary Exam - • Basic knowledge of protocols, TCP / UDP in more detail; • Know how to implement UDP & TCP in Qt – Send / Client and Listen / Server; • Basic knowledge of the use / value of cloud computing. To do - • Read TL104 and TL105; • Exercise 10; • Past Papers; • Qt documentation – “Networking and Connectivity”, “Network Programming with Qt” • Qt documentation - Networking Classes • Qt examples on UDP and TCP. • On-line course – MS Azure Fundamentals.","libVersion":"0.2.3","langs":""}