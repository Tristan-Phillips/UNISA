{"path":"Subjects/COS3711 - Advanced Programming/Unsorted/Virtual Classes/VC02_OOP_UML.pdf","text":"COS3711 – Advanced Programming Virtual Class: COS3711 - 22 - ALL OOP, UML Diagrams Lecturer: Dr C Pilkington Tutor: Ron Barnard Object-Oriented Programming Principles Introduction Object-Oriented Programming • OOP is a programming paradigm - a standard, perspective, or set of ideas, or a pattern / model. It allows us to think of the data in our program in terms of real-world objects, with both properties and behaviours. • Building blocks of OOP: classes, objects, methods, attributes / properties. • OOP uses the concepts of classes and objects. Used to structure software applications into simple, re-usable pieces of code 'blueprints' / 'templates' - (called classes), which are then used to create (instantiate) individual instances of objects. • OOP arranges software design around objects (which have attributes and behaviour), rather than functions and logic. OOP focuses on the objects that need to be manipulated, rather than the logic required to manipulate them. Object-Oriented Programming Principles OOP - Terminology Terminology • Class – User defined data type – Classes are private by default; ◦ QString myString(“A string”); int num(3); MyClass myObject(“data”, number); • Classes have both - ◦ Properties - define the state. The data used by the class. ◦ Behaviours - define the behaviour / actions of the class. Methods manipulate the properties (data) of a class. • Method – Function encapsulated in a Class (OOP term for a function) - method defines behaviour. • Data member / attribute / field / property – data used within a Class; • Access modifier – Public, Protected, Private – control access to properties and methods of a class. Object-Oriented Programming Principles OOP - Terminology Terminology • Object – Class cannot be used by itself, must 'create' an Instance of a Class – 'Instantiate' an object – known as an 'instance' of the class. • Class is defined once – then instantiate one, or many, instances (objects) of the class. • Objects are what are actually used and manipulated within an application. • State – Values of data members within an Object – state of an Object. Object-Oriented Programming Principles Encapsulation Encapsulation • All properties and behaviours required for a class to perform its purpose are contained within the class (Encapsulated). Binds data and logic. • Implementation details are effectively hidden. User only needs to know how to use a class, not about any implementation details. • Information hiding – Internal details of a class can be hidden by using access modifiers – Public, Protected, Private. User can only access properties using public 'getter' and 'setter' methods. Restricts and controls access. • Encapsulation reduces complexity – class is a 'black-box' with limited public interface. • Encapsulation – improves security – restricted access to data. Object-Oriented Programming Principles Abstraction, Inheritance Abstraction • An extension of encapsulation – some properties / methods of a class are hidden to simplify the interface. • Only essential / necessary features of a class are exposed publicly – reduces complexity. User only works with a simple interface, complexity is hidden within a class. Inheritance • Ability to create a new class (sub-class) from an existing base class (super-class). • Derived class (sub-class) acquires all the properties and methods of the base class. • Promotes code re-use – extends the existing functionality of the base class. • Terminology - abstract base class, virtual method, pure virtual method, Object-Oriented Programming Principles Composition vs Inheritance (Theory) Composition Inheritance “HAS-A” eg: Car HAS An engine. “IS-A” eg: biggerList IS A list. Design class on what it does. Design class on what it is. Loose coupling. Tight coupling. Defined at run-time – components can be replaced / changed (Same type). Defined at compile-time – fixed. Preserves encapsulation – can only be accessed through public interfaces. Breaks encapsulation – internal details of base class are exposed. Easy to maintain. Can be difficult to maintain. Object-Oriented Programming Principles Composition vs Inheritance (Code) Composition Inheritance class ExerciseList { public: ExerciseList(); ~ExerciseList(); void add(Exercise *e); QList<Exercise *>* getList(); private: QList<Exercise *> *list; }; class ExerciseList : public QList<Exercise*> { public: ExerciseList(); ~ExerciseList(); }; • Example is probably more correctly described as 'Aggregation' rather than full 'Composition' – no parent / child relationship. • In general – 'Prefer composition to inheritance'. • Both Composition and Inheritance promote re-use of code. Object-Oriented Programming Principles Polymorphism Polymorphism • Polymorphism - derived from two Greek words: poly and morphs. The word \"poly\" means many and \"morphs\" means forms. So polymorphism means \"many forms\". • A sub-class can define its own unique behaviour and still share the same functionality or behaviour of its base class. • Achieved by over-riding / implementing virtual base class methods. • Pointers to base class objects can point to objects of any of its derived classes. • Base class method must be declared virtual to implement polymorphism. ◦ Virtual method must be implemented in the base class, and over-ridden in sub- class. The method cannot be private. • Pure virtual method creates an abstract class – cannot instantiate objects of abstract class. No implementation of pure virtual method in base class. ◦ Pure virtual method must be implemented in the sub-class. Object-Oriented Programming Principles Polymorphism - Example class Animal { public: Animal(); virtual void talk(); // Virtual void speak(); }; Animal::Animal() { } void Animal::talk() { qDebug() << \"Animal cannot talk\" << Qt::endl; } void Animal::speak() { qDebug() << \"Animal cannot talk\" << Qt::endl; } class Cat : public Animal { public: Cat(); void talk(); // Virtual in base void speak(); }; Cat::Cat() { } void Cat::talk() { qDebug() << \"Cat: Meouuuu\" << Qt::endl; } void Cat::speak() { qDebug() << \"Cat: Meouuuu\" << Qt::endl; } Object-Oriented Programming Principles Polymorphism - Example class Dog : public Animal { public: Dog(); void talk(); // Virtual in base void speak(); }; Dog::Dog() { } void Dog::talk() { qDebug() << \"Dog: Wooooff\" << Qt::endl; } void Dog::speak() { qDebug() << \"Dog: Wooooff\" << Qt::endl; } // Animal (main.cpp) Animal *base = new Animal; base->talk(); base->speak(); // Cat base = new Cat; base->talk(); // Virtual in base base->speak(); // Dog base = new Dog; base->talk(); // Virtual in base base->speak(); // Output Animal cannot talk Animal cannot talk Cat: Meouuuu // Virtual in base Animal cannot talk Dog: Wooooff // Virtual in base Animal cannot talk Object-Oriented Programming Principles S - O - L - I - D S Single purpose principle Class should have ONE, and only ONE purpose / responsibility. O Open-Closed principle Open for extension - Closed for modification. Class should be extendable without modifying it. L Liskov Substitution principle Should be able to substitute base-class with any of its derived classes. I Interface Segregation principle Should never be forced to implement methods that will never be used. D Dependency Inversion principle Use Abstractions, not Concretions. Object-Oriented Programming Principles Summary Benefits of Object-Oriented Programming (OOP) - • Reduction of complexity – simple single purpose structures • Re-usability of code / classes • Easier to test / debug / maintain • Security: protection of data – encapsulation / access modifiers UML Diagrams UML Class Diagrams Basic class diagram - • Class name – at the top ◦ Then data members ◦ Then member methods • name : type – Method / data name first • - Private member • + Public member • # Protected member Static member - underlined • + showCount() UML Diagrams UML Class Diagrams Visibility / access - • + Public – Can be accessed anywhere • # Protected – Within class, or derived class • - Private – Access only within class Abstract class - • Class name in italics • Pure virtual method - ◦ virtual void printInfo() = 0; ◦ implemented in derived classes UML Diagrams UML Class Diagrams Inheritance - class Undergrad : public Student class GradStudent : public Student UML Diagrams UML Class Diagrams Relationships - Inheritance Dependency Composition Aggregation Uses Past paper -","libVersion":"0.2.3","langs":""}