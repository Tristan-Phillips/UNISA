{"path":"UNISA/98906 - BSc Science in Computing/COS3751 - Techniques of Artificial Intelligence/Lecturer Notes/Examination tips/COS3751_2023_examnotes.pdf","text":"COS3751 2023 examination notes Chapters to study 1. Introduction 2. Intelligent Agents 3. Solving problems by Searching 4. Searching in Complex Environments (leave out 4.2, 4.5) 5. Adversarial Search and Games (leave out 5.5, 5.6, 5.7) 6. Constraint Satisfactory Problems 9. Inference in FOL (leave out 9.3 and 9.4) 18. Learning from examples (leave out 18.4 and further) Chapters 7 and 8 are not for the examination. However, they cover work that you should have learned previously in CS, and serve as background to Chapter 9. If your background in this is not strong, study these to better understand what’s happening in Chapter 9. Algorithms to study You need to understand the algorithms used in AI in detail. We test that by asking you to execute them. As in the assignments you will given a description of the problem, a dataset, a tree, or a graph, from which to find a solution given a specific algorithm. You also need to be able to design a state-space representation and the relevant structures for a problem so that the algorithm can use these to execute a solution. you need to be able them to execute the following algorithms/techniques in detail. This in- cludes all the calculations, each step in detail, the data structures used by the algorithm and the content of these, as well as justifications for each step (such as in FOL, for example). 1 As an example, in A*, at each step in the algorithm, it expands a node, maintains the current path, calculates f (), g(), and h() for all children of a node, and maintains a Frontier list in order to find the solution. - Breadth First Search - Uniform Cost Search - Depth First Search - Depth Limited Search - Iterative Deepening DFS - Bidirectional Search - Greedy BFS - A* search - MiniMax search - Alpha-Beta search - Constraint Satisfaction Problems - First Order Logic - Forward chaining - Backward chaining - Resolution - Resolution refutation - Decision Trees - ID3 Example questions Here are some example questions from previous papers. These don’t cover all the topics men- tioned above, but should give you some idea of the format and what to expect. There are also old exam papers floating around on the internet. Be careful when looking at those, as they are not always from dependable sources. The questions asked in your assignments are also very similar to what could be asked in the examination. 2 State Spaces 1. Three jackals and three goats come to a river. There is a boat on their side of the river that can be used by either one or two animals. All six animals must cross the river. However the jackals must not outnumber the goats at any time, in any place. It is fine to have an equal number of each, and it is also fine to have more goats than jackals in a given place. We want to determine how the animals should use the boat to ensure all of them cross the river safely. (a) Define a non-graphical (i.e. no pictures) state representation for the board. Your state representation should be such that a search algorithm will be able to start the search at any given state. (b) Defend your choice by showing that the level of abstraction is sufficient (Hint: Your state representation should only encode the necessary information). (c) Define appropriate actions for this problem. Using the successor function Result(a, S) 7! S′, show how applying the action a to state S results in state S′ (Hint: Provide an example action a, a state S, and the resulting state S′). (d) Using the state representation you defined above, draw a search tree that shows the entire search space beginning at the start node. Include all the possible states, however, do not show the illegal states (in which jackals outnumber goats on either side of the river). Searching 2. Do a thorough comparison of A* and UCS. Refer to search types, optimality, efficiency, time and space complexity, as well as the main differences in the working of the algo- rithms (for example, when goal tests are performed, how selection of nodes work, etc.). i Choose one of the above algorithms (A* search or UCS) and provide an example which shows step-by-step how the algorithm will find a path to a goal. You may use any state-space that you deem sufficient to illustrate the search process. i. Draw the search space for your example (either tree or graph), indicate the start and goal states. ii. Show step-by-step how the algorithm will find the path from start to goal. Show the node generation, expansion, as well as any data structures that are required to perform the search. 3 Adversarial search 3. Consider the game tree in Figure 1 and then answer the questions that follow (the static utility values for the leaf nodes are provided below each leaf node). MAX nodes are drawn as squares, and MIN nodes are drawn as circles. (a) Why are Alpha/Beta pruning searches needed? (b) Explain an Alpha/Beta search. Pay particular attention to the pruning mechanism, as well as the way in which this pruning mechanism is implemented in the algo- rithm. (c) Using the provided search tree, show how the alpha/beta search proceeds from the start (root) node. Your answer must proceed in a step-by-step fashion showing the α/β values for each node as the search progresses (i.e. the α/β values as they propagate down the tree to child nodes), as well as which values are returned to the parent nodes. Also clearly indicate the tests for α/β cuts. The search should progress in a left to right fashion. A B D J 6 E K 22 L 8 F M 24 C G N 12 I P 9 Q 9 R 3 MIN MAX MIN MAX Figure 1: Adversarial Search 4 Constraint Satisfaction Problems 4. Answer the following questions on CSPs. (a) Differentiate between node-, arc-, and k-consistency. (b) Explain why achieving arc consistency is beneficial. Provide an example to justify your answer. (c) Consider the following cryptarithmetic puzzle: C R O S S + R O A D S D A N G E R Re-write the puzzle in terms of a CSP by defining the following: i The variables for the puzzle. ii The domains for the puzzle. iii The constraints for this puzzle. iv Provide the solution to this crypt-arithmetic puzzle, show all the steps you took to arrive at the answer (also show which heuristic you employed, and your backtracking strategy (if used)). v Draw the constraint hypergraph for the puzzle. First order logic 5. Consider the following English statements: -1- Anyone who passes their AI exam and who wins the lottery is happy. -2- Anyone who studies hard or is lucky, passes their exams. -3- Jack did not study. -4- Jack is lucky. -5- Anyone who is lucky wins the lottery. Answer the following questions: (a) Provide a vocabulary for the statements. (b) Translate the above English sentences to FOL statements using the vocabulary you defined above. (c) Convert the FOL statements obtained into CNF. (d) Use resolution refutation to prove that Jack is happy. 5 Machine Learning 6. Consider the following table which provides examples of weather conditions used to determine if a inexperienced pilot should fly on a particular day. Nr Outlook Temperature Humidity Windy Fly? 1 Sunny Hot High No Yes 2 Sunny Hot High Yes No 3 Overcast Hot High No Yes 4 Rain Mild High No Yes 5 Rain Cool Normal No Yes 6 Rain Cool Normal Yes No 7 Overcast Cool Normal Yes No 8 Sunny Mild High No Yes 9 Sunny Cool Normal No Yes 10 Rain Mild Normal No Yes 11 Sunny Mild Normal Yes Yes 12 Overcast Mild High Yes Yes 13 Overcast Hot Normal No Yes 14 Sunny Mild High Yes No Generate the complete decision tree for this table. Show all your calculations during the generation of the tree (all the entropy, remainder and information gain calculations for each new node in the tree). 6","libVersion":"0.2.3","langs":""}