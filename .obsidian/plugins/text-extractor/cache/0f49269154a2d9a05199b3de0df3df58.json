{"path":"Subjects/COS3761 - Formal Logic III/Unsorted/COS3761/exam pack/Materials/Cribsheet.pdf","text":"Logic cribsheet To be used in conjunction with the notes. Not to be used in exams or the Xmas test. 1 Equivalences All logicians know these equivalences, and I think you should too. I will let A, B, C denote arbitrary formulas, and ≡ denote ‘logically equivalent’. Propositional equivalences Equivalences involving ∧ 1. A ∧ B ≡ B ∧ A (commutativity of ∧) 2. A ∧ A ≡ A (idempotence of ∧) 3. A ∧ ⊤ ≡ A 4. ⊥ ∧ A and ¬A ∧ A ≡ ⊥ 5. (A ∧ B) ∧ C ≡ A ∧ (B ∧ C) (associativity of ∧) Equivalences involving ∨ 6. A ∨ B ≡ B ∨ A (commutativity of ∨) 7. A ∨ A ≡ A (idempotence of ∨) 8. ⊤ ∨ A and ¬A ∨ A are equivalent to ⊤ 9. A ∨ ⊥ ≡ A 10. (A ∨ B) ∨ C ≡ A ∨ (B ∨ C) (associativity of ∨) Equivalences involving ¬ 11. ¬⊤ ≡ ⊥ 12. ¬⊥ ≡ ⊤ 13. ¬¬A ≡ A Equivalences involving → 14. A → A ≡ ⊤ 15. ⊤ → A ≡ A 16. A → ⊤ ≡ ⊤ 17. ⊥ → A ≡ ⊤ 18. A → ⊥ ≡ ¬A 19. A → B ≡ ¬A ∨ B ≡ ¬(A ∧ ¬B) 20. ¬(A → B) ≡ A ∧ ¬B. Equivalences involving ↔ 21. A ↔ B ≡ (A → B) ∧ (B → A) ≡ (A ∧ B) ∨ (¬A ∧ ¬B) ≡ ¬A ↔ ¬B 22. ¬(A ↔ B) ≡ A ↔ ¬B ≡ ¬A ↔ B ≡ (A ∧ ¬B) ∨ (¬A ∧ B) De Morgan laws 23. ¬(A ∧ B) ≡ ¬A ∨ ¬B 24. ¬(A ∨ B) ≡ ¬A ∧ ¬B Distributivity of ∧, ∨ 25. A ∧ (B ∨ C) ≡ (A ∧ B) ∨ (A ∧ C), (B ∨ C) ∧ A ≡ (B ∧ A) ∨ (C ∧ A). 26. A ∨ (B ∧ C) ≡ (A ∨ B) ∧ (A ∨ C), (B ∧ C) ∨ A ≡ (B ∨ A) ∧ (C ∨ A). 27. A ∧ (A ∨ B) ≡ A ∨ (A ∧ B) ≡ A, A ∧ (B ∨ A) ≡ (A ∧ B) ∨ A ≡ A, etc. First-order equivalences Here, x, y are any variables. 28. ∀x∀yA ≡ ∀y∀xA 29. ∃x∃yA ≡ ∃y∃xA 30. ¬∀xA ≡ ∃x¬A 31. ¬∃xA ≡ ∀x¬A 32. ∀x(A ∧ B) ≡ ∀xA ∧ ∀xB 33. ∃x(A ∨ B) ≡ ∃xA ∨ ∃xB Equivalences involving bound variables 34. If x does not occur free in A, then ∀xA ≡ ∃xA ≡ A 35. If x doesn’t occur free in A, then ∃x(A ∧ B) ≡ A ∧ ∃xB, ∀x(A ∨ B) ≡ A ∨ ∀xB 36. If x does not occur free in A then ∀x(A → B) ≡ A → ∀xB, and ∃x(A → B) ≡ A → ∃xB. 37. Note: if x does not occur free in B then ∀x(A → B) ≡ ∃xA → B, and ∃x(A → B) ≡ ∀xA → B. Renaming bound variables 38. If B is got from A by replacing all free occur- rences of x in A by a variable y that doesn’t oc- cur in A, then ∃xA ≡ ∃yB and ∀xA ≡ ∀yB. Eg ∀x∃y bought(x, y) ≡ ∀z∃v bought(z, v). Equivalences involving equality 39. For any term t, t = t is valid. 40. For any terms t, u, t = u ≡ u = t 41. (Leibniz principle) If B is got from A by re- placing one or more free occurrences of x by a variable y that does not occur in A, then x = y → (A ↔ B) is valid. Example: x = y → (∀zR(x, z) ↔ ∀zR(y, z)) is valid. 1 2 Natural deduction rules A1, . . . , An ⊢ B means there’s a natural deduction proof of B from the givens A1, . . . , An. There are two rules for each logical symbol (but three for ¬). The rules reﬂect the meanings of the symbols; this helps in remembering them. • ∧-introduction, ∧I. To introduce a formula of the form A ∧ B, you have to have already introduced A and B. 1 A we proved this. . . ... (other junk) 2 B and this. . . 3 A ∧ B ∧I(1, 2) • ∧-elimination, ∧E. If you have managed to write down A∧B, you can go on to write down A and/or B. 1 A ∧ B we proved this somehow 2 A ∧E(1) 3 B ∧E(1) • →-introduction, ‘arrow-introduction’, →I. To introduce a formula of the form A → B, you assume A and then prove B. During the proof, you can use A as well as any- thing already established. But you can’t use A or anything from the proof of B from A later on (because it was based on an extra assumption). So you isolate the proof of B from A, in a box: 1 A ass ⟨the proof⟩ hard struggle 2 B we made it! 3 A → B →I(1, 2) Nothing inside the box can be used later. In natural deduction, boxes are used when we make additional assumptions. The ﬁrst line in- side a box should always be labelled ‘ass’ (as- sumption) — with one exception, in ∀I, com- ing later. • →-elimination, →E. If you have managed to write down A and A → B, in any order, you can go on to write down B. (This is modus ponens.) 1 A → B we got this somehow. . . ... other junk 2 A and this too. . . 3 B →E(1, 2) • ∨-introduction, ∨I. To prove A ∨ B, prove A, or (if you prefer) prove B. 1 A proved this somehow 2 A ∨ B ∨I(1) 3 B ∨ A ∨I(1) B can be any formula at all! • ∨-elimination, ∨E. To prove something from A ∨ B, you have to prove it by assuming A, AND prove it by assuming B. (This is arguing by cases.) 1 A ∨ B we got this somehow 2 A ass 5 B ass 3 ... the 1st proof 6 ... the 2nd proof 4 C we got it 7 C we got it again 8 C ∨E(1, 2, 4, 5, 7) The assumptions A, B are not usable later, so are put in (side-by-side) boxes. Nothing inside the boxes can be used later. • ¬-introduction, ¬I. To prove ¬A, you as- sume A and prove ⊥. As usual, you enclose the proof of ⊥ from assumption A in a box. Nothing inside the box can be used later. 1 A ass 2 ... more hard work, oh no 3 ⊥ we got it! 4 ¬A ¬I(1, 3) • ¬-elimination, ¬E. From A and ¬A, deduce ⊥. 1 ¬A proved this somehow. . . 2 ... junk 3 A . . . and this 4 ⊥ ¬E(1, 3) • ¬¬-elimination, ¬¬. From ¬¬A, deduce A. 1 ¬¬A proved this somehow. . . 2 A ¬¬(1) • ⊤-introduction, ⊤I. You can introduce ⊤ anywhere (for all the good it does you). • ⊤-elimination, ⊤E. You can prove nothing new from ⊤, sorry! • ⊥-introduction, ⊥I. To prove ⊥, you prove A and ¬A (for any A you like). This is the same rule as ¬E. (There are two names for this rule!) 2 • ⊥-elimination, ⊥E. You can prove any for- mula at all from ⊥! 1 ⊥ got this somehow. . . 2 A ⊥E(1) • ↔-introduction, ↔I. To prove A ↔ B, prove both A → B and B → A: 1 B → A proved this somehow. . . ... (stuff) 2 A → B . . . and this 3 A ↔ B ↔I(1, 2) Alternatively, prove A and B, or prove ¬A and ¬B — it’s your call which. (More a derived rule: not available in Pandora.) • ↔-elimination, ↔E. 1. From A ↔ B and A, you can prove B. 1 A ↔ B proved this somehow. . . 2 A . . . and this 3 B ↔E(1, 2) 2. From A ↔ B and B, you can prove A. 1 A ↔ B proved this somehow. . . 2 B . . . and this 3 A ↔E(1, 2) • ∃-introduction, ∃I. Let A(x) be a formula. To prove a sentence ∃xA, you have to prove A(t), for some closed term t of your choice. ... 1 A(t) got this somehow. . . 2 ∃xA(x) ∃I(1) Here, and below, A(t) is the sentence got from A(x) by replacing all free occurrences of x by t. A closed term is one with no variables — it’s made with only constants and function symbols. • ∃-elimination, ∃E. Let A(x) be a formula. If you have managed to write down ∃xA(x), you can prove a sentence B from it by assum- ing A(c), where c is a new constant not used in B or in the proof so far, and proving B from this assumption. During the proof, you can use anything already established. But once you’ve proved B, you cannot use any part of the proof, including c, later on. I mean it! So we isolate the proof of B from A(c), in a box: 1 ∃xA(x) got this somehow 2 A(c) ass ⟨the proof⟩ hard struggle 3 B we made it! 4 B ∃E(1, 2, 3) c is often called a Skolem constant. • ∀-introduction, ∀I. To introduce the sentence ∀xA, for some A(x), you introduce a new con- stant, say c, not used in the proof so far, and prove A(c). During the proof, you can use anything already established. But once you’ve proved A(c), you can no longer use the con- stant c later on. So isolate the proof of A(c), in a box: 1 c ∀I const ⟨the proof⟩ hard struggle 2 A(c) we made it! 3 ∀xA ∀I(1, 2) This is the only time in ND that you write a line (1) containing a term, not a formula. And it’s the only time a box doesn’t start with a line labelled ‘ass’. • ∀-elimination, ∀E. Let A(x) be a formula. If you have managed to write down ∀xA, you can go on to write down A(t) for any closed term t. (It’s your choice which t!) ... 1 ∀xA we got this somehow. . . 2 A(t) ∀E(1) • Reﬂexivity of equality (reﬂ). Whenever you want, you can introduce the sentence t = t, for any closed L-term t and for any L you like. ... bla bla bla 1 t = t reﬂ • Substitution of equal terms (=sub). If A(x) is a formula, t, u are closed terms, you’ve proved A(t), and you’ve also proved either t = u or u = t, you can go on to write down A(u). 1 A(t) got this somehow. . . 2 ... yada yada yada 3 t = u . . . and this 4 A(u) =sub(1, 3) 3 Derived rules and Lemmas These are not necessary, but they help to shorten proofs. • Derived rule =sym (symmetry of =). 1 c = d got this somehow. . . 2 d = c =sym(1) • Derived rule PC (Proof by Contradiction). To prove A, assume ¬A and prove ⊥: 1 ¬A ass 2 ... Mmm. . . 3 ⊥ got it! 4 A P C(1, 3) This collapses applications of ¬I and ¬¬ into one step. • Derived rule ∀→E. This collapses applica- tions of ∀E and →E into one step. 1 ∀x∀y(A(x, y) → B(x, y)) got this. . . 2 A(t, u) . . . this too 3 B(t, u) ∀→E(2, 1) • Lemma A ∨ ¬A. In Pandora, this is called ‘EM’, standing for ‘excluded middle’: in any situation, either A is true or ¬A is true. It is useful in all sorts of proof. 1 A ∨ ¬A lemma 2 A ass 5 ¬A ass ... ... 4 B got it. . . 7 B . . . and again! 8 B ∨E(1, 2, 4, 5, 7) It divides the argument into two cases (A, and ¬A). This makes it easier, since you know more in each case. It’s the only lemma I’m going to give you. . . so remember it well. But always you have to choose which A to use. Pandora LEMMA In Pandora, the Lemma button can be used to break a proof into two halves. For example, if you are proving C from A, you might want to prove some half-way formula B from A ﬁrst, and then prove C from B. You can do this by making B a Pandora lemma. This can be helpful to make a clearer proof, but sometimes it’s hard to manage without it. For ex- ample, to show q, (p → q) → (r → s), r ⊢ s in Pandora, it seems easiest to make a lemma p → q. (Alternatively, use EM to get (p → q) ∨ ¬(p → q) and work from there.) This is a ‘feature’ of Pandora, and is not needed when you do proofs on paper. Please read the help in Pandora, and try its tutori- als. They were written for you! 3 Some dodgy ND ‘proofs’ 1 ¬A given 2 A ass 3 ¬A ✓(1) 4 ⊥ ¬E(3, 2) 5 ¬A ¬I(2, 4) This is correct, but silly. The following is better: 1 ¬A given 2 ¬A ✓(1) The next three are wrong. They are not proofs at all. They are just junk, like ∀) → ∃p∧. 1 ¬A given 2 A ass 3 ¬A ✓(1) 4 ⊥ ¬E(3, 2) 5 ¬A ✓(3) ←WRONG 1 ¬A given 2 A ass 3 ¬A ✓(1) 4 ⊥ ¬E(3, 2) 5 ¬A ⊥E(4) ←WRONG Formulas in the box can’t be used later. 1 ∀x∃y(x < y) given 2 c ∀I const 3 ∃y(c < y) ∀E(1) 4 (c < d) ass 5 (c < d) ✓(4) 6 (c < d) ∃E(3, 4, 5) ←WRONG 7 ∀x(x < d) ∀I(2, 6) 8 ∃y∀x(x < y) ∃I(7) The ‘Skolem constant’ d, introduced on line 4, must not occur in the conclusion (lines 5, 6): see rule ∃E above. So the ∃E on line 6 is illegal. This is ir- reparably wrong, as the conclusion does not follow from the given: ∀x∃y(x < y) ̸⊢ ∃y∀x(x < y), and ∀x∃y(x < y) ̸|= ∃y∀x(x < y). (Exercise: ﬁnd a structure in which ∀x∃y(x < y) is true and ∃y∀x(x < y) is false.) 4","libVersion":"0.2.3","langs":""}