{"path":"UNISA/98906 - BSc Science in Computing/COS3711 - Advanced Programming/Unsorted/Notes/Stuvia-1100783-cos3711-exam-pack-2022.pdf","text":"COS3711 EXAM PACK 2022 written by SmartCrew www.stuvia.com Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal COS3711 EXAM PACK Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides [TURN OVER] UNIVERSITY EXAMINATIONS June/July 2021 COS3711 Advanced Programming 80 Marks Duration 2 Hours EXAMINERS: FIRST: DR CL PILKINGTON SECOND: MR K HALLAND EXTERNAL: DR L MARSHALL (UNIVERSITY OF PRETORIA) This paper consists of 5 pages. Instructions 1. You may type your answers in a word processor (and then print to PDF for submission) or handwrite your answers (and then scan to PDF). 2. Answer all questions. 3. The mark for each question is given in brackets next to each question. 4. Please answer questions in order of appearance. 5. Note that no pre-processor directives are required unless specifically asked for. Remember to complete the Honesty Declaration when submitting your answers. By submitting your answers you are confirming that your submission is your own, unaided work. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 2 COS3711 June/July 2021 [TURN OVER] Many different vaccines are produced globally to help provide vaccinated persons with immunity from specific infectious diseases. The following points apply to a simplified scenario to be used in this examination. [1] All vaccines must be administered in some way (usually by mouth or by injection). Also, all vaccines should be able to return a string representation of its state. [2] There are two types of vaccines: inactivated vaccines (where the infectious material has been destroyed using chemicals, heat, or radiation) and attenuated vaccines (where the process used to create them involves disabling the virulent properties or using a closely related but less dangerous organism). [3] The cholera vaccine is a type of attenuated vaccine, and is normally administered in a number of doses. The rabies vaccine is a type of inactivated vaccine, and is normally based on a particular strain of rabies. [4] Users should only be able to create instances of cholera, rabies, and similar types of vaccines. [5] A classic factory method design pattern should be used to create instances of the types of inactivated and attenuated vaccines. [6] There should be an object that contains a list of vaccine instances. Using the scenario above, answer the questions below. Question 1 [20 marks] 1.1 Using all the detail in the points [1] to [6] in the scenario above, draw a UML class diagram to model the scenario. There should be enough detail to show how data will be passed between objects; you do not need to include constructors or accessors/mutators, nor show a client/GUI class. If the UML class diagram is being drawn by hand, use underline to indicate italics. (18) 1.2 Why would a factory method design pattern be a more appropriate design than an abstract factory design pattern? (2) Question 2 [24 marks] The process of adding a vaccine instance to the vaccine list is as follows. a. An application is run by the main GUI/client as a separate process that gets vaccine details from the user. The data is returned to the main GUI/client as a string via the process’s standard output. b. Using the factory method, an appropriate vaccine instance is created in the main GUI/client code. c. This instance is then added to the list of vaccines. d. When a vaccine instance is added to the list, using inter-object communication, a signal is automatically sent that is made up of the string representation of the vaccine instance that was added (as was noted in point [1] in the scenario at the start of this exam paper). e. This signal is then picked up by the main GUI/client and leads to the text being added to a QListWidget on the main GUI/client. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 3 COS3711 June/July 2021 [TURN OVER] The outline of the header of the main GUI/client code is as follows. class MainWindow : public QMainWindow { Q_OBJECT public: explicit MainWindow(QWidget *parent = 0); ~MainWindow(); private: Ui::MainWindow *ui; private slots: void createVaccine(); }; 2.1 An application named vaccineData.exe can be used to gather vaccine data from a user. Write the code that runs this application as a separate process, where its output is managed by the function in the main GUI/client named create(). (4) 2.2 Write the code for the create() function. It retrieves the output from the application process in 2.1 and calls the following factory method code to create an instance of a vaccine. Vaccine* VaccineFactory::createVaccine(QString type, QString administrationMethod, QString str1, QString str2) { if (type == \"Cholera\") return new Cholera(administrationMethod, str1, str2.toInt()); else if (type == \"Rabies\") return new Rabies(administrationMethod, str1, str2); return NULL; } The output from the application read from the standard output is in the form vaccineType*argument1*argument2*argument3. You do not need to include the code for adding the instance to the vaccine list. (8) 2.3 Write the code for the class declaration of the vaccine list class as well as the implementation code of the function that adds a vaccine instance to the list. Remember to take note of the process given at the start of this question (specifically point d). (8) 2.4 In point e in the process above, the text containing the string representation of a vaccine instance is added to a QListWidget on the GUI. The following code has been provided (where ui->listWidget is the QListWidget variable and string is the string representation of the vaccine). QListWidget *newItem = new QListWidget; newItem->setText(string); ui->listWidget->setItem(1, newItem); However, this code is not working correctly. Make the necessary corrections. (2) Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 4 COS3711 June/July 2021 [TURN OVER] 2.5 Could a QStringListModel have been used instead of a QListWidget? If not, explain in detail why not; if it can, explain in detail how it could be achieved. Note that there are no marks for indicating yes or no. (2) Question 3 [21 marks] The vaccine list should be saved as an XML file when the application closes. Assume a MyVaccineList class with the following interface. int size() const // returns the number of items in the list Vaccine* at(int) // returns the Vaccine instance at the specified position in the list The XML file should have the following structure. <VaccineList> <vaccine class=\"Cholera\"> <administered>Unknown administration method</administered> <process>Unknown process</process> <doses>0</doses> </vaccine> <vaccine class=\"Cholera\"> <administered>injection</administered> <process>disabled</process> <doses>2</doses> </vaccine> </VaccineList> 3.1 Reflective programming methods will be used to access data from vaccine instances in the list. Explain in detail what needs to be in place in the classes involved to allow this to be implementable. You should indicate clearly what needs to be done in which classes. (5) 3.2 Use DOM to write the data from the vaccine list to the XML structure given above. Consider the following declarations and partial code (where the vaccine list is passed as a pointer to the write() function). Remember to use reflective programming techniques so that the code is as generic as possible. QDomDocument xmlDoc; QDomElement root; root = xmlDoc.createElement(\"VaccineList\"); // set up root element xmlDoc.appendChild(root); void XmlWriter::write(MyVaccineList *mvl) { // loop through all items in list for (int item=0; item<mvl->size(; item++) { const QMetaObject* meta = // get the meta-object // set up the vaccine tag // loop through all the instance’s properties // access instance’s properties // create the appropriate XML tags } Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 5 COS3711 June/July 2021 // write data to file QFile xmlfile(\"vaccineList.xml\"); xmlfile.open(QIODevice::WriteOnly); QTextStream toFile(&xmlfile); toFile << doc.toString(); xmlfile.close(); } Supply the code where specifically required (indicated in bold italics) so that the data in the vaccine list is written to file. (15) 3.3 It has been suggested that SAX could just as easily be used to generate the XML file. Comment on this suggestion. (1) Question 4 [15 marks] 4.1 An optional property may be added to a vaccine instance indicating the authorisation code of the user who added it. The code should be made up of three to five uppercase alphabetic characters followed by a hyphen and then 3 digits. An optional final character may be included. Give the following: (a) The input mask, indicating where this mask would be used. (3) (b) The regular expression that could be used to ensure that a valid value is entered. (3) (c) Assuming a vaccine instance named vac, add the user authorisation code code to the instance’s properties. (2) (d) Is it necessary to use both the input mask and regular expression to ensure a valid entry, explaining why you say so? Note that there are no marks for indicating only yes or no. (2) 4.2 The following VaccineMemento class has been used to provide run-time backup for the vaccine list. However, it is leading to errors. Rewrite the code so that the errors are fixed and the classic memento pattern is implemented. class VaccineMemento { private: VaccineMemento(); QList<QStringList> getState(); void setState(QList<QStringList> v); }; (2) 4.3 An often-given advantage of cloud computing is that there is no longer the need to guess infrastructure in-house capacity. Explain what this means in terms of the scenario used in this exam. (3) © UNISA 2021 Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides COS3711 JUNE/JULY 2021 QUESTION 1 1.1 QUESTION 2 2.1 //preprocessor directive #include <QProcess> //declare process data member QProcess *process; //create process in client/GUI constructor process = new QProcess(); Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides //line of code to start a process in createVaccine slot process->start(\"vaccineData.exe\"); //interobject communication between the process and the function to create a vaccine connect(process, SIGNAL(readyReadStandardOutput()),this, SLOT(create())); 2.2 //implementation of the create function Vaccine* MainWindow::create() { QString data = QString(process->readline()); QStringList dataList = data.split(\"*\"); Vaccine* vaccine = factory->createVaccine(dataList[0], dataList[1], dataList[2], dataList[3]); return vaccine; } 2.3 //VaccineListClass #include \"vaccine.h\" #include <QList> class VaccineList { public: VaccineList(); signals: void vaccineAdded(QString); public slots: void addVaccine(Vaccine* v); Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides private: QList<Vaccine*> vaccineList; }; //addVaccine implementation void VaccineList::addVaccine(Vaccine* v) { vaccineList.append(v); QString vaccine = // need help on getting the string representatin of the vaccine emit vaccineAdded(vaccine); } 2.4 //QListWidget QListWidget *newItem = new QListWidget; newItem->setText(string); ui->listWidget->setItem(1, newItem); QUESTION 3 3.1 The Vaccine class should be a QObject and consists of a Q_OBJECT macro which is used by the moc to create metaobjects. The class should also make use of QMetaObject and QMetaproperty classes in order to get the information about the objects at runtime. 3.2 //QDom XML QDomDocument xmlDoc; QDomElement root; root = xmlDoc.createElement(\"VaccineList\"); // set up root element Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides xmlDoc.appendChild(root); void XmlWriter::write(MyVaccineList *mvl) { // loop through all items in list for (int item=0; item < mvl->size(); item++) { const QMetaObject* meta = mvl(item)->metaObject(); for(int i = 0; i < meta->propertyCount(); i++) { QMetaProperty metaProperty = metaObject->property(i); const char* propertyName = metaProperty.name(); QVariant value = mvl(item)->property(propertyName); QString propertyValue = value.toString(); QDomElement vaccine = xmlDoc.createElement(\"Vaccine\"); vaccine.setAttribute(\"class\", \"Cholera\"); root.append(vaccine); QDomElement administered = xmlDoc.createElement(\"administered\"); QDomText adminText = xmlDoc.createTextNode(propertyValue[0]); vaccine.append(adminText); QDomElement process = xmlDoc.createElement(\"process\"); QDomText processText = xmlDoc.createTextNode(propertyValue[1]); vaccine.append(processText); QDomElement doses = xmlDoc.createElement(\"doses\"); QDomText dosesText = xmlDoc.createTextNode(propertyValue[2]); vaccine.append(dosesText); Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides } } // write data to file QFile xmlfile(\"vaccineList.xml\"); xmlfile.open(QIODevice::WriteOnly); QTextStream toFile(&xmlfile); toFile << doc.toString(); xmlfile.close(); } QUESTION 4 4.1 b) //regular Expressions [A-Z]{3,5}[\\-][0-9]{3}(\\w)? 4.2 //VaccineMemento #include \"vaccine.h\" class VaccineMemento { private: friend class Vaccine; VaccineMemento(); QList<QStringList> getState(); void setState(QList<QStringList> v); Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides [TURN OVER] UNIVERSITY EXAMINATIONS October/November 2020 COS3711 Advanced Programming 85 Marks Duration 2 Hours EXAMINERS: FIRST: MR CL PILKINGTON SECOND: MR K HALLAND EXTERNAL: DR L MARSHALL (UNIVERSITY OF PRETORIA) This paper consists of 6 pages. Instructions 1. You may type your answers in a word processor (and then print to PDF for submission) or handwrite your answers (and then scan to PDF). 2. Answer all questions. 3. The mark for each question is given in brackets next to each question. 4. Please answer questions in order of appearance. 5. Note that no pre-processor directives are required unless specifically asked for. Remember to complete the Honesty Declaration when submitting your answers. By submitting your answers you are confirming that this is your own, unaided work. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 2 COS3711 October/November 2020 [TURN OVER] The questions in this paper are based on a simplified scenario where records of patients admitted to a hospital with infections are kept. A main client would be responsible for gathering all the required information from the user, where the recording is based on a central container or list of patient records, which is written to file when the application is closed and read in from file when the application is started. Patients (who have a patient number) are considered to be of two types: health workers (where it needs to be known where the patient works) and non-health worker patients (in which case the testing site needs to be known). Each patient record also has an object indicating the infection that the patient has (assuming that each patient has only one infection). An infection (which has an infection code) could be viral (with a flag indicating whether there is an antiviral that is effective against it) or bacterial (with an indication of an antibiotic which is effective against it). Question 1 [37 marks] 1.1 Create a UML class diagram to express the scenario described above, taking design patterns into consideration in the design. You should include the necessary classes, class attributes, class operations, and class relationships to make it clear you understand how data will be managed and passed between classes. Include the Client class to be used. (20) 1.2 Assume a GUI with the following line edits is used to get some of the required information from users. Consider the code used to set up the line edits and get the data from the user. QLineEdit *inputPatientNumber = new QLineEdit(); QLineEdit *inputInfectionCode = new QLineEdit(); ... QString patientNumber = inputPatientNumber->text(); QString infectionCode = inputInfectionCode->text(); 1.2.1 Which anti-pattern could be identified here? Explain your choice. (2) 1.2.2 Provide the code (based on that provided above) that uses a QRegExpValidator to force a user to enter a patient number in exactly the following format: • First 3 digits: number between 100 and 199. • Optional gender character (using an f or an m). • 3 or more alphabetic characters, where at least the first character is a capital letter. (11) 1.2.3 Assuming that the validator in 1.2.2 has been correctly set up, can 200mSipho be entered into inputPatientNumber? Explain why or why not. (1) Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 3 COS3711 October/November 2020 [TURN OVER] 1.2.4 Assuming that the validator in 1.2.2 has been correctly set up, can 100S be entered into inputPatientNumber? Explain why or why not. (1) 1.2.5 It has been suggested that an input mask would work better than a regular expression validator in this scenario. Explain why you agree or disagree. (2) Question 2 [19 marks] The following UML class diagram and code fragments represents a partial view of the beds available at the hospital. class Bed : public QObject { Q_OBJECT Q_PROPERTY(QString number READ getNumber) Q_PROPERTY(bool occupied READ getOccupied) public: Bed(QString, bool); QString getNumber() const; bool getOccupied() const; QString toString(); private: QString number; bool occupied; }; class ICUBed : public Bed { Q_OBJECT Q_PROPERTY(QString equipmentList READ getList) public: ICUBed(QString, bool, QString); QString getList() const; QString toString(); private: QString equipmentList; }; QString Bed::toString() { return QString(\"number:\" + number + \" occupied:\" + (occupied?\"yes\":\"no\")); } QString SurgicalBed::toString() { return QString(Bed::toString() + \" cot:\" + (cot?\"yes\":\"no\")); } Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 4 COS3711 October/November 2020 [TURN OVER] class SurgicalBed : public Bed { Q_OBJECT Q_PROPERTY(bool cot READ getCot) public: SurgicalBed(QString, bool, bool); bool getCot() const; QString toString(); private: bool cot; }; 2.1 Consider the following code. Bed sb = new SurgicalBed(\"000\", true, false); QString output = sb->toString(); The string output contains the following: number:000 occupied:yes Explain why not all three pieces of data (number, occupied, and cot) are contained in the output variable and which OOP principles are involved. (4) 2.2 The following example XML output is required <bed type=\"ICUBed\"> <number>999</number> <occupied>true</occupied> <equipmentList>HRT, ventilator</equipmentList> </bed> <bed type=\"SurgicalBed\"> <number>998</number> <occupied>true</occupied> <cot>false</cot> </bed> where the example objects used are ICUBed icu = new ICUBed(\"999\", true, \"HRT, ventilator\"); SurgicalBed surgical = new SurgicalBed(\"998\", true, false); The code below provides the skeleton code to produce the XML using DOM. You are required to add code into this skeleton to show how meta-objects will be used to gain read access to the properties of a Bed instance. [If you are typing this answer, you can copy this code into your answer and just insert the correct code as needed.] 1 2 3 4 5 6 7 QString xml = writeDom(icu).toString(); QDomDocument writeDOM(Bed *object) { QDomDocument doc; QDomElement bedElement = doc.createElement(\"bed\"); bedElement.setAttribute(); Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 5 COS3711 October/November 2020 [TURN OVER] 8 9 10 11 12 13 14 doc.appendChild(bedElement); QDomElement element = doc.createElement(); bedElement.appendChild(element); QDomText text = doc.createTextNode(); element.appendChild(text); return doc; } (11) 2.3 What impact would it make if the function Bed::getNumber() were made private? Consider access to the data in the object for both the cases where the meta-object is being used and where it is not. (2) 2.4 Is the following code legal? Explain your answer in detail. Bed bed; bed.setProperty(\"NOTE\", \"Isolation\"); (2) Question 3 [29 marks] A design decision has been made to use Qt’s model-view architecture to store the bed data. Two suggestions for this have been provided: using a QAbstractTableModel or a QStandardItemModel. 3.1 Explain in detail what the benefits and drawbacks are of using QAbstractTableModel for this scenario. (3) 3.2 Were a QAbstractTableModel to be used, how would the data be suitably visualised/seen by the user? (2) 3.3 Remembering that there are at least two types of beds that need to be managed by the model (as there may be empty cells in the table), can this be done in a QStandardItemModel, and if so, explain how? (3) Bed Number Occupied? Equipment list Cot? 998   999  HRT, ventilator 3.4 As shown in the example display in 3.3, instead of displaying strings for “Yes” or “No” in columns where Boolean values are used, it is possible to use check boxes in these columns. Explain briefly how this can be done. (2) 3.5 It could be argued that a model to manage all hospital beds should be a singleton. What would you consider to be a convincing argument in this scenario? (2) 3.6 The following code has been provided to ensure the singleton design pattern. Does this meet the requirements of the classic singleton design pattern (in which case you should explain why), or not (in which case you should rewrite it to make it implement the pattern)? Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 6 COS3711 October/November 2020 class BedsSingleton { public: QStandardItemModel* getModel(); private: BedsSingleton(); static QStandardItemModel beds; }; (4) 3.7 A print-to-file program, printBedsToFile(QString outputRequired, QString filename), receives a QString parameter representing the type of list to print (such as all vacant beds, or a full list of all equipment linked to each ICU bed). It scans the bed data model and prints the output to the file given by filename. This print program needs to be run as a separate process. Write the code necessary to start the print program as a separate process (passing \"vacant\" as the first parameter and \"vacantbeds.txt\" as the second. Use the start() function declaration below to guide you. void QProcess::start(const QString &program, const QStringList &arguments, QIODevice::OpenMode mode = ReadWrite) You should include instance creation where necessary. (5) 3.8 Assume a BedList class. The createMemento() function code is as follows. BedMemento* BedList::createMemento() { QMultiMap<QString, Bed*> memento; for (int i=0; i<list->size(); i++) { const QMetaObject* meta = list->at(i)->metaObject(); QString name = meta->className(); memento.insert(name, list->at(i)); } BedMemento* m = new BedMemento(); m->setState(memento); return m; } Using this code as a guideline, give the class declaration for the BedMemento class so that it follows the classic Memento design pattern. (8) © UNISA 2020 Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides COS3711 2020-10 Memo Question 1 1.1 1.2 1.2.1 Input Kludge 1.2.2 QRegExp reg1(“ [1][1][0-9]{2} (f | m)?[A-Z]{1}[a-zA-Z]{2,} ”); QRegExpValidator *reValid(new QRegExpValidator(reg1, this)); inputPatientNumber->setValidator(reValid); 1.2.3 No , first digit must be “1” . 1.2.4 Yes, 1005 is Intermediate and can be entered into QLineEdit . 1.2.5 No , Input mask cannot handle requirement of ”1” as first character . nor optional gender character “f or m” in the patient number. Question 2 2.1 Although a base class pointer can point to objects of derived classes, polymorphism (dynamic/ runtime binding) is not implemented because toString() is not virtual in base class Bed. Base class toString() method is called, not derived class toString() method . Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 2.2 QDomDocument writeDom(Bed *object) { QDomDocument doc ; cont QMetaObject *mo = object->metaobject(); QDomElement bedElement = doc.createElement(\"bed\"); bedElement.setAttribute(“type”, mo->className); doc.appendChild(bedElement); for(int i = 1 , i < mo->propertyCount() , i++) { cont QMetaProperty prop = mo->property(i); QDomElement element = doc.createElement(prop.name()); bedElement.appendChild(element); QString value = object->property(prop.name()).toString(); QDomText text = doc.createTextNode(value); element.appendChild(text); } return doc; } 2.3 No difference when using meta-object. getNumber() not accessible outside the class. 2.4 Bed bed bed.setProperty(“NOTE”, “Isolation”); Question 3 Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 3.1 Drawback – QAbstractTableModel is ABSTRACT , and cannot be used directly . Must be sub-classed , and methods implemented. Benefit – Flexibility – Can be sub-classed to provide a suitable table model to display 2 dimensional data for the bed data . 3.2 Model must be linked to a suitable view(QTableView) – view->setModel(model) ; Need to use inheritance to sub-class a suitable model . 3.3 - Yes , QSIM can be used for table data. - Some columns may need to be blank – not all beds have same data. - It is possible to place data into specific columns / cells . 3.4 A delegate can be used to customize the view , and display check boxes, or check state, for both viewing and editing the data 3.5 Only one model to ensure that there is only one “list” of bed states, and that there is no double/multiple booking of beds. 3.6 class BedsSingleton { public : static BedsSingleton* getModel() ; private : BedsSingleton() ; static bedsSingleton* singleInstance ; QStandardItemModel beds ; }; Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 3.7 QProcess *process(new QProcess); QStringList arguments ; arguments << “vacant “ << “vacant beds.txt” ; process->start(“printBedsToFile” , arguments) void QProcess::start(const QString &program, const QStringList &arguments, QIODevice::OpenMode mode = ReadWrite) 3.8 class BedMemento { public : private : friend class BedList ; BedMemento() ; QMultiMap<QString, Bed*> getState() ; void setState(QMultiMap<QString , Bed*> s ); QMultiMap<QString, Bed*> state ; }; Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com COS3711 June 2019 solution guide. Any mistakes detected / typos please let us know. Question 1 1.1 Prevents instantiation of Shape instances outside of the Shape class hierarchy. 1.2 Polymorphism will not occur if this function is called after a polymorphic assignment. 1.3 class Shape : public QObject { Q_OBJECT Q_PROPERTY(int shapeNumber READ getShapeNumber WRITE setShapeNumber) protected: Shape(); public: int getShapeNumber() const; void setShapeNumber(int sn); private: int shapeNumber; static int nextNum; }; class Circle : public Shape { Q_OBJECT Q_PROPERTY(double radius READ getRadius WRITE setRadius) public: Circle(); double getRadius() const; void setRadius(double r); private: double radius; }; This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:04:29 GMT -06:00 https://www.coursehero.com/file/60900058/June-2019pdf/ This study resource was shared via CourseHero.com Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com 1.4 QTextStream cout(stdout); foreach(Shape *s, list) { const QMetaObject *metaObject = s->metaobject(); cout << metaObject.className() << \":\"; for(int i = 0; i < metaObject->propertyCount(); i++) { QMetaProperty property = metaObject->property(i); QString value = property.read(s).toString(); cout << property.name() << \" = \" << value << \", \"; } cout << endl; } Question 2 2.1 class ShapesToXml { public: ShapesToXml(); void write(QList<Shape*> sList, QString path); }; This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:04:29 GMT -06:00 https://www.coursehero.com/file/60900058/June-2019pdf/ This study resource was shared via CourseHero.com Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com 2.2 writer.writeStartElement(\"shapelist\"); foreach(Shape* s, sl) { const QMetaObject *meta = s->metaobject(); QString shapeType = meta->className(); writer.writeStartElement(\"shape\"); writer.writeAttribute(\"type\", shapeType); for(int i = 0; i < meta->propertyCount(); i++) { QMetaProperty prop = meta->property(i); writer.writeStartElement(prop.name()); writer.writeTextElement(prop.read(s).toString()); writer.writeEndElement(); } writer.writeEndElement(); } writer.writeEndElement(); Question 3 3.1 i) Extensibility: Defines and measure of ability and effort required to extend an application. The MVC pattern allows addition of say more views, models or controllers depending on the requirement and each addition does not impact other parts of the application since these are all decoupled. ii) Maintainability: Defines how easy it is to modify an application or the amount of effort required to make changes. Due to the clear separation of responsibilities (objects, presentation and logic), it’s easier to modify any one of three components. iii) Reusability: Defines the ability to reuse existing code. All three components can be reused in an application since each is loosely coupled from the other two components. E.g. the same view can be reused in different dialogs. 3.2. 3.2.1 It’s used to define the role / reason the data is being requested for by the view e.g. display or edit purposes. This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:04:29 GMT -06:00 https://www.coursehero.com/file/60900058/June-2019pdf/ This study resource was shared via CourseHero.com Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com 3.2.2 bool VehicleModel::setData(const QModelIndex &index, const QVariant value, int role) { if(!index.isValid()) return false; if(role == Qt::DisplayRole || role == Qt::EditRole) { Vehicle *v = vList.at(index.row()); switch(index.column()) { case 0: v.setModel(v.toString()); break; case 1: v.setMake(v.toString()); break; case 2: v.setYear(v.toInt()); case 3: v.setVIN(v.toString()); default: return false; } return true; } return false; } 3.2.3 [0-9A-Z]{9}[1-9A-Y][0-9A-Z]\\d{6} This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:04:29 GMT -06:00 https://www.coursehero.com/file/60900058/June-2019pdf/ This study resource was shared via CourseHero.com Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com Question 4 4.1 class VehicleFactory { public: VehicleFactory(); Vehicle* create(char c); }; 4.2 Vehicle* VehicleFactory::create(char c) { if(c == 'm') return new Motorcycle(); if(c == 'p') return new Passenger(); if(c == 'c') return new Commercial(); return NULL; } 4.3 The factory will have to be extended to support more types so it can return instances of the added types. The client doesn’t know about these types so it remains unchanged. 4.4. We are only dealing with one family of objects. Abstract factory would be suitable if we were creating different object families e.g. Vehicles and Houses. Question 5 5.1 It is used to restrict the number of instances a class can have. The above class does not comply because - The constructor is not private - There is no static function to return the class instance - There is no static member variable to hold the instance This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:04:29 GMT -06:00 https://www.coursehero.com/file/60900058/June-2019pdf/ This study resource was shared via CourseHero.com Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com 5.2 SingleA s1; SingleB s2; s1.setName(“name1”); s2.setName(“name2”); cout << s1.getName() << “ “ << s2.getName() << endl; Output will be “name2 name2”. 5.3 class SingleB { public: static SingleB* instance(); QString getName() const; void setName(QString s); private: SingleB(); static SingleB* onlyInstance; }; SingleB* SingleB::onlyInstance = NULL; 5.4 SingleB* s1 = SingleB::instance(); SingleB* s2 = SingleB::instance(); s1.setName(\"name1\"); cout << s1->getName() << \" \" s2->getName() << endl; output will be \"name1 name1\" This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:04:29 GMT -06:00 https://www.coursehero.com/file/60900058/June-2019pdf/ This study resource was shared via CourseHero.com Powered by TCPDF (www.tcpdf.org) Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com November 2018 Question 1 1.1 It doesn’t change the state of Counter 1.2 a) Model - Counter functionality (Incrementing and decrementing num) b) View (Displaying the state of the counter) 1.3 //class definition class Counter : QObject { Q_OBJECT public: Counter(int i); void increament(int i); void decrement(int i); signals: void counterChanged(QString, int); private: int num; QString message; }; //class implementation Counter::Counter(int i):num(i) {} void Counter::increament(int i) { num += i; emit counterChanged(\"Number increamented to: \", num); } void Counter::decrement(int i) { num += i; emit counterChanged(\"Number decremented to:\", num); } //View class definition class DisplayCounter : QObject { Q_OBJECT public slots: void displayState(QString message, int i); }; //View class implementation void displayMessage(QString message, int i) { This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:01:43 GMT -06:00 https://www.coursehero.com/file/69525612/Nov-2018-solution-guidepdf/ This study resource was shared via CourseHero.com Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com QMessageBox::information(0, \"Information\", QString(\"%1 %2\").arg(message).arg(i)); } 1.4 Counter *c = new Counter(0); DisplayCounter *view = new DisplayCounter(); connect(c, SIGNAL(numberChanged(QString, int)), view, SLOT(displayMessage(QString, int))); c->inceament(4); c->decreament(3); 1.5 //class definition class Counter : QObject { Q_OBJECT Q_PROPERTY(int num READ getNum WRITE setNum) Q_PROEPRTY(QString message READ getMessage WRITE setMessage) public: Counter(int i); void increament(int i); void decrement(int i); int getNum(); void setNum(int x); QString getMessage(); void setMessage(QString x); signals: void counterChanged(QString, int); private: int num; QString message; }; 1.6 Counter *c = new Counter(0); c->setProperty(num, 4); This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:01:43 GMT -06:00 https://www.coursehero.com/file/69525612/Nov-2018-solution-guidepdf/ This study resource was shared via CourseHero.com Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com 1.7 Similarities Both support reflection Diff Dynamic properties are created at runtime while static properties are created at compile time. Static properties are accessed via the QMetaObject interface while dynamic properties cannot. Question 2 2.1 M: Model – Application / data objects V: View – Presentation C: Controller – Controls data flow between model and view 2.2 2.2.1 Returns values from the model requested by the view 2.2.2 QVariant StaffModel::data(const QModelIndex &index, int role) const { if(!index.isValid()) { return QVariant(); } if(role == Qt::DisplayRole || role == Qt::EditRole) { int row = index.row(); int col = index.column(); if(col == 0) return names[row]; else if(col == 1) return numbers[row]; else if(col == 2) return perfomance[row]; else return QVariant(); } return QVariant(); } This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:01:43 GMT -06:00 https://www.coursehero.com/file/69525612/Nov-2018-solution-guidepdf/ This study resource was shared via CourseHero.com Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com 2.3 2.3.1 They are used to render items for editing on the view. Also used to update the model with view changes. 2.3.2 MyDelegate *delegate = new MyDelegate(); myTableView->setItemDelegateForColum(2, delegate); 2.3.3 Provides display and edit facilities for data items from a model. Question 3 3.1 To allow for rollbacks / undo operations / backups. 3.2 *Refer to tutorial letter 3.3 Caretaker: Stores a list of mementos Memento: Keeps / saves the state of the originator Originator: Generates mementos and restores itself from the mementos during a restore. 3.4 3.4.1 class StaffMemento { private: friend class Staff; StaffMemento(QStringList s); QStringList getState(); QStringList state; }; 3.4.2 StaffMemento Staff::createMemento() { return new StaffMemento(state); } void Staff::restore(StaffMemento memento) { state = memento.getState(); } This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:01:43 GMT -06:00 https://www.coursehero.com/file/69525612/Nov-2018-solution-guidepdf/ This study resource was shared via CourseHero.com Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.ivTutor.com Question 4 4.1 4.2 a) Client is now decoupled from the concrete classes of SortAlgorithm. Client is no longer aware of these. b) Client only receives an instance of a sorting algorithm and does not need to know the concrete class. Client can therefore use any given instance. [We should use strategy pattern here but question only required factory] c) Adding or removing concrete classes no longer affects the client because it only needs to know about the factory. Client is not impacted by addition or removal of concrete SortAlgorithm classes because it is decoupled from them. This study source was downloaded by 100000799301222 from CourseHero.com on 11-08-2021 13:01:43 GMT -06:00 https://www.coursehero.com/file/69525612/Nov-2018-solution-guidepdf/ This study resource was shared via CourseHero.com Powered by TCPDF (www.tcpdf.org) Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.vTutorOnline.com Question 1 *We drew this yesterday. Use video. 1.2 class Film : public QObject { Q_OBJECT Q_PROPERTY(QString title READ getTitle WRITE setTitle) Q_PROPERTY(float runningTime READ getTime WRITE setTime) public: Film(); void setTime(float f); void setTitle(QString t); float getTime() const; QString getTitle() const; private: float runningTime; QString title; }; 1.3 filmObject->setProperty(\"title\", \"007\"); QString title = filmObject->property(\"title\").toString(); 1.4 The ability to inspect an object at runtime 1.5.1 Allows different data types to be stored / returned. 1.5.2 *Vague. [Probable answer would be: Use a template.] 1.6.1 A word/text that contains at least one digit. 1.6.2 Corrected to: \\d+([\\.]\\d)? At least one digit that may have exactly one decimal point. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.vTutorOnline.com Question 2 The View and the controller are merged into a view to form the model/view architecture. Models must be used with views to display data. 2.2 QAbstractTableModel: An abstract class used for tabular data. You must subclass this class to use it. QStandardItemModel: A concrete model that can be used for both tabular / hierarchical data (trees). QTableView: A model-based view class used with a model to display data. QTableWidget: An item-based model that combines the functionality of both model and view. Also called convenience class. QAbstractProxyModel: Base class for proxy models used for sorting. 2.3.1 Creates a composition relationship between the objects. Once the main window is destroyed, it will destroy the its child objects. 2.3.2 tableView->setModel(tableModel); 2.3.3 Rounds off a model value to decimal places. 2.3.4 *Ignore Question 3 3.1 – 3.3 *Ignore 3.4.1 Singleton 3.4.2 The function needs to be instance independent since it is the one we use to get an instance. 3.4.3 ActorList* ActorList::actorList = NULL; ActorList ActorList::getActorList() { if(actorList == NULL) actorList = new ActorList(); return actorList; } Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides www.vTutorOnline.com 3.5. QDomElement actor = doc.createElement(\"Actor\"); root.appendChild(actor); QDomText text = doc.createTextNode(name); actor.appendChild(text); Question 4 4.1 class WriteToFile : public QObject { Q_OBJECT public: WriteToFile(QStringList t, QString f); public slots: void write() const; signals: void doneWriting(bool); private: QStringList textToWrite; QString fileName; }; 4.2 QThread *thread = new QThread(); WriteToFile *writer = new WriteToFile(tTW, fn); writer->moveToThread(thread); connect(thread, SIGNAL(started()), writer, SLOT(write())); thread->start(); //For cleanup, refer to my other notes. 4.3. *Ignore / google 😊 Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Question 1: 1.1 1.2 class Image: public QObject { Q_OBJECT Q_PROPERTY(double size READ getSize WRITE setSize) public: Image(); private: double size; } 1.3 a) Input kludge is being avoided by using a validator. b) [1-9](\\d*)?([.]\\d+)? c) QRegExpValidator validString = new QRegExpValidator(requiredFormat, this); Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Question 2: 2.1 QString InputOutput::toString() const { QStringList imagesList; foreach (image, list) { const QMetaObject *meta = image->metaobject(); int totalProperties = meta->propertyCount(); for (int i = 1; i<totalProperties; i++) { QMetaProperty prop = meta->property(i); QString imageProperties += QString(“%1:%2;”) .arg(prop.name()) .arg(prop.read(meta).toString()); } imagesList.append(imageProperties); } return imagesList.join(“\\n”); }; 2.2 A MetaObject is an object that contains metadata (properties of an Object). One benefit is the ability to use dynamic properties. 2.3 Dynamic properties can be added and defined during runtime, whereas properties accessed by the QMetaObject are declared and defined during the coding stage. 2.4 1. doc.setContent(&file); 2. root.tagName() == “ImageList” 3. root.firstChild(); 4. QDomElement 5. node.toElement(); 6. element.attribute(“size”); 7. node.nextSibling(); Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 3.1 Custom image list or QList is more appropriate for this scenario will accommodate the future possible dynamic properties as this is of type QObject. 3.2 Firstly, a QAbstractTableModel cannot be used, a QTableModel should be used instead. Secondly, the 3rd line should be view.setModel(model); 3.3 A QStringlistModel is model-based, where the view part is assigned to the model. A QListWidget is item-based, where you set an item to be displayed on the QListWidget. 3.4 The MVC is more of a design architecture, separating the Model, View, and the controller. Whereas the Observer pattern is a design pattern. Changes to an MVC is done through the controller, whereas the observer pattern is more event-driven to trigger updates. 3.5 The C part of MVC is the controller aspect of the program. The controller updates the view indirectly by calling on the model. The controller could be a separate “Editor” widget, or could be built in to the view widget. 4.1 class BackupImageList() { private: friend class ImageList; BackupImageList(); QList<Image> getState() const; Void setState(QList<Image> l); QList<Image> images; } 4.2 BackupImageList ImageList::createMemento() const { QList<Image> state; State.append(list); BackupImageList backup; backup.setState(state); return backup; } 4.3 The Memento pattern is Object-Oriented Design pattern used to keep previous states of an object. Serialiser is the process of transforming a graph of objects to a byte array. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 5.1 class SearchImages: public QObject { Q_OBJECT public: SearchImages(QList<Image*> l); public slots: void searchImage(); Image imageFound(double s); signals: void finished(); void immediateFeedback(); } 5.2 QProcess *p = new QProcess(); connect(p, SIGNAL(readyReadStandardOutput()), this, SLOT(manage())); p->start(“imagesizes.exe”); 5.3 Useful when there are a large number of iterations or operations to be carried out and to take full advantage of a multi-threaded system by taking full advantage of the multiple cores performance distributing processing across the threads. Not useful when there isn’t a multi-threaded system or when performance is key to other work being carried out on a computer. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 1.1 1.2.1 Line 1 in class definition: class ServiceProvider: public QObject; 1.2.2 Q_OBJECT has the purpose defining ServiceProvider as an QObject and is required by the moc to generate meta objects. Allowing for dynamic inspection of objects at runtime also called reflection. Q_PROPERTY has the purpose of defining the properties (metadata) of the service provider class. 1.3 It returns “name,ProviderA” on a console application. 1.4 Yes, “website” will be created as a dynamic property with the value set to www.sp.co.za 1.5.1 QSharedPointer<Phone*> p = QSharedPointer<Phone>(new *Phone); 1.5.2 Is an automatic C++ shared pointer QSharedPointer will automatically delete the pointer when it is no longer being referenced. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Question 2 2.1 Item-based models store the actual data items. 2.2 A QStandardItemModel has to be used in conjunction with a view A QTableWidget cannot be used with a model and is item-based. 2.3 The QTableWidget, because the same data cannot be displayed using multiple views, it would have to be duplicated. There is also no separation of the data from how it’s displayed. 2.4 The Observer pattern uses the view and controller portion of the MVC pattern to make function calls using an event-driven approach. This maintains separation between data storage and display. An Example would be if a button is clicked on a GUI. Qt implements the necessary inter-object communication using the connect SIGNALS to SLOTS function. 3.1 class Contract: public QObject { Q_OBJECT public: Contract(); virtual float getPrice(); protected: QString number; float price; } 3.2 Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 3.3 Contract* ContractFactory::createContract(QString choice) { if (choice == “MyPrepaid”) return new MyPrepaid(); if (choice == “MyContract”) return new MyContract(); return NULL; } 3.4 void ContractList::add(Contract* c) { const QMetaObject* meta = c->metaobject(); QString className = meta->className(); if (className == “MyPrepaid”) listP.append(c); if (className == “MyContract”) listC.append(c); } 4.1 QProcess *p = new QProcess(); p->start(“processContracts.exe”); 4.2 a) connect(p, SIGNAL(readyReadStandardOutput()), this, SLOT(display())); b) add to class definition: void display(); Implement: void Manage::display() { output->setText(output->toPlainText() + p->readLine()); } 4.3 //split string: QString partsToAdd = strlist.at(i); QStringList parts = partsToAdd.split(“#”); //create contract element writer.writeStartElement(“contract”); writer.setAttribute(“number”, parts.at(0)); //create message element writer.writeStartElement(“message”); writer.writeTextElement(parts.at(1)); //close message element writer.writeEndElement(); //close contract writer.writeEndElement(); Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 4.4 class XMLWriter: public QObject { Q_OBJECT public: XMLWriter(); ~XMLWriter(); public slots: void run(); signals: void returnItem(QString); } 4.5 This is an example of the serialiser pattern. Memento keeps a state of the QObject in the Originator. This provides a backup and restore function without writing to an external file or destination. Serialiser captures a graph of items and captures it in a QByteArray, such as QDataStream, and QTextStream, allowing for conversion of object formats and output to external formats and destinations. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides [TURN OVER] EXAMINATION PANEL: FIRST: MR CL PILKINGTON SECOND: MR K HALLAND EXTERNAL: DR L MARSHALL (UNIVERSITY OF PRETORIA) Instructions 1. Answer all questions. 2. All rough work must be done in your answer book. 3. The mark for each question is given in brackets next to each question. 4. Please answer questions in order of appearance. 5. Note that no pre-processor directives are required unless specifically asked for. This examination paper consists of 6 pages Good luck! Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 2 COS3711 October/November 2016 [TURN OVER] All the questions in this paper are based on the software requirements for a book store (yes, people do still read books). Classes will be required that manage an OOP implementation of books and customers, as well as lists of both customers and books. Question 1 [11 marks] The application needs to manage customer records. A second-year student provided the following UML class diagram as part of the solution. Customer - name: QString - phone: QString - email: QString - list: QList<Customer> + Customer() + setName(QString) + setPhone(QString) + setEmail(QString) + getName(): QString + getPhone(): QString + getEmail(): QString + getList(): QList<Customer> + writeToXml(): QString Client - customer: Customer + Client() 1.1 Identify one design anti-pattern in the above design and explain why you think it is a problem. (2) 1.2 Using a UML class diagram, provide a better design for the solution. (9) Question 2 [26 marks] The application will need to manage a list of books. The following classes have already been defined. class Book { public: Book(); private: QString title; QString getTitle() const; void setTitle(QString t); }; Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 3 COS3711 October/November 2016 [TURN OVER] class Fiction: public Book { public: Fiction(); private: QString genre; QString getGenre() const; void setGenre(QString g); }; class NonFiction: public Book { public: NonFiction(); private: QString subject; QString getSubject() const; void setSubject(QString g); }; class BookList { public: BookList(); void addBook(Book b); QList<Book> getList() const; private: QList<Book> booklist; }; 2.1 Rewrite the Book, Fiction, and NonFiction classes so that they can be used in a reflective programming approach. You do not need to rewrite the whole class – you only need to add the necessary code to the outline for each of the classes given below. class Book { public: // Existing attributes and functions private: // Existing attributes and functions }; class Fiction: public Book { public: // Existing attributes and functions private: // Existing attributes and functions }; class NonFiction: public Book { public: // Existing attributes and functions private: // Existing attributes and functions }; (6) Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 4 COS3711 October/November 2016 [TURN OVER] 2.2 Given the BooksToXml class definition and partial implementation of the write() function below, complete the implementation of the write() function so that it produces the XML given below. Use the reflective abilities of the classes that were implemented in 2.1. Comments have been included to guide you where the code has to be added. class BooksToXml { public: BooksToXml (); void write(BookList *list, QString filename); private: QXmlStreamWriter writer; }; void BooksToXml::write(BookList *list, QString filename) { QFile file(filename); file.open(QIODevice::WriteOnly); writer.setDevice(&file); writer.writeStartDocument(); // add code to start the booklist element QList<Book> books = list->getList(); foreach (Book book, books) { // for each book // use meta-objects to find what type of book it is // use meta-objects to find the book title // write code to generate the required XML } // add code to end the booklist element writer.writeEndDocument(); file.close(); } Required XML format (note that the genre/subject from the derived classes is not required): <booklist> <book type=\"Fiction\"> <title>Book 1 Title</title> </book> <book type=\"NonFiction\"> <title>Book 2 Title</title> </book> </booklist> (13) 2.3 Which one other approach could have been used to write the BookList to XML apart from using QXmlStreamWriter? (1) 2.4 Write the class header and implementation code that will implement the Factory Method design pattern so that it could be used to create the 2 different types of Books. (6) Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 5 COS3711 October/November 2016 [TURN OVER] Question 3 [20 marks] This question relates to the BookList class given in question 2. 3.1 Rewrite the BookList class and its implementation file so that a) there can ever only be one instance of this class in the application, which is also properly deleted, and b) the list implements a backup facility. Use the appropriate design patterns to meet these requirements. Note that you are not required to write implementations for the addBook() and getList() functions. You can assume that the following class has been defined and implemented to provide this backup facility. class Backup { private: friend class BookList; Backup(); void setBackup(QList<Book>); QList<Book> getBackup() const; QList<Book> backup; }; (15) 3.2 When, or why, would a user request that there be only one book list? (2) 3.3 Which design pattern was used to implement the backup facility in question 3.1? How would this design pattern differ from a Serialiser design pattern? (3) Question 4 [15 marks] Consider the following class used to search a BookList. class Search { public: Search(QList<Book> list, QString title); Book find(); private: QList<Book> books; }; 4.1 Rewrite this class definition so that it can be run as a thread (using the recommended approach to threading), and that it will return a found signal with a Book instance. (5) 4.2 Complete the following partially written Client function that will pass a QList<Book> instance to a Search instance and run this instance as a thread (remembering that there is only one instance of the list). Use the comments in the code as a guide to where you should add code. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 6 COS3711 October/November 2016 void Client::findBook(QString titleToFind) { QList<Book> b = // access the book list QThread *thread = new QThread(); Search *search = new Search(b); // write the code necessary to run the Search instance as a thread // ensuring that all signals/slots are handled } You can use the following slot in Client to handle found Books: private slot: void handleFound(Book); (7) 4.3 What is a dynamic property, and how does it differ from an instance’s other properties? (2) 4.4 Write the code necessary to add a dynamic property (named staff, with the value supervisor) to the Search instance in question 4.2. (1) Question 5 [8 marks] It has been decided to use a model-view approach to manage staff records at the bookshop, where the staff records would be displayed in rows with a column for each field in the record. Two different programmers attempted this, and there were two different proposed solutions. a) QAbstractTableModel *model = new QAbstractTableModel(); b) QStandardItemModel *model = new QStandardItemModel(); 5.1 Which of these two would be the most appropriate approach? Explain your answer fully. (2) 5.2 Write the code to attach this model to an appropriate view class. (2) 5.3 What is the purpose of a delegate in the Qt approach to model-view programming? (2) 5.4 Given a QLineEdit in a graphical user interface, explain 2 ways a regular expression could be used to validate text a user enters in the line edit box. (2) © UNISA 2016 Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides \t \t No v \t 2 0 1 6 \t \t Qu e s t i o n \t 2 \t \t class Book : pu blic QObject { Q_OBJECT Q_PROPERTY(QString title, READ getTitle, WRITE setTitle); public: Book(); private: QString title; QString getTitle() const; void setTitle(QString t); }; \t \t \t \t \t 2. 2 \t wr i t e r . wr i t e S t a r t E l e m e n t ( “ book l is t ” ) ;\t \t \t co n st \t Q M e t a O b j e ct \t *m e t a\t =\t b o o k . s t at i c M e t aO b j e c t ( ) ; \t \t QS t r i n g \t c l a s s N a m e \t = \t m e t a - >c l as s N am e ( ) ; \t \t QS t r i n g \t t i t l e ; \t \t \t fo r(i n t\t i \t = \t 0 ; \t i \t < \t m e ta - >p r o p e r t y C o u n t ( ) ; \t i ++) \t { \t \t QM e t a P r o p e r t y \t p r o p \t = \t m e t a - >p r o p e r t y ( i ) ; \t \t \t co n st \t ch a r * \t n a m e \t = \t p r o p . p r o p e r t yN a m e ( ) ; \t \t \t \t \t QS t r i n g \t v a l u e \t = \t b o o k . p r o p e r t y( n a m e ) . t o S t r i n g( ) ; \t \t \t \t \t if ( n a m e \t= = \t” t it le ” ) \t \t \t ti tl e \t = \t v a l u e ; \t \t } \t \t wr i t e r . wr i t e S t a r t E l e m e n t ( “ b o o k ” ) ; \t \t wr i t e r . wr i t e A t t r i b u t e ( “ t y p e ” , \t c l a s s N a m e ) ; \t \t wr i t e r . wr i t e T e x t E l e m e n t ( “ t i t l e ” , \t t i t l e ) ; \t \t wr i t e r . wr i t e E n d E l e m e n t ( ) ; \t //t i t l e \t wr i t e r . wr i t e E n d E l e m e n t ( ) ; \t //b o o k \t \t wr i t e r . wr i t e E n d E l e m e n t ( ) ; \t \t //b o o k l i st \t \t 2. 4 \t \t cl a ss\t B o o kF a ct o r y \t { \t Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides \t publ i c : \t \t \t Book \t c r e a t e Book ( Q S t r i ng \t t y pe ) ; \t \t } \t \t Book \t Book F a c t or y : : c r e a t e Book ( Q S t r i ng \t t y pe ) \t { \t \t if ( t y p e \t= = \t“ F ic t io n ” ) \t \t \t re tu rn \t n e w \t F i c ti o n (); \t \t \t if ( t y p e \t= = \t“ N o n F ic t io n ” ) \t \t \t re tu rn \t n e w \t N o n F i c ti o n (); \t \t \t re tu rn \t N U L L ; \t \t } \t \t \t \t \t \t class BookList { public: static BookList * getInstance(); void addBook(Book b); QList<Book> getList() const; void restore(Backup b); Backup saveBackup(); private: BookList(); static BookList * instance; QList<Book> booklist; }; \t \t Book L i s t . c pp \t Book L i s t * \t Book L i s t : : i ns t a nc e \t = \t N U L L ; \t \t \t Book L i s t * \t Book L i s t : : g e t I ns t a nc e ( ) \t { \t \t if ( in s t a n c e \t= = \tN U L L ) \t \t \t \t in s t a n c e \t= \tn e w \tB o o k L is t ( ) ;\t \t \t \t re tu rn \t i n s ta n c e ; \t \t } \t \t Ba c k up\t Book L i s t : : s a v e Ba c k up( ) \t { \t \t Ba c k up\t b; \t \t \t b. s e t S t a t e ( book l i s t ) ; \t \t \t \t re tu rn \t b ; \t \t } \t Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides \t vo i d \t Book L i s t : : r e s t or e ( Ba c k up\t b) \t { \t \t book l i s t \t = \t b. g e t S t a t e ( ) ; \t \t } \t \t Qu e s t i o n \t 4 \t class Search : public QObject { Q_OBJECT public: Search(QList<Book> list, QString title); public slots: Book find(); signals: void finished(); void found( Book ); private: QList<Book> books; }; \t QList<Book> b = l :: getInstance() - >getList(); search - >moveToThread(thread); connect(thread, SIGNAL(started()), search, SLOT(find())); connect(search, SIGNAL(found(Book)), client, SLOT(handleFound(Book))); connect(search, SIGNAL(fi nished()), client, SLOT(handleFound(Book))); //sl o t s\t t o \t h a n d l e \t t h r e a d \t q u i t t i n g \t p r o p e r l y . \t \t \t thread - >start(); \t \t search - >setProperty(“staff”, “…”); QTableView v; v.setModel(model); \t Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides JUNE 2016 1.1 class GuestList: public QObject 1.2 37: one->setParent(guestlist); 38: two->setParent(guestlist); 1.3 Guest: class Guest: public QObject { Q_OBJECT Q_PROPERTY(QString name READ getName WRITE setName) public: explicit Guest(QString NameIn, QObject *parent=0); ~Guest(); QString getName() const; void setName(); protected: QString name; } ConferenceGuest: class ConferenceGuest: public Guest { Q_OBJECT public: ConferenceGuest(QString name); } Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 4.1 class SearchForGuest: public QObject { Q_OBJECT public: SearchForGuest (QList<Guest*> list, QString name); QList<Guest*> find(); public slots: void doSearch(); signals: void finished(); void guestFound(QString name); private: QList<Guest*> localList; QString localName; } 4.2 15: QThread *t = new QThread(); Change 17: SearchForGuest sfg = new SearchForGuest(pastGuests, “Tommy”); Change 18: sfg->moveToThread(t); 19: QObject::connect(t, SIGNAL(started()), sfg, doSearch())); 20: t->start(); Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides 5.1 RateCalculator 5.2 Returns a QList of the RateCalculation 5.3 QList <QWebPluginFactory::Plugins> 5.4 . 5.5 Factory method. There are functions related to the factory that create a QObject according to mime-type entered. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study GuidesStuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides file:///C/Users/KRIB/Dropbox/COS3711%20-%20Advanced%20Programming/2016/S2/Memos/2015_Oct_M.txt[10/12/2016 11:08:15 PM] oct / nov 2015 question 1 class Register : public Qobject { Q_OBJECT public: Register(){} void newRegister(QString str) { m_Register = str; emit setRegister(m_Register); } signals: setRegister(QString str); private: QString m_Register; }; class Output : public Qobject{ Q_OBJECT public: Output(){} public slots: void outputRegister(QString str) { cout << str <<endl; } }; //main Register r; r.newRegister(\"E234\") Output o; QObject::connect(&r,SIGNAL(setRegister(QString())), &o, SLOT((outputRegister(QString)))) 1.2 not sure: ^\\d{4}\\-(0?[1-9]|1[012])\\-(0?[1-9]|[12][0-9]|3[01])$ Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides file:///C/Users/KRIB/Dropbox/COS3711%20-%20Advanced%20Programming/2016/S2/Memos/2015_Oct_M.txt[10/12/2016 11:08:15 PM] question 2 2.1 class Shape : public QObject Q_OBJECT Q_PROPERTY(int len, READ getLength WRITE setLength) public: //getters int getLength() const{return length;} //setters void setLength(int l){length = l;} //the rest functions come here as in the question }; class Circle : public Shape { Q_OBJECT public: //everything remains the same. }; 2.2 void whatAmI(Shape *s) { cout << s->metatObject()->className() << endl; } 2.3 yes it is legal, Sets the value of the object's name property to value. If the property is defined in the class using Q_PROPERTY then true is returned on success and false otherwise. If the property is not defined using Q_PROPERTY, and therefore not listed in the meta-object, it is added as a dynamic property and false is returned. 2.4 No legal, there are property defined int the class Circle or Shape with the value \"Colour\", hence will not work. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides file:///C/Users/KRIB/Dropbox/COS3711%20-%20Advanced%20Programming/2016/S2/Memos/2015_Oct_M.txt[10/12/2016 11:08:15 PM] 2.5 meta-object : The meta-object system is based on three things: The QObject class provides a base class for objects that can take advantage of the meta-object system. The Q_OBJECT macro inside the private section of the class declaration is used to enable meta-object features, such as dynamic properties, signals, and slots. The Meta-Object Compiler (moc) supplies each QObject subclass with the necessary code to implement meta-object features. The moc tool reads a C++ source file. If it finds one or more class declarations that contain the Q_OBJECT macro, it produces another C++ source file which contains the meta-object code for each of those classes. This generated source file is either #include'd into the class's source file or, more usually, compiled and linked with the class's implementation. question 3 3.1 line 2 - QListView *view = new QListView() line3 - view->setModel(model) line 4 - not sure but i would write like this model->data(model->index(row,col), Qt::DisplayRole) line 5 - model->setData(model->index(row),data) 3.2 QModelIndex - The QModelIndex class is used to locate data in a data model. 3.3 this generic, so it will apply to all, the difference between, a model and view - This class is used as an index into item models derived from QAbstractItemModel. The index is used by item views, delegates, and selection models to locate an item in the model. 3.3 Model The model typically is the data of your application and the logic to retrieve and persist that data. Often, this is a domain model that can be based on a database or the results from web services. In some cases, that domain model maps perfectly to what you see on the screen, but in other cases it has to be adapted, aggregated or extended to be usable. View The View was responsible for drawing the UI on the screen. Without windows or controls, that meant drawing, boxes, buttons, input fields, etc on the screen. The View can also monitor the model and display any data in it or update itself if the data changes. Controller The controller is responsible for handling the User Input and then updating the Model or the View. So if the user is interacts with the application, IE: presses a button on the keyboard, moves the mouse, the controller is notified of that user gesture and decides what to do with it. Maybe it should update the view, maybe it should update the model. question 4 4.1 4.2 Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides file:///C/Users/KRIB/Dropbox/COS3711%20-%20Advanced%20Programming/2016/S2/Memos/2015_Oct_M.txt[10/12/2016 11:08:15 PM] a) intergrity of data is maintained- by decoupling we ensure all creations InputField are given to the Factory, hence we ensure that no tempering of the main data,responsibilty of classes are maintained. b) debugging - debuging for errors becomes easier becuase code are seprated //you can google the advatngeous of a factory pattern, they will apply to this question as well question 5 5.1 Solo *s = Solo::instance(); 5.2 line1 // you cannot create an instance of S, because the construtor is private line 2 // s1 cannot be created because the constructor is private, and to create an instance we need to call the fun in the form of Solo *s2 = Solo::instance(), which has not been used in the code above. 5.3 to ensure once a Solo is initialized the first time it will not be initialzed again, that is subsequently if the user tries to create another instance, it will check if it has been initializwd if yes, then return not initialized else return new Solo object, to achieve only once initialization we need to make static. 5.4 question 6 not applicable to your examination preparation question 7 7.1 In SAX, events are triggered when the XML is being parsed. When the parser is parsing the XML, and encounters a tag starting (e.g. <something>), then it triggers the tagStarted event (actual name of event might differ). Similarly when the end of the tag is met while parsing (</something>), it triggers tagEnded. Using a SAX parser implies you need to handle these events and make sense of the data returned with each event. In DOM, there are no events triggered while parsing. The entire XML is parsed and a DOM tree (of the nodes in the XML) is generated and returned. Once parsed, the user can navigate the tree to access the various data previously embedded in the various nodes in the XML. In general, DOM is easier to use but has an overhead of parsing the entire XML before you can start using it. 7.2 you have to add the following siganls: Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides file:///C/Users/KRIB/Dropbox/COS3711%20-%20Advanced%20Programming/2016/S2/Memos/2015_Oct_M.txt[10/12/2016 11:08:15 PM] void show(); void run() { (for int i=0; i < 10; i++){ cout << \"im walking\" << endl; wait(2000); emit show(); } } //then in startwaliking() connect(this,SIGNAL(show), this,SLOT(startWalking())); start(); 7.3 QTcpSocket or QTcpServer END=========== Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Libraries Groups code modules, reusable Pre-compiled programming codes ready for use Design Patterns Efficient and elegant solutions to common problems Structural = how organize objects + connect them Behavioral = how organize code Creational = how organize code to manage object creation Serializer Pattern Responsible reading and writing objects QTextStream = read + write human-readablefiles QDataStream = read + write structured data binary Client Class1Reader Class1Writer +read(Class1) Class1 +writer(Class1) ANTIPATTERNS Common used programming practices/solutions to recurring programming problems that is ineffective/inefficient 1) Software Design antiPattern > Input kludge – failing handling invalid input > Interface bloat – interface powerful/complicated, hard to reuse > Race hazard – fail see consequence order of events 2) Object-oriented design antiPattern > Circular dependency – mutual dependencies between objects > God object – too much information/responsibility 3) Programming antiPattern > Hard coding – embedding assumptions > Magic numbers – unexplained numbers > Magic strings – literal strings 4) Methodological antiPattern > Copy + paste programming – existing code > Reinvent the (square) wheel – existing solution Included in project with directive #include System program caller linker establish link between program and library code at run time lib file ease job of linker – contains compiled/object files, ease linking process of library items and program codeFramework and Design Pattern Framework is large colletion components and conventions documented public API Qt is a framework – framework implemented with design patterns Design patterns efficient solution to common problems Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides QMetaObject Meta object describe structure of another object MetaObject Pattern (Reflective pattern): information about properties and methods of QObject Q_PROPERTY macro Describe QObject Properties Access data members: > Direct (getters and setters) – faster more efficient > Indirect (QObject / QMetaObject interface) – more reusable code Q_PROPERTY (type name READ getFunction [WRITE setfunction] [RESET resetFunction] [NOTIFY ntifySignal]) [. . . .] Customer::Customer(const QString name, QObject * parent) :QObject(parent){ setObjectName(name); } Void Customer::setId(const QString &newId){ if (newId !- m_id) { Qstring oldId = m_id; m_id = newId; emit valueChanged( id newId, oldId); } Void Customer::setType(CustomerType theType){ if (m_Type != theType) { CustomerType oldType = m_type; m_Type = theType; } Void TestCustomerProps::test() { Customer cust; cust.setObjectName( Customer cust.setName( Falafal cust.setType( Government //enumproperty as string QString originalId = cust.setId(orifinalId); QVariant V = cust.propert id QString str = v.toString(); return; } Class Customer: public QObject{ Q_OBJECT Q_PROPERTY (QString id READ getID WRITE setID NOTIFY valueChanged) Q_PROPERTY (QString name READ getName WRITE setName) Q_PROPERTY (CustomerType type READ getType WRITE setType) Q_PROPERTY (Qdate dateEstablished READ getDateEstablished) //read-only public: enum CustomerType {Corporate, Individual, Educational, Government}; Q_ENUMS(CustomerType); explicit Customer (const QString name = QString(), QObject * parent = 0); QString getId() const { return m_id; } QString getName() const { return m_name; } CustomerType getType() const { return m_type; } private: QString m_id, m_name; CustomerType m_type; }; [. . . .] Using reflective programming, can write general-purpose operations work on classes of varied structures. To make class reflective: Inherit from QObject Include Q_OBJECT macro Q_PROPERY(QString name READ getName WRITE setName) Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides [. . . .] /* Method for setting enum values from Strings */ Void Customer::setType (Qstring newType){ 1 static const QMetaObject* meta = metaObject(); 2 static int propindex = meta->indexOfProperty( type static const QMetaProperty mp = meta->property(propindex); QMetaEnum menum = mp.enumerator(); const char* ntype = newType.toAscii().data(); 3 CustomerType theType = static_cast<CustomerType>(menum.keyToValue(ntyp)); if (theType != m_type) { 4 CustomerType oldType = m_type; m_type = theType; emit valueChanged( type theType, oldType); } } 1 Overloaded version accept string as argument. Set value -1 if unknown. 2 Static locals, initializations happen only once. 3 Executed each time 4 Check if valueChanged signal needed What kinds of information can you obtain from a QMetaObject? className(), which returns the class name as a const char* superClass(), which returns a pointer to the QMetaObject of the base class if there is one (or 0 if there is not) methodCount(), which returns the number of member functions of the class method(index), which returns the meta-data for the method with the given index propertyCount(), which returns the number of properties in this class, including base class properties. property(index), which returns the meta-data for the property with the given index. What Qt classes are used to do data reflection? QMetaObject, QMetaProperty, QSqlDatabase::tables, QSqlRecord, Qvariant How does the QMetaObject code for each of your QObject-derived classes get generated? moc generates QMetaObject classes to support properties, signals and slots. Normally, you do not run moc directly. It is run automatically by make on the header files listed in HEADERS which use the Q_OBJECT macro. What are the advantages of using property() and setProperty() over direct getters and setters? Q_PROPERTY macros make it possible for moc to generate code for QObject's property() and setProperty() member functions. The advantage of using these functions is that client code can determine which properties are available by iterating through QMetaProperty objects of the QMetaObject corresponding to that class. What does the property() function return? How do you obtain the actual stored value? property() returns a QVariant, which is a union wrapper around every possible basic type, and also several Qt classes/types. With QVariant, you can ask for its type() and convert to the actual value<>(). Benefits are most apparent when implementing script engines or developer tools. It becomes possible to define \"handle anything\" kinds of functions without using anything but the QObject interface to read and write values. Explain how it is possible to add new properties, acquired at runtime, to a Qobject setProperty(\"propName\") sets a dynamic property for that object even if it is not declared as a Q_PROPERTY Explain how dynamic properties can be serialized They are stored in a QVariantMap, which can be serialized via a QDataStream. QDataStream out(...); QVariant v(123); // The variant now contains an int int x = v.toInt(); // x = 123 out << v; // Writes a type tag and an int to out v = QVariant(\"hello\"); // The variant now contains a QByteArray v = QVariant(tr(\"hello\")); // The variant now contains a QString int y = v.toInt(); // y = 0 since v cannot be converted to an int QString s = v.toString(); // s = tr(\"hello\") (see QObject::tr()) out << v; // Writes a type tag and a QString to out ... QDataStream in(...); // (opening the previously written stream) in >> v; // Reads an Int variant int z = v.toInt(); // z = 123 qDebug(\"Type is %s\", // prints \"Type is int\" v.typeName()); v = v.toInt() + 100; // The variant now hold the value 223 v = QVariant(QStringList()); Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides QMetaObject Qt support reflective programming via QMetaObject Provides generic interface through which state of any Qobject accessed and manipulated Instance of QMetaObject class used as mirror reflect and change stated of Qobjects without manupulating Qobject directly Qobject Person -name:Qstring -birthDate:QDate +Person() +Person(QString, Qdate) +getName():Qstring +getBirthDate():Qdate +setName(Qstring) +setBirthDate(Qdate) Product -name:Qstring -price:double +Product() +Product(QString, double) +getName():Qstring +getPrice():double +setName(Qstring) +setPrice(double) writeToFile(Qobject*); Class Person: public Qobject { Q_OBJECT Q_PROPERTY(Qstring name READ getName WRITE setName) Q_PROPERTY(Qdate birth READ getBirthDate WRITE setBirthDate) public: Person(); Person(Qstring n, Qdated); Qstring getName()const; Qdate getBirthDate()const; void setName(Qstring n); void setBirthDate(QDate d); private: QString name; Qdate birthDate; }; Person * person = newPerson; writeToFile(person); Product* product = new Product; writeToFile(product); writeToFile(Qobject *obj){ QFile file( dat.txt file.open(QIODevide::Append); QTextStreamtoFile(&file); const QMetaObject *mo = obj->metaObject(); for (int i=mo->propertyOffset(); i<mo-propertyCount();i++) { const QMetaProperty prop = mo->property(i); QString name = prop.name(); QVariant value = prop.read(obj); Qstring valStr = value.toString(); toFile << name << valStr << endl; } file.close(); } Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Models and Views Separate underlying data class (model) from GUI (view) Data View Standard Widgets ->use data as part of widget View class operate external data (model) Model View setModel() Data • Separate model from view – reduces complexity • Different maintenance imperatives – easier maintain both kept separate • Possible maintain different, consistent views of same data • Different, consistent views of same data • Do not store data • Do not know data structure Standard Widgets: • Two copies data: one outside widget, one inside • Synchronize both • Tight coupling present data, hard write unit test Example QFileSystemModeluser QTreeView: #include <QtGui> int main(int argc, char *argv[]){ Qapplication app(argc, argv); QFileSystemModel model; model.setRootPath( QTreeView tree; tree.setModel(&model); tree.setSortingEnabled(true); tree.header()->setResizeModel(QHeaderView:: ResizeToContent); tree.resize(640, 480); tree.show(); return app.exec(); } MVC consists of three kinds of objects. 1) Model = application object 2) View = screen presentation 3) Controller = defines way user interface reacts to user input Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides QFileSystemModel in a QTreeView QFileSystemModel is already populated with data, so we can simply create one, create a view, and view->setModel(model). #include <QtGui> int main(int argc, char *argv[]) { QApplication app(argc, argv); QFileSystemModel model; model.setRootPath(\"/\"); QTreeView tree; tree.setModel(&model); tree.setSortingEnabled(true); 1 tree.header()- >setResizeMode(QHeaderView::ResizeToContents); tree.resize(640, 480); tree.show(); return app.exec(); } //1 - Enable HeaderView sort buttons. Qt provides its model-view architecture to separate models and view. In this architecture a number of abstract and concrete model and view classes are provided. Though this architecture supports the separation of model/logic from the views, it does not provide controller classes like the classic MVC pattern. Qt s model-view architecture uses signals and slots for the communication between models and views. A model class in Qt either has the data or communicates with the data source. In order to make use of Qt s model-view architecture one has to either use the built-in, concrete model or view classes or implement a model or view class derived from model/view interfaces provided in Qt. In order to make use of the architecture the view has to be set up with a model. In other words, view has a model and not the other way around. In a sense, Qt replaces the controller in its model-view architecture with delegates that are responsible for the rendering/display and editing of model data in a view. Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Validate Regular Expression QLineEdit validate input: A > ASCII alphabetic character N > ASCII alphanumeric character X > ASCII any character D > ASCII nonzero digit 9 > ASCII digit # > Hexadecimal digit B > Binary digit Validators = attached to input widgets 1) QDoubleValidator = floating point 2) QIntValidator = integer 3) QRegExpValidator = text regular expression int main (int argc, char* argv[]){ QApplication app(argc, argv); QLineEdit e; e.setIntputMask( - - - e.show(); return app.exec(); } int main (int argc, char* argv[]){ QApplication app(argc, argv); QLineEdit e; QIntValidator *v = new QIntValidator(0,100); e.setValidator(v); e.show(); return app.exec(); } Regular Expression Special characters . any character \\n newline \\f form feed \\t tab \\xhhhh hex Quantifiers + 1 or more ? 0 or 1 * 0 or more {i, j} at leat i, no more than j Chracter Sets: \\S white space \\S non-whitepace \\d digital 0 to 9 \\D non-digital \\w any word character (letter/ digit/underscore) \\W non-word character [AEIOU] match A, E, I, O, U [a-g] range from a to g [^xyz] except x, y, z QLineEdit e; QRegExp re( a-zA-Z][_a-zA-Z0-9]+ QRegExpValidator *v = new QRegExpValidator(re); e.setValidator(v); e.show(); Consist 4 digits (0-9): d{4} Consist 6 character, forst 3 alphabetic, last 3 digits A-Za-z]{3}[0-9]{3} Minimum 4, max 6 characters, except0, z and Z zZ]{4,6} Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Parsing Xml Each <tag> must have closing </tag> Or selfclosing <br/> NB: Case-sensitive Tags with attributes: <library> <book title = Computer Algorithm pages = <book title = C++ unleashed pages = </library> Tags with text: <library> <book> <title>Computer Algotithm</title> <pages>688</pages> </book> <book> <title>C++ unleashed</title> <pages>918</pages> </book> </library> • Event driven • Low-level • Sequential-access while parsing document • Any file size • Forward direction QT+ - xml QXmlReader +parse() QXmlSimpleReader QXmlContentHandler +startDocument() +endDocument() +startElement() +endElement() +characters QXmlDefaultHandler MyHandler SAX #include <QXmlDefaultHandler> class Qstring; class MyHandler:public QXmlDefaultHandler{ public: bool startDocument(); bool startElement(const Qstring & namespaceURI, const QString & LocalName, const QString & qName, const QXmlAttributes & atts); bool characters (const QString & text); bool endElement (const QString & namespaceURI, const QString & localName, const QString & qName); private: QString indents; }; Myhandler.cpp QTextStream cout(stdout); bool MyHandler::startDocument(){ indent = return TRUE;} bool MyHandler::characters(const Qstring & text){ QString t = text; cout << t.remove( n Bool MayHandler::startElement(const Qstring & namespaceURI, const QString & LocalName, const QString & qName, const QXmlAttributes & atts){ QString str = QString n%1\\\\%2).arg(indent).arg(qName); cout << str; if (atts.lenght()>0){ QString fildName = atts.qName(0); cout << QString .arg(fieldName).arg(fieldName); } cout << indent += return TRUE; } Three ways parse XML: Qt s XML module: 1) SAX (Simple API for XML) – parse event-driven 2) DOM (Document Object Module) – tree-style parse 3) Stream-style parsing with QXmlStreamReader Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides DOM • XML elements as objects in tree structure • File in memory, limit RAM • Random access • Not handle parse errors • Creating documents Writing using DOM: 1) Create document (QDomDucument) 2) Create root element 3) for each contact, put in document 4) Write result to file Write to file: (open filem create text stream, call toStrin() method of DOM document) int main (int argc, char **argv){ QApplication a (argc, argv); QDomDocument doc AdBookML QDomElement root = doc.createElement adbook doc.appendChild(root); Contact c; c.name = Kal c.eMail = kal@gateborg.se c.phone = root.appendChaild(ContactToNode(doc, c)); QFile file c:/qt/text/xml if (file.open(Qfile::WriteOnly)) return -1; QTextStream ts(&file); ts << doc.toString(); file.close(); return 0; } Reading using DOM: 1) Create DOM document from file 2) Find root 3) Find children (elements) 4) Find attributes Reading file: QDomDocument doc adBookML Qfile file test.xml if (!file.open(IO_ReadOnly) return -1; file.close; Find root element: QDomElement root = doc.documentElement(); if (root.tagNam() != adbook return -3; Find element, check attributes: QDomNode n – root.firstChild(); while (!n.isNull()){ QDomElement e = n.toElement(); if (!e.isNull()){ if (e.tagName() == contact Contact c; c.name = e.attribute( name c.phone = e.attribute( phone c.eMail = e.attribute( email } } n = n.nextSibling(); } Create Document: QDomDocument doc adBookML Create root element: root element point to start root element called adbook QDomElement root = doc.creeateElement( adbook doc.appendChild(root); Each contact put in document: QDomElement ConstactToNode( QDomDocument &d, const Contact & c){ QDomElement cn = d.createElement( contract cn.setAttribute( name c.name); cn.setAttribute( phone c.phone); cn.setAttribute( email c.eMail); return cn; } Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Design Patterns Creational Patterns: Manage object creation during runtime, manage object deletion Factory Method Product Factory FactoryMethod(): Product Operation() ConcreteProduct ConcreteFactory FactoryMethod():product . . . Product = FactoryMethod() . . . return newConcreteProductcreate Bread WhiteBread BrownBread WholewheatBread AbstractBreadFactory BreadFactory Client +makeBread(QString):Bread + makeBread(Qstring):Bread - Bread *myBread +bake() uses create uses Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides AbstractFactory Abstract Factory Pattern AbstractProductA Client ProductA1 ProductA2 createProductA() createProductB() AbstractProductB ProductB1 ProductB2 ConcreteFactory2 createProductA() createProductB() ConcreteFactory1 createPRoductA() createProductB() Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Singleton Class has only one instance, accessed via global access point Make constructor Private, creating one instance Class A { public: static A* getInstance(); private: A(); static A* onlyInstance; } A*A::onlyInstance = NULL; A::A(){} A*A::getInstance(){ if(onlyInstance == 0) onlyInstance = new A(); return onlyInstance; } Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Memento Pattern Object storing snapshot of internal state of another object Object state restored, allow undo/rollback operation Originator Memento Caretaker Object know how to save itself Object written and read by originator Object holds memento for originator state = m -> getState() Originator setMemento(Memento m) createMemento() state Memento getState() setState() state Caretaker Return new Memento(state) Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Memento Stares state of Originator Caretaker Keep Memento • Role of Caretaker store Memento, not allowed access state of Originator. • Achieved by making getState(), setState() and constructor of Memento provate, Caretaker cannot access state of Originator. • Originator need able access construcotr, getState() and setState() of Memento. Achieved making Originator friend of Memento. Class Memento { public: private: friend class Person; Memento(); QStringList getState(); void setState(QStringList s); QStringList state; }; Memento Person::createMemento() const { QStringList state; state << name << birthDate.toString(); Memento mem; mem.setState(state); return mem; } Void Person::setMemento(Memento m) { QStringList s = m.getState(); name = s.at(0); birthDate = QDate::fromString(s.at(1)); } int main(int argc, char *argv[]) { Person p( John Qdate(1990,12,25)); //create memento Memento caretaker = p.createMemento(); //change Person p //restore Memento p.setMemento(caretaler); } Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Façade Pattern Unified interface to set of interfaces in subsystem Defines higher-level interface making subsystem easier use Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Concurrency Similar in concept: start() function cause execution, fork (two things happening QProcess Qthread Runs different program Runs same process, share In same process, separate code, share memory with memery other threads Communicate with child Share memory and code Process via streams with peer threads. Sync (stdin, stdout stderr) locks, wait conditions, Pass data using command mutexes, semaphores Line arguments Managed by operating Managed by process system #include <QObject> #include <QProcess> class LogTail: public Qprocess { Q_OBJECT public: LogTail (Qstring fn=Qstring()); ~LogTail(); signals: void LogString() public slots: void LogOutPut(); }; LogTail::LogTail (Qstring fn){ connect (this SIGNAL (readyReadStandardOutput()), this SLOT (logOutput())); QString argv; argv << -f fn; start tail argv); } LogTail::~LogTail(){ terminate(); } QProcess: class for starting and controlling other process Derived from QObject using signals and slots Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides QThread and QtConcurrent • QThread class provide platform-independent threads • Qt support multi-threading and encapsulates threads using QThread class • QObjects are thread safe and re-entrant, communicate across threads • Only have one GUI thread (QApplication) • Widgets inheritedfrom QWidget not thread safe • Executing in run() method • Start event loop calling exec Thread has: > Own stack pointer > instruction (program) counter > processor registers > execution state Access to: > shared resources (memory, wait conditionsm nutual exclusive data blocks, semaphores class MyThread: public QThread { public: void run (); //execute end when return from run() }; Void MyThread::run(){ QTcpSocket socket; socket.connectToHost(hostName, portNumber); exec(); } Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Networking Concepts WebKit: open source web content rendering and editing engine QT += webkit Main classes: > QWebElement = access and edit QWebFrame DOM elements > QWebFrame = data object represent frame in web page > QWebHistory = history of visited links associated with QWebPage > QWebHistoryItem = object represent one visited link in QWebHistory > QWebPage = data object represent web page > QWebSettings = data object holds settings used by QWebFrame or QWebPage > QWebView = widget visualizes QWebPage Only Widget in QWebKit is QWebView QWebPage download web content behind scenes, process content, reflect results user interface Viewing webpage: QWebView *view = new QWebView(); View -> load(QUrl( www.unisa.ac.za Networking Concepts QWebView = widget used to view and edit web documents QWebPage = object to view and edit web document QUrl = interface for workin with URL s QWebFrame = data object represent frame in web page QWebElement = class eccess and edit QWebFrame DOM elements Browsing web using HTTP protocol (hypertext transfer protocol) HTTP built on top of TCP (transmission control protocol) which is built in IP (internet protocol) QUrl class: ftp://ftp.qt.nokia.com:2021 Scheme Host port http://qt-project.org/documents#qt-other fragment http://qt-project.org/products/qt-for-mobile path ftp://person:Q3dfr4_$5@ftp.qt.nokia.com:2021 userName password Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides TCP Sockets UDP Sockets Guaranteed in-order delivery File and forget Point-to-point only Point-to-pint or broadcast Correct delivery important Time more important than delivery QTcpSocket = represent a socket QTcpServer = represent a server, listen incomming onnections generating QToSocket instances for each connection QT += network Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal Stuvia.co.uk - The Marketplace for Revision Notes & Study Guides Person - name: QString - birthDate: QDate + Person(QString, QDate) + setMemento(Memento) + createMemeonto(): Memento Memento - state: QStringList - Memento() - getState)_: QStringList - setState(QStringList) Caretaker - person: Person - memento: Memento Powered by TCPDF (www.tcpdf.org) Downloaded by: TTEQ | tristan@phillipsfamily.co.za Distribution of this document is illegal","libVersion":"0.2.3","langs":""}