{"path":"Subjects/COS3721 - Operating Systems and Architecture/Unsorted/COS3721/Exam pack (2)/materials/Questions-and-answers.docx.pdf","text":"Chap ter 1 Some early c omput ers pr otected the oper a ting s y s tem b y placing it in a memor y partition tha t c ould not be modified b y either the user job or the oper a ting s y s tem itself. Describe tw o difficulties tha t y ou think c ould arise with such a scheme. a ) If t h e o p e ra t in g s y s te m c a n n o t m o d if y t h e m e m o r y, t h e n s o m e im p o r ta n t a n d c r it ic a l d a ta s u c h a s p ro te c t io n a n d / o r s e c u r it y d a ta ( e .g . p a s s w o rd s a n d a c c e s s c o n t ro l in fo r m a t io n ) n e c e s s a r y fo r t h e o p e ra t in g s y s te m w o u ld h a v e to b e p a s s e d t h ro u g h o r s to re d in u n p ro te c te d m e m o r y s lo t s a n d w o u ld b e a c c e s s ib le to u n a u t h o r is e d u s e rs . b ) T h e o p e ra t in g s y s te m c o u ld n e v e r b e u p d a te d o r p a tc h e d , s in c e it is n o t m o d if ia b le o r a c c e s s ib le b y t h e u s e r o r t h e o p e ra t in g s y s te m it s e lf. Dis tinguish be tw een the clien t–ser v er and peer -to-peer models of Dis tributed s y s tems. T h e c o re b e n e f it s o f P e e r- to - P e e r m o d e l ( in o p p o s it io n w it h t h e c e n t ra liz e d m o d e l) s te m f ro m t h e fa c t t h a t e a c h p a r t ic ip a t in g c o m p u te r in t h e m o d e l c a n b e b o t h t h e c lie n t a n d s e r v e r. In a P e e r- to - p e e r m o d e l, s e r v ic e s a re d is t r ib u te d a c ro s s a c o lle c t io n o f p e e rs , ra t h e r t h a n h a v in g a s in g le , c e n t ra liz e d s e r v e r. P e e r- to - p e e r p ro v id e s fa u lt to le ra n c e a n d re d u n d a n c y. A ls o , b e c a u s e p e e rs c o n s ta n t ly m ig ra te , t h e y c a n p ro v id e a le v e l o f s e c u r it y o v e r a s e r v e r t h a t a lw a y s e x is t s a t a k n o w n lo c a t io n o n t h e In te r n e t . P e e r- to - p e e r s y s te m s c a n a ls o p o te n t ia lly p ro v id e h ig h e r n e t w o r k b a n d w id t h b e c a u s e y o u c a n c o lle c t iv e ly u s e a ll t h e b a n d w id t h o f p e e rs , ra t h e r t h a n t h e s in g le b a n d w id t h t h a t is a v a ila b le to a s in g le s e r v e r. In a multipr ogramming and time-sharing en vironmen t, se v eral users share the s y s tem simultaneously. This situa tion c an result in v arious security pr oblems. Wha t are tw o such pr oblems? S te a lin g o r c o p y in g o n e ’s p r o g r a m s o r d a ta ; u s in g s y s te m r e s o u r c e s ( C P U , m e m o r y, d is k s p a c e , p e r ip h e r a ls ) w ith o u t p r o p e r a c c o u n tin g . C a n w e e n s u re t h e s a m e d e g re e o f s e c u r it y in a t im e - s h a re d m a c h in e a s in a d e d ic a te d m a c h in e ? E x p la in y o u r a n s w e r. P ro b a b ly n o t , s in c e a h u m a n , a n d t h e m o re c o m p le x c a n in e v ita b ly b re a k a n y p ro te c t io n s c h e m e d e v is e d b y h u m a n s t h e s c h e m e , t h e m o re d iff ic u lt it is to fe e l c o n f id e n t o f it s c o r re c t im p le m e n ta t io n . Wha t is the purpose of in terrup ts? Ho w does an in terrup t differ from a trap? Can tr ap s be g enera ted in ten tionally b y a user pr ogram? If so , for wha t purpose? An in terrup t is a hardw are-g enera ted chang e of flo w within the s y s tem. An in terrup t handler is summoned to deal with the c ause of the in terrup t; c on trol is then re turned to the in terrup ted c on te x t and ins truction. A trap is a softw are-g enera ted in terrup t. An in terrup t c an be used to signal the c omple tion of an I/O to ob via te the need for de vice polling. A tr ap c an be used to c all oper a ting s y s tem routines or to c a tch arithme tic errors. Describe some of the challeng es of designing oper a ting s y s tems for mobile de vices c ompar ed with designing oper a ting s y s tems for traditional PCs. T h e g r e a te s t c h a lle n g e s in d e s ig n in g m o b ile o p e r a tin g s y s te m s in c lu d e :  L e s s s to r a g e c a p a c ity m e a n s th e o p e r a tin g s y s te m m u s t m a n a g e m e m o r y c a r e f u lly.  T h e o p e r a tin g s y s te m m u s t a ls o m a n a g e p o w e r c o n s u m p tio n c a r e f u lly.  L e s s p r o c e s s in g p o w e r p lu s f e w e r p r o c e s s o r s m e a n th e o p e r a tin g s y s te m m u s t c a r e f u lly a p p o r tio n p r o c e s s o r s to a p p lic a tio n s . Iden tif y se v eral adv an tag es and se v eral disadv an tag es of open-sour ce oper a ting s y s tems. Include the types of people who w ould find each aspect t o be an adv an tag e or a disadv an tag e. O p e n s o u r c e o p e r a tin g s y s te m s h a v e th e a d v a n ta g e s o f h a v in g m a n y p e o p le w o r k in g o n th e m , m a n y p e o p le d e b u g g in g th e m , e a s e o f a c c e s s a n d d is tr ib u tio n , a n d r a p id u p d a te c y c le s . F u r th e r, f o r s tu d e n ts a n d p r o g r a m m e r s , th e r e is c e r ta in ly a n a d v a n ta g e to b e in g a b le to v ie w a n d m o d if y th e s o u r c e c o d e . T y p ic a lly o p e n s o u r c e o p e r a tin g s y s te m s a r e f r e e f o r s o m e f o r m s o f u s e , u s u a lly ju s t r e q u ir in g p a y m e n t f o r s u p p o r t s e r v ic e s . C o m m e r c ia l o p e r a tin g s y s te m c o m p a n ie s u s u a lly d o n o t lik e th e c o m p e titio n th a t o p e n s o u r c e o p e r a tin g s y s te m s b r in g b e c a u s e th e s e f e a tu r e s a r e d iff ic u lt to c o m p e te a g a in s t. S o m e o p e n s o u r c e o p e r a tin g s y s te m s d o n o t o ff e r p a id s u p p o r t p r o g r a m s . S o m e c o m p a n ie s a v o id o p e n s o u r c e p r o je c ts b e c a u s e th e y n e e d p a id s u p p o r t, s o th a t th e y h a v e s o m e e n tity to h o ld a c c o u n ta b le if th e r e is a p r o b le m o r th e y n e e d h e lp f ix in g a n is s u e . F in a lly, s o m e c o m p la in th a t a la c k o f d is c ip lin e in th e c o d in g o f o p e n s o u r c e o p e r a tin g s y s te m s m e a n s th a t b a c k w a r d c o m p a tib ility is la c k in g m a k in g u p g r a d e s d iff ic u lt, a n d th a t th e f r e q u e n t r e le a s e c y c le e x a c e r b a te s th e s e is s u e s b y f o r c in g u s e r s to u p g r a d e f r e q u e n tly. Wha t role do de vice c on trollers and de vice driv ers pla y in a c omput er s y s tem? A de vice c on tr oller pr o vides for an in terface be tw een the peripher al(s) tha t it c on trols and the oper a ting s y s tem. It c ollabora tes with the de vice driv er, b y means of in terrup t, special-purpose regis ters and when necessar y Direct Memor y Access (DMA), to trans fer da ta from/to the peripher al(s) to/from the buffer s torag e. A de vice driv er on the other side unders tands the de vice c on troller and hence pr o vides the res t of the oper a ting s y s tem with a uniform in terface to de de vice. Direct memor y access is used for high-speed I/O de vices in order to a v oid increasing the CPU’s e x ecution load. Ho w does the CPU in terface with the de vice to c oordina te the trans fer? The CPU c an initia te a DMA oper a tion b y writing v alues in to special r egis ters tha t c an be independen tly accessed b y the de vice. The de vice initia tes the c orresponding oper a tion once it receiv es a c ommand from the CPU . Ho w does the CPU kno w when the memor y oper a tions are c omple te? When the de vice is finished with its oper a tion, it in terrup ts the CPU to indic a te the c omple tion of the oper a tion. Both the de vice and the CPU c an be accessing memor y simultaneously. The memor y c on troller pr o vides access to the memor y bus in a fair manner to these tw o en tities. The CPU is allo w ed to e x ecute other pr ograms while the DMA c on troller is trans ferring da ta. Does this pr ocess in terfere with the e x ecution of the user pr ograms? If so , describe wha t forms of in terference are c aused A CPU migh t there fore be unable to issue memor y oper a tions a t peak speeds since it has t o c ompe te with the de vice in order to ob tain access to the memor y bus. Describe three g eneral me thods used to pass par ame ters to the oper a ting s y s tem during s y s tem c alls? a. P ass par ame ters in regis ters b. R egis ters pass s tarting addresses of block s of par ame ters c. P arame ters c an be placed, or pushed, on to the s tack b y the pr ogram, and popped of f the s tack b y the oper a ting s y s tem With respect t o the RPC mechanism, c onsider the “e x actly once” seman tic. Does the alg orithm for implemen ting this seman tic e x ecute c orrectly e v en if the A CK messag e back to the clien t is los t due to a ne tw ork pr oblem? Describe the sequence of messag es and discuss whe ther “e x actly once” is s till pr eser v ed. If an RPC mechanism c annot support either the “ a t mos t once” or “ a t leas t once” seman tics, then the RPC ser v er c annot guaran tee tha t a remote pr ocedure will not be in v ok ed multiple occurrences. Consider if a remote pr ocedure w ere withdra wing mone y from a bank acc oun t on a s y s tem tha t did not support these seman tics. It is possible tha t a single in v oc a tion of the remote pr ocedure migh t lead to multiple withdr a w als on the ser v er. F or a s y s tem to support either of these seman tics g enerally requir es the ser v er main tain some form of clien t s ta te such as the times tamp described in the t e x t. If a s y s tem w ere unable to support either of these seman tics, then such a s y s tem c ould only sa fely pr o vide remote pr ocedures tha t do not alter da ta or pr o vide time-sensitiv e results. Using our bank acc oun t as an e x ample, w e certainly requir e “ a t mos t once” or “ a t leas t once” seman tics for perf orming a withdra w al (or deposit!). Ho w e v er, an inquir y in to an acc oun t balance or other acc oun t in forma tion such as name, address, e tc. does not requir e these seman tics. Wha t is the main adv an tag e of the microk ernel appr oach to s y s tem design? Ho w do user pr ograms and s y s tem ser vices in teract in a microk ernel architecture? Wha t are the disadv an tag es of using the microk ernel appr oach? Bene fits typic ally include the follo wing: (a) adding a ne w ser vice does not requir e modif ying the k ernel, (b) it is more secure as more oper a tions are done in user mode than in k ernel mode, and (c) a simpler k ernel design and functionality typic ally results in a more reliable oper a ting s y s tem. User pr ograms and s y s tem ser vices in teract in microk ernel architecture b y using in terpr ocess c ommunic a tion mechanisms such as messaging. These messag es are c on v e y ed b y the oper a ting s y s tem. The primar y disadv an tag es of the microk ernel architecture are the o v erheads associa ted with in terpr ocess c ommunic a tion and the frequen t use of the oper a ting s y s tem’s messaging functions in order to enable the user pr ocess and the s y s tem ser vice to in teract with each other. Chap ter 2 Wh y do some s y s tems s tore the oper a ting s y s tem in firm w are, while others s tore it on disk? A la r g e n u m b e r o f m o b ile d e v ic e s a n d e m b e d d e d s y s te m s s u c h a s c e llu la r p h o n e s , p e r s o n a l d ig ita l a s s is ta n ts , ta b le ts , r o b o ts , g a m e c o n s o le s e tc . g e n e r a lly h a v e p e r m a n e n t s to r a g e w ith lim ite d c a p a c ity, lo w s p e e d C P U , a n o p e r a tin g s y s te m w ith lim ite d fe a tu r e s a n d h a v e little c o n c e r n a b o u t u p d a tin g fr e q u e n tly th e ir s y s te m . T h u s , th e n e e d fo r s u c h d e v ic e s to h a v e th e ir o p e r a tin g s y s te m ( a n d /o r p r o g r a m s p r e - in s ta lle d o r ) s to r e d in fir m w a r e . Wha t are the fiv e major activities of an oper a ting s y s tem with reg ard to file manag emen t? 1 ) T h e c re a t io n a n d d e le t io n o f f ile s 2 ) T h e c re a t io n a n d d e le t io n o f d ire c to r ie s 3 ) T h e s u p p o r t o f p r im it iv e s fo r m a n ip u la t in g f ile s a n d d ire c to r ie s 4 ) T h e m a p p in g o f f ile s o n to s e c o n d a r y s to ra g e 5 ) T h e b a c k u p o f f ile s o n s ta b le ( n o n -v o la t ile ) s to ra g e m e d ia Wha t are the tw o models of in ter pr ocess c ommunic a tion? Wha t are the s treng ths and w eaknesses of the tw o appr oaches? (1) In t er -proc ess c ommunic ation models: the tw o models of in ter-pr ocess c ommunic a tion are messag e-passing model and the shar ed-memor y model. (2) Strengths and weaknesses : Messag e passing is use ful for e x changing smaller amoun ts of da ta, bec ause no c on flicts need be a v oided. It is also easier to implemen t than is shared memor y for in ter-c omput er c ommunic a tion. Shared memor y allo w s ma ximum speed and c on v enience of c ommunic a tion, since it c an be done a t memor y trans fer speeds when it tak es place within a c omput er. Ho w e v er, this me thod c ompr omises on pr otection and s ynchroniz a tion be tw een the pr ocesses sharing memor y. Explain wh y Ja v a pr ograms running on Android s y s tems do not use the s tandard Ja v a API and virtual machine. It is bec ause the s tandard API and virtual machine are designed for desk top and ser v er s y s tems, not mobile de vices. Google de v eloped a separ a te API and virtual machine for mobile de vices. Consider a multipr ocessor s y s tem and a multithreaded pr ogram written using the man y -to-man y (m tm) threading model. Suppose the number of user -le v el threads in the pr ogram is more than the number of pr ocessors in the s y s tem. Discuss the perf ormance implic a tions of the follo wing scenarios on the s y s tem. Jus tif y y our claims. (a) The number of k ernel threads alloc a ted to the pr ogram is less than the number of pr ocessors. If the number of k ernel threads is less than the number of pr ocessors, then the s y s tem is not used op timally, since there will alw a y s be one or more pr ocessors tha t are idle. There ma y be user threads tha t are ready to run and there ma y be idle pr ocessors ready to be alloc a ted to them, but there are no k ernel threads to facilita te the c onnections. (b) The number of k ernel threads alloc a ted to the pr ogram is equal t o the number of pr ocessors. This is a be tter design than (a) abo v e, since whene v er there is a k ernel thread tha t c an be multiple x ed to a user thread, there will be an a v ailable pr ocessor. In essence, there fore, each k ernel thread has its o wn pr ocessor. Note tha t there c ould s till be user threads tha t are ready to e x ecute but no a v ailable k ernel threads and, there fore, no pr ocessors a v ailable to acc ommoda te the user thread. (c) The number of k ernel threads alloc a ted to the pr ogram is grea ter than the number of pr ocessors but less than the number of user-le v el threads. This ma y be the bes t design of the three, since it mimics the mos t c ommon situa tion, i.e. there are man y user threads w an ting to e x ecute and there are k ernel threads a v ailable (often not enough, ho w e v er) but there ma y not be enough pr ocessors a v ailable. Ne v ertheless, the adv an tag e of this s y s tem is tha t if a particular k ernel thread and user thread pair ma y block, another k ernel thread, user thread pair ma y run on the pr ocessor so released. Chap ter 3 Original v ersions of Apple’ s mobile iOS oper a ting s y s tem pr o vided no means of c oncurren t pr ocessing. Discuss three major c omplic a tions tha t c oncurren t pr ocessing add to an oper a ting s y s tem. a ) T h e O S h a s to k e e p t ra c k o f t h e m a in m e m o r y a d d re s s s p a c e a llo c a te d to e a c h p ro c e s s s o t h a t a p ro c e s s d o e s n o t a ffe c t o r h a r m o t h e r p ro c e s s e s d a ta . T h is is a n e c e s s a r y, fo r e x a m p le , a v ir u s m a y t r y to d e s t ro y o r m o d if y o t h e r p ro c e s s d a ta . b ) S w itc h in g f ro m o n e p ro c e s s to a n o t h e r p ro c e s s le a d s to t im e o v e r h e a d , t h is re q u ire s s to r in g t h e c u r re n t re g is te r v a lu e s a n d lo a d in g t h e re g is te r v a lu e s o f t h e n e x t p ro c e s s f ro m it s P C B ( p ro g ra m C o n t ro l B lo c k ) . c ) If a r u n n in g p ro c e s s re q u ire s la rg e s p a c e in m e m o r y t h e n o t h e r p ro c e s s n e e d s to b e d u m p e d b a c k to h a rd d is k w h ic h a g a in le a d s to t im e o v e r h e a d . Describe the differences among short-term, medium-term, and long term scheduling. d ) S h o r t- te r m ( C P U s c h e d u le r ) — s e le c t s f ro m jo b s in m e m o r y t h o s e jo b s t h a t a re re a d y to e x e c u te a n d a llo c a te s t h e C P U to t h e m . e ) M e d iu m - te r m — u s e d e s p e c ia lly w it h t im e - s h a r in g s y s te m s a s a n in te r m e d ia te s c h e d u lin g le v e l. A s w a p p in g s c h e m e is im p le m e n te d to re m o v e p a r t ia lly r u n p ro g ra m s f ro m m e m o r y a n d re in s ta te t h e m la te r to c o n t in u e w h e re t h e y le f t o ff. f ) L o n g - te r m ( jo b s c h e d u le r ) — d e te r m in e s w h ic h jo b s a re b ro u g h t in to m e m o r y fo r p ro c e s s in g . T h e p r im a r y d iffe re n c e is in t h e f re q u e n c y o f t h e ir e x e c u t io n . T h e s h o r t- te r m m u s t s e le c t a n e w p ro c e s s q u ite o f te n . L o n g - te r m is u s e d m u c h le s s o f te n s in c e it h a n d le s p la c in g jo b s in t h e s y s te m a n d m a y w a it a w h ile fo r a jo b to f in is h b e fo re it a d m it s a n o t h e r o n e . Giv e an e x ample of a situa tion in which ordinar y pipes ar e more suitable than named pipes and an e x ample of a situa tion in which named pipes ar e more suitable than ordinar y pipes. S im p le c o m m u n ic a t io n w o r k s w e ll w it h o rd in a r y p ip e s . F o r e x a m p le , a s s u m e w e h a v e a p ro c e s s t h a t c o u n t s c h a ra c te rs in a f ile . A n o rd in a r y p ip e c a n b e u s e d w h e re t h e p ro d u c e r w r ite s t h e f ile to t h e p ip e a n d t h e c o n s u m e r re a d s t h e f ile s a n d c o u n t s t h e n u m b e r o f c h a ra c te rs in t h e f ile . N e x t , fo r a n e x a m p le w h e re n a m e d p ip e s a re m o re s u ita b le , c o n s id e r t h e s it u a t io n w h e re s e v e ra l p ro c e s s e s m a y w r ite m e s s a g e s to a lo g . W h e n p ro c e s s e s w is h to w r ite a m e s s a g e to t h e lo g , t h e y w r ite it to t h e n a m e d p ip e . A s e r v e r re a d s t h e m e s s a g e s f ro m t h e n a m e d p ip e a n d w r ite s t h e m to t h e lo g f ile Wha t are the bene fits and the disadv an tag es of each of the follo wing? Consider both the s y s tem le v el and the pr ogrammer le v el. (a) S ynchronous and as ynchronous c ommunic a tion A bene fit of s ynchronous c ommunic a tion is tha t it allo w s a rende z v ous be tw een the sender and receiv er. A disadv an tag e of a blocking send is tha t a rende z v ous ma y not be requir ed and the messag e c ould be deliv ered as ynchronously. As a result, messag e-passing s y s tems often pr o vide both forms of s ynchroniz a tion. (b) Automa tic and e xplicit buf fering Automa tic buffering pr o vides a queue with inde finite leng th, thus ensuring the sender will ne v er ha v e to block while w aiting to c op y a messag e. There are no specific a tions on ho w automa tic buffering will be pr o vided; one scheme ma y reser v e sufficien tly larg e memor y where much of the memor y is w as ted. Explicit buf fering specifies ho w larg e the buffer is. In this situa tion, the sender ma y be block ed while w aiting for a v ailable space in the queue. Ho w e v er, it is less lik ely tha t memor y will be w as ted with e xplicit buf fering. (c) Send b y c op y and send b y re ference Send b y c op y does not allo w the receiv er to alter the s ta te of the par ame ter; send b y re ference does allo w it. A bene fit of send b y re ference is tha t it allo w s the pr ogrammer to write a dis tributed v ersion of a cen traliz ed applic a tion. Ja v a’s RMI pr o vides both; ho w e v er, passing a par ame ter b y re ference requir es declaring the par ame ter as a remote object as w ell. (d) Fix ed-siz ed and v ariable-siz ed messag es. The implic a tions of this are mos tly rela ted to buffering issues; with fix ed-siz e messag es, a buffer with a specific siz e c an hold a kno wn number of messag es. The number of v ariable-siz ed messag es tha t c an be held b y such a buffer is unkno wn. Consider ho w Windo w s 2000 handles this situa tion: with fix ed-siz ed messag es (an y thing < 256 b y tes), the messag es are c opied fr om the address space of the sender t o the address space of the receiving pr ocess. Larg er messag es (i.e. v ariable-siz ed messag es) use shared memor y to pass the messag e Chap ter 4 Under wha t circums tances does a multithreaded solution using multiple k ernel threads pr o vide be tter perf ormance than a single-threaded solution on a single-pr ocessor s y s tem? Which of the follo wing c omponen ts of pr ogram s ta te are shared across threads in a multithreaded pr ocess? Can a multithreaded solution using multiple user -le v el threads achie v e be tter perf ormance on a multipr ocessor s y s tem than on a single pr ocessor s y s tem? Explain. A m u ltith r e a d e d s y s te m c o m p r is in g o f m u ltip le u s e r - le v e l th r e a d s c a n n o t m a k e u s e o f th e d iffe r e n t p r o c e s s o r s in a m u ltip r o c e s s o r s y s te m s im u lta n e o u s ly. T h e o p e r a tin g s y s te m s e e s o n ly a s in g le p r o c e s s a n d w ill n o t s c h e d u le th e d iffe r e n t th r e a d s o f th e p r o c e s s o n s e p a r a te p r o c e s s o r s . C o n s e q u e n tly, th e r e is n o p e r fo r m a n c e b e n e fit a s s o c ia te d w ith e x e c u tin g m u ltip le u s e r - le v e l th r e a d s o n a m u ltip r o c e s s o r s y s te m . In Chap ter 3, w e discussed Google’s Chrome bro w ser and its pr actice of opening each ne w w eb site in a separ a te pr ocess. W ould the same bene fits ha v e been achie v ed if ins tead Chrome had been designed to open each ne w w eb site in a separ a te thread? Explain. N o . T h e p r im a r y r e a s o n fo r o p e n in g e a c h w e b s ite in a s e p a r a te p r o c e s s is th a t if a w e b a p p lic a tio n in o n e w e b s ite c r a s h e s , o n ly th a t r e n d e r e r p r o c e s s is a ffe c te d , a n d th e b r o w s e r p r o c e s s , a s w e ll a s o th e r r e n d e r e r p r o c e s s e s , a r e u n a ffe c te d . B e c a u s e m u ltip le th r e a d s a ll b e lo n g to th e s a m e p r o c e s s , a n y th r e a d th a t c r a s h e s w o u ld a ffe c t th e e n tir e p r o c e s s . Lis t the four major c a teg ories of the bene fits of multithreading pr ogramming. Brie fly e xplain each. (1) R esponsiveness – Multithreading an in teractiv e applic a tion ma y allo w a pr ogram to c on tinue running e v en if part of it is block ed or is perf orming a leng th y oper a tion, thereb y increasing responsiv eness to the user. This quality is especially use ful in designing user in terfaces. (2) R esourc e sharing - Threads share the memor y and the resources of the pr ocess to which the y belong b y de fault. The bene fit of sharing c ode and da ta is tha t it allo w s an applic a tion to ha v e se v eral differen t threads of activity within the same address space. (3) E c onom y - It is more ec onomic al to crea te and c on te x t-s witch threads bec ause the y share the resources of the pr ocess to which the y belong. In g eneral, it is more time c onsuming to crea te and manag e pr ocesses than threads. (4) Sc alability - The bene fits of multithreading c an e v en be grea ter in a multipr ocessor architecture, where threads ma y running in par allel on differen t pr ocessing c ores. A single-threaded pr ocess c an run on only one pr ocessor, reg ardless ho w man y are a v ailable. Wha t are the tw o differen t w a y s in which a thread librar y c ould be implemen ted? (1) User -librar y: pr o vide a librar y en tirely in user space with no k ernel support. All c ode and da ta s tructures for the librar y e xis t in user space. This c ase, in v oking a function in the librar y results in a loc al function c all in user space and not a s y s tem c all. (2) K ernel-le vel librar y : implemen t a k ernel-le v el librar y support ed directly b y the oper a ting s y s tem. In this c ase, c ode and da ta s tructures for the librar y e xis t in k ernel space. In v oking a function in the API for the librar y typic ally results in a s y s tem c all to the k ernel. Which of the follo wing c omponen ts of a pr ogram s ta te are shared across threads in a multithreaded pr ocess? Jus tif y y our claims. (a) R egis ter v alues (b) Heap memor y (c) Global v ariables (d) A s tack in memor y “ A thr ead is a basic unit of CPU utiliz a tion; it c omprises a thr ead ID , a pr ogram c oun ter, a r egis ter se t and a s t ack. It shar es with other thr eads belonging t o the same pr ocess its c ode section, da t a section, and other opera ting-s y s tem r esources, such as open files and signals.” (a) R egis ter v alues c annot be shared as each thread requir ed a regis ter se t (b) Heap memor y c an be shared as it is one of the resources of the pr ocess (c) Global v ariables c an be shared among threads the y are da ta c on tainers (d) A s tack memor y c annot be shared as it is requir ed for each thread. Chap ter 5 Explain wh y in terrup ts are not appr opria te for implemen ting s ynchroniz a tion primitiv es in multipr ocessor s y s tems. In te r r u p ts a r e n o t s u ffic ie n t in m u ltip r o c e s s o r s y s te m s s in c e d is a b lin g in te r r u p ts o n ly p r e v e n ts o th e r p r o c e s s e s fr o m e x e c u tin g o n th e p r o c e s s o r in w h ic h in te r r u p ts w e r e d is a b le d ; th e r e a r e n o lim ita tio n s o n w h a t p r o c e s s e s c o u ld b e e x e c u tin g o n o th e r p r o c e s s o r s a n d th e r e fo r e th e p r o c e s s d is a b lin g in te r r u p ts c a n n o t g u a r a n te e m u tu a lly e x c lu s iv e a c c e s s to p r o g r a m s ta te . The Linux k ernel has a policy tha t a pr ocess c annot hold a spinlock while a ttemp ting to acquir e a semaphor e. Explain wh y this policy is in place. B e c a u s e a c q u ir in g a s e m a p h o re m a y p u t t h e p ro c e s s to s le e p w h ile it is w a it in g fo r t h e s e m a p h o re to b e c o m e a v a ila b le . S p in lo c k s a re to o n ly b e h e ld fo r s h o r t d u ra t io n s a n d a p ro c e s s t h a t is s le e p in g m a y h o ld t h e s p in lo c k fo r to o lo n g a p e r io d . Describe tw o k ernel da ta s tructures in which race c onditions are possible. Be sure to include a descrip tion of ho w a race c ondition c an occur. T h e r e a r e m a n y a n s w e r s to th is q u e s tio n . S o m e k e r n e l d a ta s tr u c tu r e s in c lu d e a p r o c e s s id ( p id ) m a n a g e m e n t s y s te m , k e r n e l p r o c e s s ta b le , a n d s c h e d u lin g q u e u e s . W ith a p id m a n a g e m e n t s y s te m , it is p o s s ib le tw o p r o c e s s e s m a y b e c r e a te d a t th e s a m e tim e a n d th e r e is a r a c e c o n d itio n a s s ig n in g e a c h p r o c e s s a u n iq u e p id . T h e s a m e ty p e o f r a c e c o n d itio n c a n o c c u r in th e k e r n e l p r o c e s s ta b le : tw o p r o c e s s e s a r e c r e a te d a t th e s a m e tim e a n d th e r e is a r a c e a s s ig n in g th e m a lo c a tio n in th e k e r n e l p r o c e s s ta b le . W ith s c h e d u lin g q u e u e s , it is p o s s ib le o n e p r o c e s s h a s b e e n w a itin g fo r IO w h ic h is n o w a v a ila b le . A n o th e r p r o c e s s is b e in g c o n te x t- s w itc h e d o u t. T h e s e tw o p r o c e s s e s a r e b e in g m o v e d to th e R u n n a b le q u e u e a t th e s a m e tim e . H e n c e th e r e is a r a c e c o n d itio n in th e R u n n a b le q u e u e . Explain wh y implemen ting s ynchroniz a tion primitiv es b y disabling in terrup ts is not appr opria te in a single-pr ocessor s y s tem if the s ynchroniz a tion primitiv es are to be used in user-le v el pr ograms. If a u s e r- le v e l p ro g ra m is g iv e n t h e a b ilit y to d is a b le in te r r u p t s , t h e n it c a n d is a b le t h e t im e r in te r r u p t a n d p re v e n t c o n te x t s w itc h in g f ro m ta k in g p la c e , t h e re b y a llo w in g it to u s e t h e p ro c e s s o r w it h o u t le tt in g o t h e r p ro c e s s e s e x e c u te . Chap ter 6 Wh y is it import an t for the scheduler to dis tinguish I/O-bound pr ograms from CPU-bound pr ograms? I/O - b o u n d p r o g r a m s h a v e th e p r o p e r ty o f p e r fo r m in g o n ly a s m a ll a m o u n t o f c o m p u ta tio n b e fo r e p e r fo r m in g I/O . S u c h p r o g r a m s ty p ic a lly d o n o t u s e u p th e ir e n tir e C P U q u a n tu m . C P U - b o u n d p r o g r a m s , o n th e o th e r h a n d , u s e th e ir e n tir e q u a n tu m w ith o u t p e r fo r m in g a n y b lo c k in g I/O o p e r a tio n s . C o n s e q u e n tly, o n e c o u ld m a k e b e tte r u s e o f th e c o m p u te r ’s r e s o u r c e s b y g iv in g h ig h e r p r io r ity to I/O - b o u n d p r o g r a m s a n d a llo w th e m to e x e c u te a h e a d o f th e C P U - b o u n d p r o g r a m s . Chap ter 8 Explain wh y mobile oper a ting s y s tems such as iOS and Android do not support s w apping. T h e r e a r e th r e e r e a s o n s : F ir s t is th a t th e s e m o b ile d e v ic e s ty p ic a lly u s e fla s h m e m o r y w ith lim ite d c a p a c ity a n d s w a p p in g is a v o id e d b e c a u s e o f th is s p a c e c o n s tr a in t. S e c o n d , fla s h m e m o r y c a n s u p p o r t a lim ite d n u m b e r o f w r ite o p e r a tio n s b e fo r e it b e c o m e s le s s r e lia b le . L a s tly, th e r e is ty p ic a lly p o o r th r o u g h p u t b e tw e e n m a in m e m o r y a n d fla s h m e m o r y. Program binaries in man y s y s tems are typic ally s tructured as follo w s. Code is s tored s tarting with a small, fix ed virtual address, such as 0. The c ode segmen t is follo w ed b y the da ta segmen t tha t is used for s toring the pr ogram v ariables. When the pr ogram s tarts e x ecuting , the s tack is alloc a ted a t the other end of the virtual address space and is allo w ed to gro w to w ard lo w er virtual addresses. Wha t is the signific ance of this s tructure for the follo wing schemes? a. Con tiguous memor y alloc a tion C o n tig u o u s - m e m o r y a llo c a tio n r e q u ir e s th e o p e r a tin g s y s te m to a llo c a te th e e n tir e e x te n t o f th e v ir tu a l a d d r e s s s p a c e to th e p r o g r a m w h e n it s ta r ts e x e c u tin g . T h is c o u ld b e m u c h la r g e r th a n th e a c tu a l m e m o r y r e q u ir e m e n ts o f th e p r o c e s s . b. Pure segmen ta tion P u r e s e g m e n ta tio n g iv e s th e o p e r a tin g s y s te m fle x ib ility to a s s ig n a s m a ll e x te n t to e a c h s e g m e n t a t p r o g r a m s ta r tu p tim e a n d e x te n d th e s e g m e n t if r e q u ir e d . c. Pure paging P u re p a g in g d o e s n o t re q u ire t h e o p e ra t in g s y s te m to a llo c a te t h e m a x im u m e x te n t o f t h e v ir t u a l a d d re s s s p a c e to a p ro c e s s a t s ta r t u p t im e , b u t it s t ill re q u ire s t h e o p e ra t in g s y s te m to a llo c a te a la rg e p a g e ta b le s p a n n in g a ll o f t h e p ro g ra m ’s v ir t u a l a d d re s s s p a c e . W h e n a p ro g ra m n e e d s to e x te n d t h e s ta c k o r t h e h e a p , it n e e d s to a llo c a te a n e w p a g e b u t t h e c o r re s p o n d in g p a g e ta b le e n t r y is p re - a llo c a te d . Although Android does not support s w apping on its boot disk, it is possible t o se t up a s w ap space using a separ a te SD non v ola tile memor y c ard. Wh y w ould Android disallo w s w apping on its boot disk y e t allo w it on a sec ondar y disk? Assuming a 1-KB pag e siz e, wha t are the pag e numbers and offse ts for the follo wing address re ferences (pr o vided as decimal numbers): a. 3085 b. 42095 c. 215201 d. 650000 e. 2000001 Chap ter 9 Consider the follo wing pag e re ference s tring: 7, 2, 3, 1, 2, 5, 3, 4, 6, 7, 7, 1, 0, 5, 4, 6, 2, 3, 0, 1. Assuming demand paging with thr ee frames, ho w man y pag e faults w ould occur for the follo wing replacemen t alg orithms? • LRU replacemen t • FIF O replacemen t • Op timal replacemen t Consider the follo wing pag e re ference s tring: 1, 2, 3, 4, 2, 1, 5, 6, 2, 1, 2, 3, 7, 6, 3, 2, 1, 2, 3, 6. Ho w man y pag e faults w ould occur for the follo wing replacemen t alg orithms, assuming one, tw o , three, four, fiv e, six, and se v en frames? R emember tha t all frames are initially emp ty, so y our firs t unique pag es will c os t one fault each. • LRU replacemen t • FIF O replacemen t • Op timal replacemen t Assume tha t w e ha v e a demand-pag ed memor y. The pag e table is held in regis ters. It tak es 8 millisec onds to ser vice a pag e fault if an emp ty frame is a v ailable or if the replaced pag e is not modified and 20 millisec onds if the replaced pag e is modified. Memor y -access time is 100 nanosec onds. Assume tha t the pag e to be replaced is modified 70 per cen t of the time. Wha t is the ma ximum accep table pag e-fault ra te for an e ffectiv e access time of no more than 200 nanosec onds? When a pag e fault occurs, the pr ocess reques ting the pag e mus t block while w aiting for the pag e to be brough t from disk in to ph y sic al memor y. Assume tha t there e xis ts a pr ocess with fiv e user-le v el threads and tha t the mapping of user thr eads to k ernel threads is one to one. If one user thread incurs a pag e fault while accessing its s tack, w ould the other user threads belonging to the same pr ocess also be a ffected b y the pag e fault—tha t is, w ould the y also ha v e to w ait for the faulting pag e to be brough t in to memor y? Explain. Chap ter 10 Is disk scheduling , other than F CF S scheduling , use ful in a single-user en vironmen t? Explain y our ans w er. In a s in g le - u s e r e n v ir o n m e n t, th e I/O q u e u e u s u a lly is e m p ty. R e q u e s ts g e n e r a lly a r r iv e fr o m a s in g le p r o c e s s fo r o n e b lo c k o r fo r a s e q u e n c e o f c o n s e c u tiv e b lo c k s . In th e s e c a s e s , F C F S is a n e c o n o m ic a l m e th o d o f d is k s c h e d u lin g . B u t L O O K is n e a r ly a s e a s y to p r o g r a m a n d w ill g iv e m u c h b e tte r p e r fo r m a n c e w h e n m u ltip le p r o c e s s e s a r e p e r fo r m in g c o n c u r r e n t I/O , s u c h a s w h e n a W e b b r o w s e r r e tr ie v e s d a ta in th e b a c k g r o u n d w h ile th e o p e r a tin g s y s te m is p a g in g a n d a n o th e r a p p lic a tio n is a c tiv e in th e fo r e g r o u n d . Explain wh y SS TF scheduling tends to fa v or middle cylinders o v er the innermos t and outermos t cylinders. T h e c e n te r o f th e d is k is th e lo c a tio n h a v in g th e s m a lle s t a v e r a g e d is ta n c e to a ll o th e r tr a c k s . T h u s , th e d is k h e a d te n d s to m o v e a w a y fr o m th e e d g e s o f th e d is k . H e r e is a n o th e r w a y to th in k o f it. T h e c u r r e n t lo c a tio n o f th e h e a d d iv id e s th e c y lin d e r s in to tw o g r o u p s . If th e h e a d is n o t in th e c e n te r o f th e d is k a n d a n e w r e q u e s t a r r iv e s , th e n e w r e q u e s t is m o r e lik e ly to b e in th e g r o u p th a t in c lu d e s th e c e n te r o f th e d is k ; th u s , th e h e a d is m o r e lik e ly to m o v e in th a t d ir e c tio n . Wh y is it import an t to balance file-s y s tem I/O among the disk s and c on trollers on a s y s tem in a multitasking en vironmen t? Wha t are the tradeoffs in v olv ed in rereading c ode pag es from the file s y s tem v ersus using s w ap space t o s tore them? Chap ter 11 Consider a file s y s tem in which a file c an be dele ted and its disk space r eclaimed while link s to tha t file s till e xis t. Wha t pr oblems ma y occur if a ne w file is crea ted in the same s torag e area or with the same ab solute pa th name? Ho w c an these pr oblems be a v oided? L e t F 1 b e th e o ld file a n d F 2 b e th e n e w file . A u s e r w is h in g to a c c e s s F 1 th r o u g h a n e x is tin g lin k w ill a c tu a lly a c c e s s F 2 . N o te th a t th e a c c e s s p r o te c tio n fo r file F 1 is u s e d r a th e r th a n th e o n e a s s o c ia te d w ith F 2 . T h is p r o b le m c a n b e a v o id e d b y in s u r in g th a t a ll lin k s to a d e le te d file a r e d e le te d a ls o . T h is c a n b e a c c o m p lis h e d in s e v e r a l w a y s : a . m a in ta in a lis t o f a ll lin k s to a file , r e m o v in g e a c h o f th e m w h e n th e file is d e le te d b . r e ta in th e lin k s , r e m o v in g th e m w h e n a n a tte m p t is m a d e to a c c e s s a d e le te d file c . m a in ta in a file r e fe r e n c e lis t ( o r c o u n te r ) , d e le tin g th e file o n ly a fte r a ll lin k s o r r e fe r e n c e s to th a t file h a v e b e e n d e le te d Wha t are the adv an tag es and disadv an tag es of pr o viding manda tor y lock s ins tead of advisor y lock s whose use is le ft to users’ discre tion? In m a n y c a s e s , s e p a ra te p ro g ra m s m ig h t b e w illin g to to le ra te c o n c u r re n t a c c e s s to a f ile w it h o u t re q u ir in g t h e n e e d to o b ta in lo c k s a n d t h e re b y g u a ra n te e in g m u t u a l e x c lu s io n to t h e f ile s . M u t u a l e x c lu s io n c o u ld b e g u a ra n te e d b y o t h e r p ro g ra m s t r u c t u re s s u c h a s m e m o r y lo c k s o r o t h e r fo r m s o f s y n c h ro n iz a t io n . In s u c h s it u a t io n s , t h e m a n d a to r y lo c k s w o u ld lim it t h e f le x ib ilit y in h o w f ile s c o u ld b e a c c e s s e d a n d m ig h t a ls o in c re a s e t h e o v e r h e a d s a s s o c ia te d w it h a c c e s s in g f ile s . The open- file table is used to main tain in forma tion about files tha t are curren tly open. Should the oper a ting s y s tem main tain a separ a te table for each user or main tain jus t one table tha t c on tains re ferences to files tha t are curren tly being accessed b y all users? If the same file is being accessed b y tw o differen t pr ograms or users, should there be separ a te en tries in the open- file table? Explain. Pro vide e x amples of applic a tions tha t typic ally access files acc ording to the follo wing me thods: • Sequen tial • Random Chap ter 12 Chap ter 13 Chap ter 14 The access-c on trol ma trix c an be used to de termine whe ther a pr ocess c an s witch from, sa y, domain A to domain B and enjo y the access privileg es of domain B. Is this appr oach equiv alen t to including the access privileg es of domain B in those of domain A ? Ye s , th is a p p r o a c h is e q u iv a le n t to in c lu d in g th e a c c e s s p r iv ile g e s o f d o m a in B in th o s e o f d o m a in A a s lo n g a s th e s w itc h p r iv ile g e s a s s o c ia te d w ith d o m a in B a r e a ls o c o p ie d o v e r to d o m a in A . Consider a c omput er s y s tem in which c omput er g ames c an be pla y ed b y s tuden ts only be tw een 10 P .M. and 6 A .M., b y faculty members be tw een 5 P .M. and 8 A .M., and b y the c omput er cen ter s ta ff a t all times. Sug g es t a scheme for implemen ting this policy e fficien tly. S e t u p a d y n a m ic p ro te c t io n s t r u c t u re t h a t c h a n g e s t h e s e t o f re s o u rc e s a v a ila b le w it h re s p e c t to t h e t im e a llo tte d to t h e t h re e c a te g o r ie s o f u s e rs . A s t im e c h a n g e s , s o d o e s t h e d o m a in o f u s e rs e lig ib le to p la y t h e c o m p u te r g a m e s . W h e n t h e t im e c o m e s t h a t a u s e r ’s e lig ib ilit y is o v e r, a re v o c a t io n p ro c e s s m u s t o c c u r. R e v o c a t io n c o u ld b e im m e d ia te , s e le c t iv e ( s in c e t h e c o m p u te r s ta ff m a y a c c e s s it a t a n y h o u r ) , to ta l, a n d te m p o ra r y ( s in c e r ig h t s to a c c e s s w ill b e g iv e n b a c k la te r in t h e d a y ) . Wha t hardw are fea tures does a c omput er s y s tem need for e fficien t c apability manipula tion? Can these fea tures be used for memor y pr otection? Discuss the s treng ths and w eaknesses of implemen ting an access ma trix using access lis ts tha t are associa ted with objects. Chap ter 15 Chap ter 16 Chap ter 18","libVersion":"0.2.3","langs":""}