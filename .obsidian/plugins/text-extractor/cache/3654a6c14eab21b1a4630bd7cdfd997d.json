{"path":"UNISA/98906 - BSc Science in Computing/COS3711 - Advanced Programming/Unsorted/SORT/Prev Sem/COS3711/drive-download-20200416T190041Z-001/Exam Papers/mayjune2012.pdf","text":"Question 1 #include <QtCore/QCoreApplication> #include <Qstring> #include <QTextStream> int main(int argc, char *argv[]) { QCoreApplication a(argc, argv); QTextStream cout(stdout); QString W = argv[1]; QString H = argv[2]; cout<<\"BMI :\"<<W.toDouble()/(H.toDouble()*H.toDouble()); return a.exec(); } Question 2 2.1 The compiler creates an empty default constructor automatically. 2.2 a. A pure virtual function has no implementation body and is equal to zero. It makes the class abstract. b. No 2.3 a. Valid b. Valid c. Invalid 2.4 celestialbody.h #ifndef CELESTIALBODY_H #define CELESTIALBODY_H #include <QString> class CelestialBody { public : virtual void draw() const = 0; virtual void advance(double num_hour); protected : QString m_Name; double m_right_ascension; double m_declenation; } #endif // CELESTIALBODY_H Celestialbody.cpp #include \"CELESTIALBODY.H\" void celestialbody::advance (double num_hour){ m_right_ascension = m_right_ascension + num_hour; if (m_right_ascension >= 24.0) m_right_ascension = m_right_asscension - 24.0; } 2.5 #ifndef STAR_H #define STAR_H class Star : public CelestialBody { public : void draw (); void advance (double num_hour); protected : bool m_is_visible; }; #endif // STAR_H Star.cpp #include \"Star.h\" void Star::draw (){ } void Star::advance(double num_hour) { Celestialbody::advance(num_hour); if (m_right_ascension >=6.0) && (m_right_ascension <=18.0) m_is_visible = true; else m_is_visible = false; } 3.1 #ifndef PRODUCT_H #define PRODUCT_H #include <QString> #include <QObject> class Product : public QObject{ Q_OBJECT public : Product(QString d, double p, int n); void sell(int n); signals : void zeroitems(QString z); private : QString m_Description; double m_PricePerItem; int m_NoOfItems; }; #endif // PRODUCT_H Product.cpp #include \"product.h\" Product::Product(QString d, double p, int n) {}; void Product::sell(int n) { if (n <= m_NoOfItems ) { m_NoOfItems = m_NoOfItems -n; } if ( m_NoOfItems == 0) { emit zeroitems(m_Description); } } 3.2 #ifndef ZEROSTOCKLIST_H #define ZEROSTOCKLIST_H #include <QString> #include <QObject> #include <QList> class ZeroStockList : public QObject { Q_OBJECT public slots : void AddDesc(QString d); private : QList<QString> m_zerostock; }; #endif // ZEROSTOCKLIST_H Zerostocklist.cpp #include \"zerostocklist.h\" #include <QObject> void ZeroStockList::AddDesc(QString d) { m_zerostock.append(d); } 3.3 #include <QCoreApplication> #include \"product.h\" #include \"zerostocklist.h\" //... Product* P1(\"bread\",4.5,5); ZeroStockList* Z1 = new ZeroStockList(); QObject::connect(P1, SIGNAL(zeroitems(QString)), Z1, SLOT(AddDesc(QString))); //.. Q4. 4.1 Leaf classes: Files and sub-directories Composite classes: Directories 4.2 4.3 listFiles() Q5. 1. Q_OBJECT 2. Public slots 3. m_toggle_timer = new QPushButton(“Toggle Timer on”); 4. QPushButton* set_timer = new Pushbutton(“Set Timer”); 5. Layout->AddWidget(set_timer,1,1) 6. QObject::connect(m_toggle_timer, SIGNAL(clicked()), this, SLOT(toggletimer()); 7. QObject::connect(m_timer, SIGNAL(timeout), this, SLOT(displaymessage()); 8. MessageoftheDay::m_current_message += 1; If (MessageoftheDay::m_current_message > MessageOftheDay::m_messages.size()-1) MessageoftheDay::m_current_message = 0;} 9. QMessageBox::information(this, “Message of the Day”, Messageoftheday::m_messages[m_current_message]); 10. Int t_val 11. T_val = m_timer_entry->text().toInt(&ok); 12. If(t-val >= 2000 && t-val <= 10000 ) 13. m_toggle_timer->setText(“Toggle Timer ON”); 14. m_toggle_timer->setText(“Toggle Timer OFF”); Question 6 EmployeeReader.h #ifndef EMPLOYEEREADER_H #define EMPLOYEEREADER_H #include \"employee.h\" #include <QString> class EmployeeReader { public : EmployeeReader(QString n); Employee* read(); private : QString file; }; #endif // EMPLOYEEREADER_H Employeereader.cpp #include \"employeereader.h\" #include \"employee.h\" #include <QFile> #include <QTextStream> #include <QStringList> #include <QString> EmployeeReader::EmployeeReader(QString n) : filename (n){}; Employee* EmployeeReader::read(){ QString input; QStringlist Stringlist; QFile infile(filename); infile.open(QIODevice::ReadOnly); QTextStream instream(infile); input = instream.readLine(); Stringlist = instream.trim().split(\",\"); Employee* newEmp = new Employee(); newEmp->setName(Stringlist[0].trim()); newEmp->setSalary(Stringlist[1].trim().toDouble()); infile.close(); return newEmp; } 6.2 EmployeeReader e(\"employee.txt\"); Employee * newEmployee; newEmployee = e.read(); cout<<\"Name :\"<<newEmployee->getName()<<\"Salary : R\"<<newEmployee- >getSalary()<<endl;","libVersion":"0.2.3","langs":""}