{"path":"Subjects/COS2621 - Computer Organization/Unsorted/Cos2621/101_2019_3_b.pdf","text":"COS2621/101/3/2019 Tutorial Letter 101/3/2019 Computer Organization and Architecture COS 2621 Semesters 1 and 2 School of Computing This tutorial letter contains important information about your module. BARCODE 2 CONTENTS Page 1  INTRODUCTION ............................................................................................................................ 3  2  PURPOSE AND OUTCOMES ........................................................................................................ 4  2.1  Purpose .......................................................................................................................................... 4  2.2  Outcomes ....................................................................................................................................... 4  3  LECTURER(S) AND CONTACT DETAILS .................................................................................... 5  3.1  Lecturer(s) ...................................................................................................................................... 5  3.2  Department ..................................................................................................................................... 5  3.3  University ........................................................................................................................................ 5  4  RESOURCES ................................................................................................................................. 5  4.1  Prescribed book(s) .......................................................................................................................... 5  4.2  Recommended book(s) .................................................................................................................. 6  4.3  Electronic reserves (e-reserves) ..................................................................................................... 6  4.4  Library services and resources ....................................................................................................... 7  5  STUDENT SUPPORT SERVICES ................................................................................................. 7  6  STUDY PLAN ................................................................................................................................. 8  7  PRACTICAL WORK ....................................................................................................................... 9  8  ASSESSMENT ............................................................................................................................. 11  8.1  Assessment plan .......................................................................................................................... 11  8.2  Assignment numbers .................................................................................................................... 11  8.2.1  Unique assignment numbers ........................................................................................................ 11  8.3  Assignment due dates .................................................................................................................. 11  8.4  Submission of assignments .......................................................................................................... 12  8.5  The assignments .......................................................................................................................... 13  8.6   The examination ........................................................................................................................... 33  9  FREQUENTLY ASKED QUESTIONS .......................................................................................... 33  10  SOURCES CONSULTED ............................................................................................................. 34  11  IN CLOSING ................................................................................................................................. 34  COS2621/101/3/2019 3 Dear Student 1 INTRODUCTION We would like to welcome you as a student of COS2621. Students usually enjoy this module - especially those of you who like to experiment with new techniques. You will have plenty of opportunity to try something entirely new. Absolute answers to the design of computer architecture are seldom possible. The designs are influenced by many factors, for example the current state of technology and our own understanding of it, and historical factors. What we try to do in this module, is to emphasise important concepts so that you will understand the limits of current solutions and the possible reasons for the fact that it is not always possible to implement new trends immediately. This will enable you to understand and appreciate inevitable changes in future technology. There is a growing need for computer scientists to become involved in the design and implementation of user interfaces for embedded systems such as those found in cell phones, cars and tablets. To do this, we need to know what goes on at the lower levels of such systems. Most of the concepts of computer organisation only make sense once you see how they have been implemented on a specific machine and how they can be manipulated. You also need to know how the different components of the system communicate. For this purpose, we do some practical work in assembly language. This puts you on the assembly language level of the machine you are using. We do some revision of first-year work. This includes the basic principles of logic design (logic gates, combinational and sequential circuits), memory organisation, the central processing unit (CPU) and bus structures. Then we look at data representation and the representation of integers and floating-point numbers on a more formal basis. We also study arithmetic operations, operating system interrupts, addressing modes, subroutine calls in assembly language and the translation process. Since the different members of the Intel (x86) family of computers are widely used, we study its architecture as an example. The architectures of this family of microprocessors are very similar. For the purpose of this course, we will assume that the instruction sets are identical and restrict our register set to the basic architecture that is discussed in tutorial letter 102. The theoretical part of the syllabus for COS2621 is covered mainly in the prescribed book Computer Organization & Architecture by William Stallings. PLEASE: Do not wait until the week (or night!) before the first assignment is due before commencing your studies. Section 6 contains a study programme which you can use to plan your studies for this module for the academic semester. If you stick to this programme, the handing in of an assignment should never develop into a crisis. Information on tutorial offerings at Unisa Please be informed that, with effect from 2013, Unisa offers online tutorials (e-tutoring) to students registered for modules at NQF level 5 and 6, this means qualifying first year and second year modules. 4 Please communicate with your module leader to find out if any of the modules that you have registered for falls in this category. Once you have been registered for a qualifying module, you will be allocated to a group of students with whom you will be interacting during the tuition period as well as an e-tutor who will be your tutorial facilitator. Thereafter you will receive an sms informing you about your group, the name of your e-tutor and instructions on how to log onto MyUnisa in order to receive further information on the e-tutoring process. Online tutorials are conducted by qualified E-Tutors who are appointed by Unisa and are offered free of charge. All you need to be able to participate in e-tutoring is a computer with internet connection. If you live close to a Unisa regional Centre or a Telecentre contracted with Unisa, please feel free to visit any of these to access the internet. E-tutoring takes place on MyUnisa where you are expected to connect with other students in your allocated group. It is the role of the e-tutor to guide you through your study material during this interaction process. For you to get the most out of online tutoring, you need to participate in the online discussions that the e- tutor will be facilitating. There are modules which students have been found to repeatedly fail, these modules are allocated face- to-face tutors and tutorials for these modules take place at the Unisa regional centres. These tutorials are also offered free of charge, however, it is important for you to register at your nearest Unisa Regional Centre to secure attendance of these classes. 2 PURPOSE AND OUTCOMES 2.1 Purpose This module will be useful for providing qualified professionals with an introductory level understanding of computer organization and assembly language programming. We also look at some operating systems concepts. This will equip you with the knowledge and skills needed to analyse and evaluate the architecture of a specific family of computers and perform low-level programming tasks on it. 2.2 Outcomes 1. Identify the different hardware components that a computer system consists of, such as the CPU, memory, busses and I/O devices, and describe the important functions of each component. 2. Discuss how these components are interconnected and how communication takes place within a computer system. 3. Demonstrate different ways of data representation and also the way in which binary, integer and floating-point numbers are represented, and manipulated. 4. Describe principles of different memory systems, such as cache memory, internal memory and external memory 5. Evaluate the advantages and disadvantages of using different types of input and output devices. 6. Demonstrate processor structure and organisation, and use of a variety of arithmetic and logic operations, as well as addressing modes through programming in assembly language. 7. Discuss the principles of RISC computers. COS2621/101/3/2019 5 3 LECTURER(S) AND CONTACT DETAILS 3.1 Lecturer(s) An important first step for establishing contact with both the lecturer(s) and your fellow students (if you wish) is to register on myUnisa. Go to https://my.unisa.ac.za/portal/ You will be able to access all your study material plus additional resources on the COS2621 web site. You should also create a myLife email account to ensure that you receive all electronic correspondence from Unisa. This email account can be linked to your own personal email account so that you will receive important announcements. You will find the name(s) of the lecturer(s) plus the contact details for COS2621 for 2019 in the COSALL/302. It will also be provided in the welcome message on the myUnisa web page for this module. Please note that the College of Science, Engineering and Technology, which the School of Computing is part of, is based on the Florida Campus. Email: The preferred way to contact us is by using email. We try to respond within 24 hours. You can send email via the myUnisa web site. Discussion Forum: You can communicate with your fellow students via the discussion forum for COS2621 on myUnisa. Many students find this valuable for discussing mutual difficulties with the study material. The lecturer does not necessarily play an active part on the discussion forum. Additional Resources: A number of links to Open Educational Resources will be provided under Additional Resources. You might find these very helpful especially for mastering assembly language programming. Please refer to the COS2621 home page for a description of more support facilities available for this module. 3.2 Department This module is presented by the School of Computing. Contact details of the School through the department secretary: Mrs Helen Frank 0116709188 3.3 University Contact details of relevant administrative departments will be provided in a separate tutorial letter and can also be found in the brochure Study@Unisa. 4 RESOURCES 4.1 Prescribed book(s) The prescribed book for this module is: William Stallings. Computer Organization and Architecture, Designing for Performance Tenth edition. (Global Edition), Pearson, 2016. 6 Remember that the soft-cover version of the book is generally more affordable than the hard cover. You can also access the available student resources for the prescribed book by visiting: http://williamstallings.com/ComputerOrganization 4.2 Recommended book(s) The following books are good references for the practical work: Peter Abel. IBM PC Assembly Language and Programming, Fifth Edition. New Jersey: Prentice-Hall, 2001. Jeff Duntemann. Assembly Language Step-by-step: Programming with DOS and Linux, Second Edition. USA: John Wiley & Sons, 2000. The following book is useful for revision of first-year work. A. Clements. The Principles of Computer Hardware. Englewood Oxford: Oxford University Press, 1985. We also found the following books useful: David A. Patterson and John L. Hennessy. Computer Organization and Design: The hardware/software interface, Third Edition. Morgan Kaufmann, 2005. Andrew S. Tanenbaum. Structured Computer Organization, Fourth Edition. USA: Prentice-Hall, 1999. Carl Hamacher, Zvonko Vranesic & Safwat Zaky. Computer Organization, Fifth Edition. McGraw-Hill, 2002. John D. Carpinelli. Computer Systems: Organization & Architecture. USA: Addison Wesley Longman, 2001. Stephan D. Burd. Systems Architecture, Third Edition. Canada: Course Technology, Thompson Learning, 2001. Vincent P. Heuring and Harry F. Jordan. Computer Systems Design and Architecture. Addison Wesley Longman, 1997. Gerrit A. Blaauw and Frederick P. Brooks (Jr). Computer Architecture: Concepts and Evolution. Addison Wesley Longman, 1997. Joe Carthy. An Introduction to Assembly Language Programming and Computer Architecture. International Thomson Computer Press, 1996. Kip R. Irvine. Assembly Language for the IBM-PC. New York: Macmillan Publishing Company, 1993. Michael Thorne. Computer Organization and Assembly Language Programming. For IBM PCs and Compatibles, Second Edition. The Benjamin/Cummings Publishing Company, 1990. Please note that the library only has some of these books in stock and only limited waiting lists will be kept for these titles. Recommended books can be requested online, via the Library catalogue. 4.3 Electronic reserves (e-reserves) Several links to Open Educational Resources (OERs) are included to support students. Sometimes links to resources could provide problems of not opening or resources is sometimes moved after links have been uploaded. We do check links from time to time to make sure they are functional. If a link is broken, please inform e-tutor in order to get support. Links are mainly focussed on extra support on study material such as videos on difficult concepts. The following links are included to support students. COS2621/101/3/2019 7 https://www.youtube.com/watch?v=uca_zY8ZNpA&t=383s https://www.youtube.com/watch?v=o8S2JRneGoQ https://www.youtube.com/watch?v=hcg6wCUg5a4 https://www.youtube.com/watch?v=ViNnfoE56V8 E-reserves can be downloaded from the Library catalogue. More information is available at: http://libguides.unisa.ac.za/request/request 4.4 Library services and resources The Unisa Library offers a range of information services and resources:  for detailed Library information go to http://www.unisa.ac.za/sites/corporate/default/Library  for research support and services (e.g. personal librarians and literature search services) go to http://www.unisa.ac.za/sites/corporate/default/Library/Library- services/Research-support The Library has created numerous Library guides: http://libguides.unisa.ac.za Recommended guides:  request and download recommended material: http://libguides.unisa.ac.za/request/request  postgraduate information services: http://libguides.unisa.ac.za/request/postgrad  finding and using library resources and tools: http://libguides.unisa.ac.za/Research_skills  Frequently asked questions about the Library: http://libguides.unisa.ac.za/ask  Services to students living with disabilities: http://libguides.unisa.ac.za/disability Type here 5 STUDENT SUPPORT SERVICES The Study @ Unisa brochure is available on myUnisa: www.unisa.ac.za/brochures/studies This brochure has all the tips and information you need to succeed at distance learning and, specifically, at Unisa. Free Computer and Internet Access Unisa has entered into partnerships with establishments (referred to as Telecentres) in various locations across South Africa to enable you (as a Unisa student) free access to computers and the Internet. This access enables you to conduct the following academic related activities: registration; online submission of assignments; engaging in e-tutoring activities and signature courses; etc. Please note that any other activities outside of these are for your own costing e.g. printing, photocopying, etc. For more information on the Telecentre nearest to you, please visit www.unisa.ac.za/telecentres. 8 6 STUDY PLAN Use the Study@Unisa brochure for general time management and planning skills. Please note that we do not work through the chapters in the prescribed book in the order in which they are presented. We focus on specific chapters for each assignment so that you will have the required knowledge to complete the relevant assignment. COS2621 - Study Programme Period Study Material Assignment due date 1 st /2 nd semester Week 1 Guide 102: Unit 1 Stallings: Chapters 0, 1, 9 and 11 Week 2 Guide 102: Unit 2 Stallings: Chapter 2, Appendix B Weeks 3 & 4 Guide 102: Unit 3, Appendices A and B Stallings: Chapter 3 Do and submit Assignment 01 8 March / 16 August Week 5 Guide 102: Units 4, 5 and 6 Stallings: Chapters 14, 10 and 12 Guide 102: Appendix C (work through) Appendices A, B, D, E & F (use as references) Weeks 6 - 8 Guide 102: Units 7, 8 and 9 Stallings: Chapters 13, 4 and 5 Do Assignment 02, theoretical questions Week 9 Guide 102: Appendices A - F (use as references) Do Assignment 02, practical question Do and submit Assignment 02 12 April / 20 September Weeks 10 & 11 Guide 102: Units 10, 11 and 12 Stallings: Chapters 6, 7 and 15 Weeks 12 & 13 Revision COS2621/101/3/2019 9 Examination Starts … Please ensure that you allow enough time for possible postal delays if you submit by post. EXTENSION DATE  Please do not ask for an extension of the due date. The semester system does not allow any extra time for extensions. 7 PRACTICAL WORK When you register for this module, you will receive the NASM assembler on a CD-ROM. Load the file named index.html from the CD-ROM and click on the link to COS2621. You will be given clear directions for the installation of NASM on your own computer. Guidelines regarding the use of this assembler are given in appendix B of tutorial letter (Guide) 102. You must use NASM for the development of your programming assignments. However, if you have experience in assembly language programming and have access to one of the assemblers listed below, you may use that to develop your programming tasks. However, we cannot provide support for technical problems that you might experience with assemblers other than NASM. NASM 64bit download link: http://www.x64bitdownload.com/downloads/t-64-bit-nasm-download-vbepnjoq.html The following assemblers are also acceptable: - TASM (Turbo Assembler) or OPTASM (Optimized TASM) Available from: Software dealers. - MASM (Microsoft Macro Assembler) Available from: Software dealers. This assembler can also be downloaded from the web. Tutorial letter 102 contains the information needed for the practical component of the module. We will use NASM to write and assemble small assembly language programs. We will also use DEBUG (which is part of DOS within the Windows environment) as a debugging tool for tracing and testing assembly language programs. The study material for COS2621 supplied in Stallings and the tutorial letters should be sufficient to enable you to do the assembly language programming that we expect of you for this module. You must plan to SPEND A CONSIDERABLE AMOUNT of time at your computer experimenting with NASM and DEBUG. One has to experiment and try things out in order to gain a thorough grasp of the internal organisation of a computer. You cannot expect to obtain this knowledge only from reading the textbook and the tutorial letters. Note that you need to use a 32-bit version of Windows for DEBUG. DEBUG does not function on a 64 bit platform, there are 2 options that can be followed to get the program to execute correctly: 10 Link to download DEBUG if you do not have it installed: http://www.softpedia.com/get/Programming/Debuggers-Decompilers-Dissasemblers/DOS- Debug.shtml Just download from the webpage, it is called DEBUGX, but inside the zip file you will find DEBUG which runs inside DOSBOX, option 2 below. Option 1 Windows 7 64-bit: If you are using a 64-bit version of Windows, you can create a virtual machine with Windows XP by clicking on Virtual Machine listed under All programs on the 64-bit version of Windows 7. Another alternative is to download and install VirtualPC from Microsoft. You can also download and install a free 32-bit Windows XP image from Microsoft. Use the following link: http://www.microsoft.com/en-za/download/details.aspx?id=8002 Instructions are also provided to install this Windows XP mode. Windows 64 bit platforms have the ability to run programs that are 32 bit. In order to select this option you must right click on the program and select properties. Then look for a compatibility tab. On the tab you will see an option to run the program in compatibility mode for a previous Windows platform. See if a 32 bit version is available in the list. If it is, try to run the 32 bit version of DEBUG in that environment. If this is not working then either download the virtual machine option 1 or try the easier option 2 by using a DosBox. Option 2 The windows XP environment in option1 is not needed if you just use a DosBox. This creates an emulator that runs older programs. DEBUG works by using DosBox. https://sourceforge.net/projects/dosbox/files/latest/download?source=typ_redirect Please read the intro of DosBox, the main thing to remember is to mount your drive you need to work with. DosBox will typically start in drive Z:/> From there you need to mount the drive where DEBUG is installed on, e.g. C:/> e.g. When running DosBox in Z:\\ type the following commands, DO NOT TYPE THE STRINGS IN BRACKETS THOSE ARE NORMAL ENTER COMMANDS FROM THE KEYBOARD: mount c c:\\ (press enter) c: (press enter) cd Debug (press enter, please note Debug is a directory name, type in the directory name where you installed Debug into) C:\\Debug Now you are in Debug and you can use it to debug your assembly program. Section 4.3 contains links for support on NASM usage. COS2621/101/3/2019 11 PLEASE NOTE, YOU NEED TO EITHER HAVE OPTION 1 OR 2 TO RUN YOUR PROGRAMS AND DEBUG AS THEY ARE BOTH 16 BIT BASED. OPTION 2 IS FASTER AS THE PROGRAMS ARE SMALL TO INSTALL AND RECOMMENDED TO WORK WITH. DOSBOX IS AN EMULATOR THAT WILL RUN YOUR COMPILED ASSMBLER FILE WHICH WAS BUILT WITH NASM (THE COMPILER), IF YOU WANT TO SEE WHAT HAPPENS INSIDE THE FILE DURING EXECUTION YOU THEN RUN DEBUG ALSO IN THE DOSBOX. 8 ASSESSMENT 8.1 Assessment plan Assignment Due date Year-mark weight Assignment 01 8 March 2019 (sem 1) 16 August 2019 (sem 2) 30 Assignment 02 12 April 2019 (sem 1) 20 September 2019 (sem 2) 70 8.2 Assignment numbers 8.2.1 Unique assignment numbers Semester 1: Assignment 01: 725034 Assignment 02: 610787 Semester 2: Assignment 01: 704411 Assignment 02: 787798 8.3 Assignment due dates Semester 1 Assignment 01: 8 March 2019 Assignment 02: 12 April 2019 12 Semester 2: Assignment 01: 16 August 2019 Assignment 02: 20 September 2019 8.4 Submission of assignments Consult your Study@Unisa brochure regarding the electronic submission of assignments. N.B.: Due to regulatory requirements imposed by the Department of National Education the following apply for this academic year (2019). To gain admission to the examination you need to submit Assignment 01. Important: We encourage the forming of study groups, which should ideally consist of only 2 or 3 students, because we realise how difficult it is to study in isolation. Since we are a distance-education institution, our assessment programme does not make provision for group work. However, from time to time we get incidents where students actually submit assignments that can be considered a group effort. We believe that this does not benefit all the members of the study group and should be avoided at all costs. For this reason, please note that you will be penalised severely for submitting assignments that are so similar that they cannot be considered individual work. COS2621/101/3/2019 13 8.5 The assignments Assignment 01 – Semester 1 ASSIGNMENT 01 (SEMESTER 1) DUE DATE: 8 March 2019 SUBMISSION PROCEDURE Mark-reading sheet / myUnisa WEIGHT: 30 UNIQUE NUMBER: 725034 STUDY MATERIAL: Tutorial Letter 102: Units 1, 2 & 3 Appendices A & B Appendices D, E & F (Use as references) Stallings: Chapters 0, 1, 2, 3, 9, 11 and Appendix B Use NASM for the development of your programs. We also expect you to learn how to use DEBUG provided with DOS within the Windows environment. It is quite a useful tool and we strongly urge you to master its use as soon as possible. An understanding of the internal registers of the Pentium as discussed in the tutorial letters, and the use of DEBUG is essential if you want to master this module. Submit the assignment on a mark-reading sheet. PLEASE BEAR THE FOLLOWING IN MIND WHEN YOU DO THE ASSIGNMENT:  Questions 2 to 5 of this assignment will not be marked. Please evaluate your answers using the guidelines that will be sent out in Tutorial Letter 201.  Important: This assignment serves as preparation for Assignment 02. You will have difficulty with the programming question in Assignment 02 if you do not submit Assignment 01 and do not understand the exercises.  Submit your mark-reading sheet (Q1) to Unisa. 14 Mark-reading part of the assignment - submit Q1.1 to Q1.10 1.1 What is the result of the following hexadecimal calculation? FB + CA (1) C5 (2) 1A5 (3) 1D6 (4) 1C5 (5) None of the above 1.2 Simplify ABC′ + (AB′)′ + BC by using Boolean identities. (1) A′ + B (2) A′ + B + C′ (3) A′ + BC′ (4) A′ (5) A′ + ABC′ + B 1.3 Which of the following are language processors? (1) C++ (2) Assembler (3) Compiler (4) Interpreter (5) All of the above 1.4 ------------------- controls the operation of the computer and performs its data processing functions. (1) Main memory (2) Control memory (3) Processor (4) Control unit (5) Register COS2621/101/3/2019 15 1.5 What is the hexadecimal representation of the binary value 01001110? (1) 27h (2) 2F (3) 4C (4) 4E (5) None of the above. 1.6 -------------------------- permits addresses to be computed in the ALU and then inserted into instructions stored in memory. (1) Address modify (2) Address memory (3) I/O instructions (4) Program counter (5) Address register 1.7 Provide the machine code instruction for mov dx, mess in question 5. (1) CD21 (2) 8A1E1601 (3) BA1701 (4) BA0117 (5) None of the above. 1.8 ---------------- occurs if two or more processes are sharing a dynamic-link library module but expect different versions of the module. (1) Run-time dynamic linking (2) Relocatable loading (3) DLL hell (4) Dynamic linker (5) DLL shell. 16 1.9 What is the meaning of this Assembly Language code: MOV [K2], S? (1) copy bits at K2 into S (2) copy byte at K2 into S (3) copy contents of K2 into S (4) copy contents of S into byte at K2 (5) store address of S into byte at K2 1.10 A single two pass assembler does which of the following in the first pass (1) It allocates space for the literals (2) It computes the total length of the program (3) It builds the symbol table for the symbols and their values (4) all of the above (5) It adds the instruction operand field empty in the assembled binary instruction. Self-evaluation: written part of the assignment (do not submit) Question 2 a) Why is it important for a Computer Scientist to study computer organisation? b) Explain the following terms in relation to microprocessor speed: (i) Branch prediction (ii) Data flow analysis (iii) Speculative execution (iv) Pipelining Question 3 a) Briefly describe the concept of multicore processors. b) What does the term embedded systems mean? Question 4 Simplify the following expression using Boolean algebra. At every step, identify the Boolean identity that is used: ABC′ + ABCD + B′C + AB COS2621/101/3/2019 17 Question 5 In this question we expect you to enter a small assembly language program using a text editor, and to assemble the program. NASM must be used to assemble the program and DEBUG must be used to test the program. DEBUG has facilities that allow you to step through the program, executing one instruction at a time. After each instruction you are able to see the contents of all the registers and the status of the flags. You can also inspect the contents of memory at any given point. Before you attempt this question, work through the following two appendices: Appendix A: The DOS DEBUG utility, Appendix B: NASM - ‘The Netwide Assembler’. Use Sections 1 to 9 as reference. Work through the practical examples in Sections B10 and B11. Once you feel that you understand the study material covered in Appendices A and B of Study Guide 101, enter the following program using a text editor. Follow the directions in Sections B10 and B11 of Appendix B to enter and store the program. Store it with the name as1_q.asm in the folder unisa\\nasm or in the folder of your choice. (It is easier if your programs and the NASM assembler are in the same folder.) ; The program must be keyed in exactly as is given here. bits 16 org 0x100 begin: mov al,[a] mov bl,[b] sub al,bl test_: jg disp ret disp: mov ah,09 mov dx,mess int 21h int 20h 18 a: db 20 b: db 10 mess: db 'A greater than B',10,13,'$' Open the DOS window, make sure that you are in the unisa\\nasm folder, and type as as1_q to assemble the program. Correct syntax errors (if any) and assemble again. Answer the following questions when your program has assembled successfully. Note that you have to use an h to indicate that a number is in hexadecimal. For example: there is a big difference between 100 and 100h. (a) Load the program by entering: debug as1-q.com (b) ‘Unassemble’ the object code by entering: u 100 130 (c) Why did we use test_ for a label name instead of just test without the underscore? (d) Which ASCII character is stored in memory position 120h? (e) What are the actual memory positions that are associated with the labels test_ and disp respectively? (f) Where do the instructions that follow the ‘$’ symbol at the end of the string mess in the ‘unassembly’ come from? (g) Which byte(s) is/are occupied by the mov bl, [b] instruction? (h) Which are the first and last memory positions respectively occupied by the program? (i) What is the length of the program? (j) What is the hexadecimal representation of the machine code for the instruction sub al, bl? (k) What ASCII character will be moved into DL if the mov dl,37 instruction is executed? Use the T-option of DEBUG to trace the program. Remember to use the P-option to trace the INT instructions. Use the trace to answer the following questions: (l) What is the value of IP before execution of the jg disp instruction? (m) What are the values stored in AL and BL respectively just before the sub instruction is executed? HOW TO OBTAIN A PRINT-OUT OF THE TEXT ON THE SCREEN WITHIN A DOS WINDOW There are various ways to obtain a print-out of the DEBUG output in the DOS window. You might find the following method COS2621/101/3/2019 19 handy for various applications: To print text from a DOS screen - Windows XP: T o get your D O S window from full-screen m ode to window m od e, you can do the following: • C lick on Start, then on P rograms, then on Accessories. • N ow move to C ommand prompt and R IG H T -click. C lick on P roperties, then click on O ptions. • A t Edit O ptions, mark Q uick edit mode, and at D isplay options, mark W ind ow. Click on O K . Exit. W hen you want to pr int text fr om the D OS window: • M ove to the blue bar at the top of the screen and R IG H T -click. A dro p-down m enu appears. M ove to E dit, and another m enu appears. Click on M ark. Select the output with the mouse, i.e. highlight it. • A gain m ove to the blue bar at the top of the screen and R IG H T -click. A dro p-down menu appears. M ove to E dit, and another m enu appears. Click on C opy. B y doing this the selected text is copied to the clipboard . Exit. • N ow op en a document in the text processor you are using. Click on E dit and then on Paste. T he output that was copied to the clipb oard will be pasted into your document and can be printed from there. 20 Assignment 02 – Semester 1 ASSIGNMENT 02 (SEMESTER 1) DUE DATE: 12 April 2019 SUBMISSION PROCEDURE: Written answers and a written program UNIQUE NUMBER: 610787 WEIGHT: 70 STUDY MATERIAL: Guide 102: Units 7, 8 & 9 Appendices A - F (Use as references) Stallings: Chapters 4, 5 & 13 Submit written answers for all questions. Question 1 (a) The following table reflects the memory contents of a part of memory in a one- address machine with an accumulator: [8] Address Contents 300 320 305 310 310 310 315 325 320 305 325 300 COS2621/101/3/2019 21 What values do the following instructions load into the accumulator? LOAD IMMEDIATE 300 LOAD DIRECT 320 LOAD INDIRECT 325 (b) Give examples of x86 instructions in which the following addressing modes are used: [12] Immediate addressing Direct addressing Stack addressing Indexed addressing Base-addressing Register indirect addressing Question2 [50] Assembly language programming: Write a program in assembly language to read a number entered by the user. The program should display an enlarged version of a given number on the screen. The program should do the following: Clear the screen and change the screen colour to yellow on blue. Change the cursor position to row 10, column 0. Prompt the user to key in an upper case letter (A - E). Read the letter from the keyboard. Test whether the number is in range (A…, E). Display an error message if the letter is out of range and terminate the program. Display an enlarged version of the letter on the screen. Example: If the user enters B, the following pattern is displayed: Enlarged letter Bit pattern Hex number Line number 22 $$$$ 11110 1E 1 $ $ 10001 11 2 $ $ 10001 11 3 $$$$ 11110 1E 4 $ $ 10001 11 5 $ $ 10001 11 6 $$$$ 11110 1E 7 Define a bit pattern for each letter and use this pattern to display the individual lines: For eample: For the letter ‘B’ displayed above you should define a string of 7 hex numbers, one hex number for each line. To display the first line, step through the bit pattern, displaying a space if the bit is equal to zero and displaying a ‘$’ otherwise. Write a carriage return and line feed to the screen and move to the pattern for the next line. Display all 7 lines of the enlarged number. Terminate the program. The first line in your program should be a comment line in which your student number and name are stated. NB: You need to submit three screen shots of different test runs performed. Marks will be allocated for the following: Clearing the screen, changing the screen colour and setting the cursor position Displaying the user prompt Reading the letter (ASCII character) Testing the range and displaying an error message if the letter is out of range Definition of bit patterns Displaying the lines corresponding to the bit pattern of the letter entered A program listing submitted Three screen shots of test cases submitted The program structure The program documentation (comments) END OF FIRST SEMESTER ASSIGNMENTS ********************************************************************************************************* COS2621/101/3/2019 23 Assignment 01 – Semester 2 ASSIGNMENT 01 (SEMESTER 2) DUE DATE: 16 August 2019 SUBMISSION PROCEDURE Mark-reading sheet / myUnisa WEIGHT: 30 UNIQUE NUMBER: 704411 STUDY MATERIAL: Tutorial Letter 102: Units 1, 2 & 3 Appendices A & B Appendices D, E & F (Use as references) Stallings: Chapters 0, 1, 2, 3, 9, 11 and Appendix B Use NASM for the development of your programs. We also expect you to learn how to use DEBUG provided with DOS within the Windows environment. It is quite a useful tool and we strongly urge you to master its use as soon as possible. An understanding of the internal registers of the Pentium as discussed in the tutorial letters, and the use of DEBUG is essential if you want to master this module. Submit the assignment on a mark-reading sheet. PLEASE BEAR THE FOLLOWING IN MIND WHEN YOU DO THE ASSIGNMENT:  Questions 2 to 5 of this assignment will not be marked. Please evaluate your answers using the guidelines that will be sent out in Tutorial Letter 201.  Important: This assignment serves as preparation for Assignment 02. You will have difficulty with the programming question in Assignment 02 if you do not submit Assignment 01 and do not understand the exercises.  Submit your mark-reading sheet (Q1) to Unisa. Mark-reading part of the assignment - submit Q1.1 to Q1.10 24 Question 1 (Submit on mark-reading sheet) [30] 1.1 What is the maximum number of memory locations that can be addressed by a chip with 16 address pins? (1) 16 (2) 65535 (3) 22 (4) 1024 (5) 65536 1.2 A memory has 1024 storage units with a width of 64. Suppose the memory is byte addressable. What is the address of the highest addressable memory position? (1) 1023 (2) 1024 (3) 8192 (4) 8191 (5) None of the above 1.3 What is the answer to question 7(k) below? (Refer to the ASCII table, tutorial letter 102.) (1) 40 (2) ) (3) % (4) u (5) None of the above. 1.4 Calculate: (C8)16 - (9A)16 (1) 28h (2) 46 (decimal) (3) 2Eh (4) 2Fh (5) None of the above. 1.5 What is the answer to question 7(i) below? (1) 29h (2) 22h (3) 42 (decimal) (4) 39 (decimal) (5) None of the above. COS2621/101/3/2019 25 1.6 What is the answer to question 7(d) below? (1) A (2) O (3) Space (4) C (5) None of the above. 1.7 What is the answer to question 7(e) below? (1) Labels do not take up memory space, therefore no addresses are associated with these labels. (2) 00h and 12h (3) 100h and 112h (4) 100h and 10Fh (5) 00h and 14h 1.8 What is the answer to question 7(h) below? (1) 100h and 121h (2) 100h and 127h (3) 00 and 27 (decimal) (4) 0100h and 011Fh (5) None of the above. 1.9 What will the carry flag (CF), the overflow flag (OF), the sign flag (SF) and the zero flag (ZF) be set to if the following arithmetic is done in an 8-bit register? FE + FB (1) CF=1, OF=1, SF=1, ZF=0 (2) CF=1, OF=1, SF=0, ZF=0 (3) CF=0, OF=0, SF=1, ZF=1 (4) CF=1, OF=0, SF=1, ZF=0 (5) None of the above. 1.10 Which one of the following will be flagged by DEBUG as an error? (1) SUB BL, AL (2) DB 23H (3) MOV AH,56 (4) ADD AH,AL (5) DB 45 26 Self-evaluation - written part of the assignment (do not submit) Question 2 (a) Why is it important for a computer scientist to be familiar with assembly language programming? (b) List and briefly describe the main structural components of a processor. Question 3 (a) What are the key concepts on which the Von Neumann architecture is based? (b) Explain the consequences of Moore’s law. Question 4 (a) List and briefly define two approaches to dealing with multiple interrupts. (b) List and describe the most common classes of interrupt. Question 5 Simplify the following expression using Boolean algebra. At every step, identify the Boolean identity that is used. (AB′C + BC′)′ + AB + (BC + AB)′ Question 6 (a) Convert the following decimal number to binary: (123.75)10 (b) Convert the following binary number to decimal: (101111.001)2 (c) Convert the following decimal number to hexadecimal: (243.8)10 (d) Convert the following binary number to hexadecimal: (101110101110.001)2 Question 7 In this question we expect you to enter a small assembly language program using a text editor, and to assemble the program. NASM must be used to assemble the program and DEBUG must be used to test the program. DEBUG has facilities that allow you to step through the program, executing one instruction at a time. After each instruction you are able to see the contents of all the registers and the status of the flags. You can also inspect the contents of memory at any given point. Before you attempt this question, work through the following two appendices in tutorial letter 102: COS2621/101/3/2019 27 Appendix A: The DOS DEBUG utility, Appendix B: NASM - ‘The Netwide Assembler’. Use sections 1 to 9 as reference. Work through the practical examples in sections B10 and B11. Once you feel that you understand the study material covered in appendices A and B of tutorial letter 102, enter the following program using a text editor such as Notepad. Follow the directions in sections B10 and B11 of appendix B (tutorial letter 102) to enter and store the program. Store it with the name a1.asm in the folder unisa\\nasm. (Your program and the NASM assembler should be in the same folder.) ; The program must be keyed in exactly as is given here. ; You will lose marks unnecessarily if you change the assembly language code. bits 16 org 0x100 start: mov bx,1234h shl bx,01 test_: mov ah,02 mov dl, [char+9] jnz display mov dl,25h display: int 21h stop: int 20h char: db 'SAVE OUR RHINOS' ;The end Open the DOS window, make sure that you are in the unisa\\nasm folder, and type as a1 to assemble the program. Correct syntax errors (if any) and assemble again. Answer the following questions when your program has assembled successfully. Note that you have to use an h to indicate that a number is in hexadecimal. For example: there is a big difference between 100 and 100h. 28 (a) Create a listing of the, LST file generated by NASM. (b) Load the program by entering debug a1.com ‘Unassemble’ the object code by entering u 100 125 (c) Why did we use test_ for the label instead of just test without the underscore? (d) Which ASCII character is stored in memory position 114h? (e) What are the actual memory positions that are associated with the labels start and display respectively? (Refer to the ‘unassembly’) (f) Where do the instructions that follow the string ‘SAVE OUR RHINOS’ in the ‘unassembly’ come from? (g) The mov bx,1234h instruction occupy(ies) which byte(s)? (Refer to the ‘unassembly’) (h) Which are the first and last memory positions occupied by the program? (Refer to the ‘unassembly’) (i) What is the length of the program? (Refer to the, lst listing.) (j) What is the hexadecimal representation of the machine code for the following instruction? (Refer to the ‘unassembly’) jnz display (k) What ASCII character will be moved into DL if the mov dl,25h instruction is executed? Use the T-option of DEBUG to trace the program. Remember to use the P-option to trace the INT instructions! Use the trace to answer the following questions: (l) What is the value of IP before the execution of the jnz instruction? COS2621/101/3/2019 29 (m) What is displayed by the program? HOW TO OBTAIN A PRINT-OUT OF THE TEXT ON THE SCREEN WITHIN A DOS WINDOW There are various ways to obtain a print-out of the DEBUG output in the DOS window. You might find the following method handy for various applications: To print text from a DOS screen - Windows XP: T o get your D O S window from full-screen m ode to window m od e, you can do the following: • C lick on Start, then on P rograms, then on Accessories. • N ow move to C ommand prompt and R IG H T -click. C lick on P roperties, then click on O ptions. • A t Edit O ptions, mark Q uick edit mode, and at D isplay options, mark W ind ow. Click on O K . Exit. W hen you want to pr int text fr om the D OS window: • M ove to the blue bar at the top of the screen and R IG H T -click. A dro p-down m enu appears. M ove to E dit, and another m enu appears. Click on M ark. Select the output with the mouse, i.e. highlight it. • A gain m ove to the blue bar at the top of the screen and R IG H T -click. A dro p-down menu appears. M ove to E dit, and another m enu appears. Click on C opy. B y doing this the selected text is copied to the clipboard . Exit. • N ow op en a document in the text processor you are using. Click on E dit and then on Paste. T he output that was copied to the clipb oard will be pasted into your document and can be printed from there. 30 Assignment 02 – Semester 2 ASSIGNMENT 02 (SEMESTER 2) DUE DATE: 20 September 2019 SUBMISSION PROCEDURE: Written answers and a written program UNIQUE NUMBER: 787798 WEIGHT: 70 STUDY MATERIAL: Guide 102: Units 7, 8 & 9 Appendices A - F (Use as references) Stallings: Chapters 4, 5 & 13 Submit written answers for all questions. Question 1 [9] (a) The following table reflects the memory contents of a part of memory in a one- address machine with an accumulator: Address Contents 00 20 20 30 30 40 40 50 50 60 60 70 What values do the following instructions load into the accumulator? LOAD IMMEDIATE 20 LOAD DIRECT 20 LOAD INDIRECT 20 COS2621/101/3/2019 31 (b) Give examples of Intel x86 instructions in which the following addressing modes are used: Immediate addressing Direct addressing Stack addressing Indexed addressing Base-addressing Register indirect addressing Question 2 [6] (a) Briefly discuss the concepts of (i) error correcting-codes and (ii) error-detecting codes. (b) What is the distinction between spatial locality and temporal locality? (c) Briefly describe the cache organisation of the Pentium 4. Question 3 [5] (a) Explain why one type of RAM is considered to be analog and the other digital. (b) What are the key properties of semiconductor memories? (c) What is a parity bit? Question 4 [50] Design a program in assembly language to read a number entered by the user. The program should calculate the value of (number mod 7) and display the result on the screen. The first line in your program should be a comment line in which your student number and name are stated. The program should do the following: Clear the screen and change the screen colour to yellow on blue. Change the cursor position to row 5, column 0. Prompt the user to key in the number (1 - 9). Read the number from the keyboard. Convert the number to a numeric value and store in memory. Test whether the number is in the valid range 1 - 9. Display ‘**’ next to the number if the number is out of range and read it again. Divide the number by 7 to get the value of (number mod 7). Remember the answer is equal to the remainder if the number is divided by 7. Convert the remainder to an ASCII character and display on the screen. Terminate the program. 32 The following is an example of what the program should do. The user input is displayed in italics, i.e. 9 below. Please enter the number you select: 9 The result is = 2. Marks will be allocated as follows: Clearing the screen and changing the screen colour Changing the cursor position Displaying the user prompt Reading the number (ASCII character) Converting the number to a numeric value Testing the range and displaying an error message if the number is invalid Calculation A program listing submitted as part of written part Three screen shots of test cases submitted The program structure The program documentation (comments) COS2621/101/3/2019 33 8.6 The examination Your final semester mark is calculated based on your performance on assignments throughout the semester as well as your examination mark. Therefore, assignments not only give you the opportunity to evaluate your understanding of the study material covered in the module, but also contribute 20% towards your final semester mark. The following formula will be used to calculate your final semester mark: Semester mark (out of 100) × 0.20 + Examination mark (out of 100) × 0.80. The table below illustrates how the assessment system works if you have submitted all the assignments for the module and written the final exam. Note: Assignment 1 and 2 contribute towards your semester mark. You will not be awarded marks if an assignment is not submitted or submitted after the due date. Assignment 1 2 Weight 30/100 70/100 Semester Mark Contribution 100% × 0.30 100% × 0.70 Suppose you received a mark of 50% for Assignment 01 and 40% for Assignment 02. Your semester mark will be calculated as 50 × 0.3 + 40 × 0.7 = 15 + 28 = 43 Suppose your exam mark is 70%. Your final mark will be: 0.2 × 43 + 70 × 0.8 = 8.6 + 56.0 = 64.6% which will be rounded to 65%. Please note that the year mark will not be taken into account if your exam mark is below 40%. It is also not taken into account if you are writing a supplementary examination. 9 FREQUENTLY ASKED QUESTIONS How do I obtain a print-out of the text on the screen within a DOS window? There are various ways to obtain a print-out of the DEBUG output in the DOS window. You might find the following method handy for various applications: To print text from a DOS screen - Windows XP, 7: To get your DOS window from full-screen mode to window mode, you can do the following: • Click on Start, then on Programs, then on Accessories. • Now move to Command prompt and RIGHT-click. Click on Properties, then click on 34 Options. • At Edit Options, mark Quick edit mode, and at Display options, mark Window. Click on OK. Exit. When you want to print text from the DOS window: • Move to the blue bar at the top of the screen and RIGHT-click. A drop-down menu appears. Move to Edit, and another menu appears. Click on Mark. Select the output with the mouse, i.e. highlight it. • Again move to the blue bar at the top of the screen and RIGHT-click. A drop-down menu appears. Move to Edit, and another menu appears. Click on Copy. By doing this the selected text is copied to the clipboard. Exit. • Now open a document in the text processor you are using. Click on Edit and then on Paste. The output that was copied to the clipboard will be pasted into your document and can be printed from there. How do I obtain a screen shot? The easiest way: Open a blank MS Word document. Run the program for which you want to obtain a screen dump. Press Shift + PrtScn. Go back to your Word document and press Ctrl + V. The relevant screen will be copied to the Word document. You can copy and paste it from this document to your assignment. Where can I get NASM or DEBUG or DOSBOX, see links and explanations under section Practical Work. Care is taken to check that links are working and active at time of print, but if links do not work anymore, do a Google search for NASM, DOSBOX or DEBUG downloads and you should be able to find alternative download sources without a problem. 10 SOURCES CONSULTED Both the prescribed book and the recommended book were consulted in drafting this tutorial letter. 11 IN CLOSING Any additional information that may become relevant during the year will be published and announced on myUnisa. I hope you will enjoy this module and find the content useful. Lecturer: Dr. Wernher Friedrich Email address: friedw@unisa.ac.za © Unisa 2019","libVersion":"0.2.3","langs":""}