{"path":"UNISA/98906 - BSc Science in Computing/COS3711 - Advanced Programming/Unsorted/SORT/COS3711 2020 TL104.pdf","text":"COS3711/104/2020 Tutorial letter 104/2020 Advanced Programming COS3711 Semesters 1 & 2 School of Computing Networking 2 CONTENTS Page 1  INTRODUCTION ............................................................................................................................ 3  2  NETWORKING CONCEPTS .......................................................................................................... 3  2.1  Protocols ......................................................................................................................................... 3  2.2  QUrl ............................................................................................................................................... 3  2.3  Accessing sockets .......................................................................................................................... 3  2.4   Further reading ............................................................................................................................... 4  2.5  Further notes .................................................................................................................................. 5  3  UDP CHAT ..................................................................................................................................... 5  4  USING TCP .................................................................................................................................... 7  5  CONCLUSION ................................................................................................................................ 7  COS3711/104/2020 3 1 INTRODUCTION Dear student This guide covers some basic networking concepts and a practice programming example using networked programming. If you would like to read up more on these topics, have a look at the online books that are available through the Unisa library.  Go to oasis.unisa.ac.za  Click on Library Links  Search for Information Resources.  Accept the Terms and conditions.  Click on Publishers  S  Safari Books Online  Safari Business and Tech Books Online.  In the search box at the top right of the page, search the entire site for “Qt” or whatever the topic is that you are looking for information.  You can then click on a book’s title, which should take you to the Table of Contents for that book. From here you can click on the chapter you want to read. 2 NETWORKING CONCEPTS 2.1 Protocols Browsing the web uses the HTTP protocol (hypertext transfer protocol), and it may be encrypted as https. HTTP is built on top of TCP (transmission control protocol), which in turn is built on top of IP (internet protocol). Other protocols, such as FTP, SMTP, POP, and IMAP are also built on top of TCP/IP. 2.2 QUrl The QUrl class can be used to split a URL into its parts. See Figure 1 (adapted from the Qt Assistant) to see the various parts of the URL. 2.3 Accessing sockets Qt supports accessing TCP and UDP directly at socket level. See Table 1 for a comparison of TCP and UDP sockets. TCP Sockets UDP Sockets Guaranteed in-order delivery Fire and forget Point-to-point only Point-to-point or broadcasts Great when correct delivery is important Great when time is more important than delivery Table 1 Comparison of TCP and UDP sockets There are two TCP classes in Qt:  QTcpSocket – representing a socket  QTcpServer – representing a server, listening for incoming connections, generating QTcpSocket instances for each connection 4 However, TCP/IP traffic is easy to overhear. Qt thus provides QSslSocket to use encrypted TCP sockets (using connectToHostEncrypted). SSL (secure sockets layer) is a layer on top of TCP which relies on certificate authorities. The QUdpSocket provides a UDP (user datagram protocol) socket that is usable for both clients and servers. Datagrams are sent as one block, and the following should be borne in mind.  512 bytes is okay, 8192 bytes usually work, larger might be possible  Can arrive or not  Can arrive out of order  Can arrive in duplicates ftp://ftp.qt.nokia.com:2021 http://qt-project.org/d ownloads#qt-other http://qt . nokia.com/products/ qt-for-mobile-platf orms ftp://per son:Q 3 dfr4_$5@ ftp.qt.nokia.com:2021 Figure 1 QUrl functions to access a URL 2.4 Further reading You should also read through the section on Networking and Connectivity in the Qt Reference Documentation in the Qt Assistant (see Figure 2). scheme host port fragment path userName password userInfo COS3711/104/2020 5 Figure 2 Finding Network Programming 2.5 Further notes All Qt classes used for networking are a part of the QtNetwork module. You need to include the module in your build process by telling qmake that you are using it (add the line QT += network to your project file). 3 UDP CHAT For this exercise you will use UDP datagrams over IP directly. Use the udpchat project as the starting point. These files can be downloaded from myUnisa (in the Networking folder in UpdatedSourceFiles.zip, under Additional Resources). The application provides a chat program user interface and the functions needed to implement a simple network chat system. The goal for this step is to add the UDP networking functions needed to transmit and receive messages. 6 Figure 3 The utp chat program Start by implementing the startNetworking() function. In it create a UDP socket and store the pointer to the socket in the socket member variable. Then bind it to the given port and the broadcast host address. Make sure to pass the QUdpSocket::ShareAddress bind mode flag when binding the socket, so that you can run another copy of your program on the same machine for testing purposes. Use the following to bind the socket. socket->bind(QHostAddress::Broadcast, socketPort, QUdpSocket::DefaultForPlatform); You may find that this does not work, so you can try one of the other overloaded versions of the bind call to achieve the binding. socket->bind(socketPort, QUdpSocket::ShareAddress); Having created the socket, connect the readyRead signal of the socket to the processPendingDatagrams slot to receive notifications whenever a new datagram arrives. The function should now contain the following. void UDPChat::startNetworking(int port) { socketPort = port; socket = new QUdpSocket(); socket->bind(QHostAddress::Broadcast, socketPort, QUdpSocket::DefaultForPlatform); //socket->bind(socketPort, QUdpSocket::ShareAddress); //one of the bind calls connect(socket, SIGNAL(readyRead()), this, SLOT(processPendingDatagrams())); } In the processPendingDatagrams slot, use the following code to read the next datagram into a buffer. QByteArray buffer; buffer.resize(socket->pendingDatagramSize()); socket->readDatagram(buffer.data(), buffer.size()); Now use the provided decodeMessage function to convert the buffer contents into a pair of strings that carry the nickname of the sender and the message body. QPair<QString,QString> msg = decodeMessage(buffer); Pass these onto the provded showMessage function with appropriate parameters as shown below to have the message displayed in the window. showMessage(msg.first, msg.second); Finally implement the sendMessage() slot. Use the provided encodeMessage function to convert the (nick, message) pair into an opaque byte array and broadcast the message through the socket using the writeDatagram function. Broadcast to all on the network by providing the host address QHostAddress::Broadcast. QByteArray msg = encodeMessage(nick->text(), message->text()); socket->writeDatagram(msg, QHostAddress::Broadcast, socketPort); COS3711/104/2020 7 You should now be able to run two chat programs and communicate from one to the other. Note that you may find that only the one chat window will pick up messages from the port and display them although both chat windows can send messages. Tip: You might have to open your firewall to be able to broadcast to port 34567 (or whichever port number you are using if not using the default port number) in your local network. Notice that you need to open UDP port 34567, not the TCP port with the same number. 4 USING TCP Work through the Fortune server and client examples in the Qt Assistant. To access these, open the Assistant, go to the Index tab, and type “fortune” into the search box. Click on Fortune Server Example, and once you have worked through this, you will find a link near the top of the example to the Fortune Client Example. To create the project for each of these (they must be two separate projects), create a new project, and choose Qt Widgets Application. The only line you really need in the .pro file is QT += network as the other entries (for headers and sources) will be added automatically. You can then copy the code for the class and main files from the Assistant example and paste it into files that you create in the project. However, you can also copy the files from examples provided with Qt (navigate to the location of your Qt installation, find the Examples folder, and look for network\\fortuneserver network\\fortuneclient in the folder of the Qt version you are using). Note that you should run the server before starting the client, and that you may need to grant it access through the firewall. You can see a running version in Figure 4. When you run the server and client, they will have the same server name/IP address, and the server will indicate a port number. You can change the server name of the client if you want to (as has been done in the example in Figure 4 – it would only work using the localhost address – as the server listens on all addresses), but make sure that you type the same port number from the server into the client window before you click Get Fortune. Figure 4 Fortune client and server 5 CONCLUSION This tutorial letter is meant as a basic guide to network programming and a pointer to where you can find more information about the topic. It is by no means exhaustive, and you will only be expected to know the general processes involved rather than all the intricate details. © UNISA 2020","libVersion":"0.2.3","langs":""}