{"path":"UNISA/98906 - BSc Science in Computing/INF3707 - Database Design and Implementation/Unsorted/INF 3707/Additional/INF3707-oracle-database-10g-sql-fundamentals-1-student-guide-volume-1_-_aug_2004_d17108gc11.pdf","text":"Oracle Database 10g: SQL Fundamentals I Volume I • Student Guide D17108GC11 Edition 1.1 August 2004 D39766 ® Copyright © 2004, Oracle. All rights reserved. This documentation contains proprietary information of Oracle Corporation. It is provided under a license agreement containing restrictions on use and disclosure and is also protected by copyright law. Reverse engineering of the software is prohibited. If this documentation is delivered to a U.S. Government Agency of the Department of Defense, then it is delivered with Restricted Rights and the following legend is applicable: Restricted Rights Legend Use, duplication or disclosure by the Government is subject to restrictions for commercial computer software and shall be deemed to be Restricted Rights software under Federal law, as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013, Rights in Technical Data and Computer Software (October 1988). This material or any portion of it may not be copied in any form or by any means without the express prior written permission of Oracle Corporation. Any other copying is a violation of copyright law and may result in civil and/or criminal penalties. If this documentation is delivered to a U.S. Government Agency not within the Department of Defense, then it is delivered with “Restricted Rights,” as defined in FAR 52.227-14, Rights in Data-General, including Alternate III (June 1987). The information in this document is subject to change without notice. If you find any problems in the documentation, please report them in writing to Education Products, Oracle Corporation, 500 Oracle Parkway, Redwood Shores, CA 94065. Oracle Corporation does not warrant that this document is error-free. Oracle and all references to Oracle Products are trademarks or registered trademarks of Oracle Corporation. All other products or company names are used for identification purposes only, and may be trademarks of their respective owners. Author Nancy Greenberg Technical Contributors and Reviewers Wayne Abbott Christian Bauwens Perry Benson Brian Boxx Zarko Cesljas Dairy Chan Laszlo Czinkoczki Marjolein Dekkers Matthew Gregory Stefan Grenstad Joel Goodman Rosita Hanoman Sushma Jagannath Angelika Krupp Christopher Lawless Marcelo Manzano Isabelle Marchand Malika Marghadi Valli Pataballa Elspeth Payne Ligia Jasmin Robayo Bryan Roberts Helen Robertson Lata Shivaprasad John Soltani Priya Vennapusa Ken Woolfe Publisher Jobi Varghese Preface I Introduction Lesson Objectives I-2 Goals of the Course I-3 Oracle10g I-4 Oracle Database 10g I-6 Oracle Application Server 10g I-7 Oracle Enterprise Manager 10g Grid Control I-8 Relational and Object Relational Database Management Systems I-9 Oracle Internet Platform I-10 System Development Life Cycle I-11 Data Storage on Different Media I-13 Relational Database Concept I-14 Definition of a Relational Database I-15 Data Models I-16 Entity Relationship Model I-17 Entity Relationship Modeling Conventions I-19 Relating Multiple Tables I-21 Relational Database Terminology I-23 Relational Database Properties I-25 Communicating with an RDBMS Using SQL I-26 Oracle’s Relational Database Management System I-27 SQL Statements I-28 Tables Used in the Course I-29 Summary I-30 1 Retrieving Data Using the SQL SELECT Statement Objectives 1-2 Capabilities of SQL SELECT Statements 1-3 Basic SELECT Statement 1-4 Selecting All Columns 1-5 Selecting Specific Columns 1-6 Writing SQL Statements 1-7 Column Heading Defaults 1-8 Arithmetic Expressions 1-9 Using Arithmetic Operators 1-10 Operator Precedence 1-11 Defining a Null Value 1-12 Null Values in Arithmetic Expressions 1-13 Defining a Column Alias 1-14 Using Column Aliases 1-15 Concatenation Operator 1-16 Literal Character Strings 1-17 Using Literal Character Strings 1-18 Alternative Quote (q) Operator 1-19 Duplicate Rows 1-20 Contents iii SQL and iSQL*Plus Interaction 1-21 SQL Statements Versus iSQL*Plus Commands 1-22 Overview of iSQL*Plus 1-23 Logging In to iSQL*Plus 1-24 iSQL*Plus Environment 1-25 Displaying Table Structure 1-26 Interacting with Script Files 1-28SQL*Plus History Page 1-32 Setting iSQL*Plus Preferences 1-34 Setting the Output Location Preference 1-35 Summary 1-36 Practice 1: Overview 1-37 2 Restricting and Sorting Data Objectives 2-2 Limiting Rows Using a Selection 2-3 Limiting the Rows That Are Selected 2-4 Using the WHERE Clause 2-5 Character Strings and Dates 2-6 Comparison Conditions 2-7 Using Comparison Conditions 2-8 Using the BETWEEN Condition 2-9 Using the IN Condition 2-10 Using the LIKE Condition 2-11 Using the NULL Conditions 2-13 Logical Conditions 2-14 Using the AND Operator 2-15 Using the OR Operator 2-16 Using the NOT Operator 2-17 Rules of Precedence 2-18 Using the ORDER BY Clause 2-20 Sorting 2-21 Substitution Variables 2-22 Using the & Substitution Variable 2-24 Character and Date Values with Substitution Variables 2-26 Specifying Column Names, Expressions, and Text 2-27 Using the && Substitution Variable 2-28 Using the iSQL*Plus DEFINE Command 2-29 Using the VERIFY Command 2-30 Summary 2-31 Practice 2: Overview 2-32 iv 3 Using Single-Row Functions to Customize Output Objectives 3-2 SQL Functions 3-3 Two Types of SQL Functions 3-4 Single-Row Functions 3-5 Character Functions 3-7 Case-Manipulation Functions 3-9 Using Case-Manipulation Functions 3-10 Character-Manipulation Functions 3-11 Using the Character-Manipulation Functions 3-12 Number Functions 3-13 Using the ROUND Function 3-14 Using the TRUNC Function 3-15 Using the MOD Function 3-16 Working with Dates 3-17 Arithmetic with Dates 3-20 Using Arithmetic Operators with Dates 3-21 Date Functions 3-22 Using Date Functions 3-23 Practice 3: Overview of Part 1 3-25 Conversion Functions 3-26 Implicit Data Type Conversion 3-27 Explicit Data Type Conversion 3-29 Using the TO_CHAR Function with Dates 3-32 Elements of the Date Format Model 3-33 Using the TO_CHAR Function with Dates 3-37 Using the TO_CHAR Function with Numbers 3-38 Using the TO_NUMBER and TO_DATE Functions 3-41 RR Date Format 3-43 Example of RR Date Format 3-44 Nesting Functions 3-45 General Functions 3-47 NVL Function 3-48 Using the NVL Function 3-49 Using the NVL2 Function 3-50 Using the NULLIF Function 3-51 Using the COALESCE Function 3-52 Conditional Expressions 3-54 CASE Expression 3-55 Using the CASE Expression 3-56 DECODE Function 3-57 Using the DECODE Function 3-58 Summary 3-60 Practice 3: Overview of Part 2 3-61 v 4 Reporting Aggregated Data Using the Group Functions Objectives 4-2 What Are Group Functions? 4-3 Types of Group Functions 4-4 Group Functions: Syntax 4-5 Using the AVG and SUM Functions 4-6 Using the MIN and MAX Functions 4-7 Using the COUNT Function 4-8 Using the DISTINCT Keyword 4-9 Group Functions and Null Values 4-10 Creating Groups of Data 4-11 Creating Groups of Data: GROUP BY Clause Syntax 4-12 Using the GROUP BY Clause 4-13 Grouping by More Than One Column 4-15 Using the GROUP BY Clause on Multiple Columns 4-16 Illegal Queries Using Group Functions 4-17 Restricting Group Results 4-19 Restricting Group Results with the HAVING Clause 4-20 Using the HAVING Clause 4-21 Nesting Group Functions 4-23 Summary 4-24 Practice 4: Overview 4-25 5 Displaying Data from Multiple Tables Objectives 5-2 Obtaining Data from Multiple Tables 5-3 Types of Joins 5-4 Joining Tables Using SQL:1999 Syntax 5-5 Creating Natural Joins 5-6 Retrieving Records with Natural Joins 5-7 Creating Joins with the USING Clause 5-8 Joining Column Names 5-9 Retrieving Records with the USING Clause 5-10 Qualifying Ambiguous Column Names 5-11 Using Table Aliases 5-12 Creating Joins with the ON Clause 5-13 Retrieving Records with the ON Clause 5-14 Self-Joins Using the ON Clause 5-15 Applying Additional Conditions to a Join 5-17 Creating Three-Way Joins with the ON Clause 5-18 Non-Equijoins 5-19 Retrieving Records with Non-Equijoins 5-20 Outer Joins 5-21 INNER Versus OUTER Joins 5-22 LEFT OUTER JOIN 5-23 RIGHT OUTER JOIN 5-24 vi FULL OUTER JOIN 5-25 Cartesian Products 5-26 Generating a Cartesian Product 5-27 Creating Cross Joins 5-28 Summary 5-29 Practice 5: Overview 5-30 6 Using Subqueries to Solve Queries Objectives 6-2 Using a Subquery to Solve a Problem 6-3 Subquery Syntax 6-4 Using a Subquery 6-5 Guidelines for Using Subqueries 6-6 Types of Subqueries 6-7 Single-Row Subqueries 6-8 Executing Single-Row Subqueries 6-9 Using Group Functions in a Subquery 6-10 The HAVING Clause with Subqueries 6-11 What Is Wrong with This Statement? 6-12 Will This Statement Return Rows? 6-13 Multiple-Row Subqueries 6-14 Using the ANY Operator in Multiple-Row Subqueries 6-15 Using the ALL Operator in Multiple-Row Subqueries 6-16 Null Values in a Subquery 6-17 Summary 6-19 Practice 6: Overview 6-20 7 Using the Set Operators Objectives 7-2 Set Operators 7-3 Tables Used in This Lesson 7-4 UNION Operator 7-8 Using the UNION Operator 7-9 UNION ALL Operator 7-11 Using the UNION ALL Operator 7-12 INTERSECT Operator 7-13 Using the INTERSECT Operator 7-14 MINUS Operator 7-15 Set Operator Guidelines 7-17 The Oracle Server and Set Operators 7-18 Matching the SELECT Statements 7-19 Matching the SELECT Statement: Example 7-20 Controlling the Order of Rows 7-21 Summary 7-23 Practice 7: Overview 7-24 vii 8 Manipulating Data Objectives 8-2 Data Manipulation Language 8-3 Adding a New Row to a Table 8-4 INSERT Statement Syntax 8-5 Inserting New Rows 8-6 Inserting Rows with Null Values 8-7 Inserting Special Values 8-8 Inserting Specific Date Values 8-9 Creating a Script 8-10 Copying Rows from Another Table 8-11 Changing Data in a Table 8-12 UPDATE Statement Syntax 8-13 Updating Rows in a Table 8-14 Updating Two Columns with a Subquery 8-15 Updating Rows Based on Another Table 8-16 Removing a Row from a Table 8-17 DELETE Statement 8-18 Deleting Rows from a Table 8-19 Deleting Rows Based on Another Table 8-20 TRUNCATE Statement 8-21 Using a Subquery in an INSERT Statement 8-22 Database Transactions 8-24 Advantages of COMMIT and ROLLBACK Statements 8-26 Controlling Transactions 8-27 Rolling Back Changes to a Marker 8-28 Implicit Transaction Processing 8-29 State of the Data Before COMMIT or ROLLBACK 8-31 State of the Data After COMMIT 8-32 Committing Data 8-33 State of the Data After ROLLBACK 8-34 Statement-Level Rollback 8-36 Read Consistency 8-37 Implementation of Read Consistency 8-38 Summary 8-39 Practice 8: Overview 8-40 9 Using DDL Statements to Create and Manage Tables Objectives 9-2 Database Objects 9-3 Naming Rules 9-4 CREATE TABLE Statement 9-5 Referencing Another User’s Tables 9-6 DEFAULT Option 9-7 Creating Tables 9-8 Data Types 9-9 Datetime Data Types 9-11 viii INTERVAL DAY TO SECOND Data Type 9-16 Including Constraints 9-17 Constraint Guidelines 9-18 Defining Constraints 9-19 NOT NULL Constraint 9-21 UNIQUE Constraint 9-22 PRIMARY KEY Constraint 9-24 FOREIGN KEY Constraint 9-25 FOREIGN KEY Constraint: Keywords 9-27 CHECK Constraint 9-28 CREATE TABLE: Example 9-29 Violating Constraints 9-30 Creating a Table by Using a Subquery 9-32 ALTER TABLE Statement 9-34 Dropping a Table 9-35 Summary 9-36 Practice 9: Overview 9-37 10 Creating Other Schema Objects Objectives 10-2 Database Objects 10-3 What Is a View? 10-4 Advantages of Views 10-5 Simple Views and Complex Views 10-6 Creating a View 10-7 Retrieving Data from a View 10-10 Modifying a View 10-11 Creating a Complex View 10-12 Rules for Performing DML Operations on a View 10-13 Using the WITH CHECK OPTION Clause 10-16 Denying DML Operations 10-17 Removing a View 10-19 Practice 10: Overview of Part 1 10-20 Sequences 10-21 CREATE SEQUENCE Statement: Syntax 10-23 Creating a Sequence 10-24 NEXTVAL and CURRVAL Pseudocolumns 10-25 Using a Sequence 10-27 Caching Sequence Values 10-28 Modifying a Sequence 10-29 Guidelines for Modifying a Sequence 10-30 Indexes 10-31 How Are Indexes Created? 10-33 Creating an Index 10-34 Index Creation Guidelines 10-35 Removing an Index 10-36 ix Synonyms 10-37 Creating and Removing Synonyms 10-39 Summary 10-40 Practice 10: Overview of Part 2 10-41 11 Managing Objects with Data Dictionary Views Objectives 11-2 The Data Dictionary 11-3 Data Dictionary Structure 11-4 How to Use the Dictionary Views 11-6 USER_OBJECTS View 11-7 Table Information 11-9 Column Information 11-10 Constraint Information 11-12 View Information 11-15 Sequence Information 11-16 Synonym Information 11-18 Adding Comments to a Table 11-19 Summary 11-20 Practice 11: Overview 11-21 A Practice Solutions B Table Descriptions and Data C Oracle Join Syntax D Using SQL*Plus Index Additional Practices Additional Practices: Table Descriptions and Data Additional Practices: Solutions x Preface Preface-3 Profile Before You Begin This Course Before you begin this course, you should be able to use a graphical user interface (GUI). The prerequisite is a familiarity with data processing concepts and techniques. How This Course Is Organized Oracle Database 10g: SQL Fundamentals I is an instructor-led course featuring lectures and hands-on exercises. Online demonstrations and written practice sessions reinforce the concepts and skills that are introduced. Preface-4 Related Publications Oracle Publications Title Part Number Oracle® Database Reference 10g Release 1 (10.1) B10755-01 Oracle® Database SQL Reference 10g Release 1 (10.1) B10759-01 Oracle® Database Concepts 10g Release 1 (10.1) B10743-01 Oracle® Database Application Developer's Guide - Fundamentals 10g Release 1 (10.1) B10795-01 SQL*Plus® User's Guide and Reference B12170-01 Additional Publications • System release bulletins • Installation and user’s guidesread.me files • International Oracle User’s Group (IOUG) articlesOracle Magazine Preface-5 Typographic Conventions What follows are two lists of typographical conventions that are used specifically within text or within code. Typographic Conventions Within Text Convention Object or Term Example Uppercase Commands, Use the SELECT command to view functions, information stored in the LAST_NAME column names, column of the EMPLOYEES table. table names, PL/SQL objects, schemas Lowercase, Filenames, where: role is the name of the role italic syntax variables, to be created. usernames, passwords Initial cap Trigger and Assign a When-Validate-Item trigger to button names the ORD block. Choose Cancel. Italic Books, names of For more information on the subject see courses and Oracle SQL Reference manuals, and Manual emphasized words or phrases Do not save changes to the database. Quotation marks Lesson module This subject is covered in Lesson 3, titles referenced “Working with Objects.” within a course Preface-6 Typographic Conventions (continued) Typographic Conventions Within Code Convention Object or Term Example Uppercase Commands, SELECT employee_id functions FROM employees; Lowercase, Syntax variables CREATE ROLE role; italic Initial cap Forms triggers Form module: ORD Trigger level: S_ITEM.QUANTITY item Trigger name: When-Validate-Item . . . Lowercase Column names, . . . table names, OG_ACTIVATE_LAYER filenames, (OG_GET_LAYER ('prod_pie_layer')) PL/SQL objects . . . SELECT last_name FROM employees; Bold Text that must CREATE USER scott be entered by a IDENTIFIED BY tiger; user Copyright © 2004, Oracle. All rights reserved. Introduction Oracle Database 10g: SQL Fundamentals I I-2 I-2 Copyright © 2004, Oracle. All rights reserved. Lesson Objectives After completing this lesson, you should be able to do the following: • List the features of Oracle10g • Discuss the theoretical and physical aspects of a relational database • Describe the Oracle implementation of the RDBMS and ORDBMS • Understand the goals of the course Objectives In this lesson, you gain an understanding of the relational database management system (RDBMS) and the object relational database management system (ORDBMS). You are also introduced to the following: • SQL statements that are specific to OracleiSQL*Plus, which is an environment used for executing SQL statements and for formatting and reporting purposes Oracle Database 10g: SQL Fundamentals I I-3 I-3 Copyright © 2004, Oracle. All rights reserved. Goals of the Course After completing this course, you should be able to do the following: • Identify the major structural components of Oracle Database 10g • Retrieve row and column data from tables with the SELECT statement • Create reports of sorted and restricted data • Employ SQL functions to generate and retrieve customized data • Run data manipulation language (DML) statements to update data in Oracle Database 10g • Obtain metadata by querying the dictionary views Goals of the Course This course offers you an introduction to Oracle Database 10g database technology. In this class, you learn the basic concepts of relational databases and the powerful SQL programming language. This course provides the essential SQL skills that enable you to write queries against single and multiple tables, manipulate data in tables, create database objects, and query metadata. Oracle Database 10g: SQL Fundamentals I I-4 I-4 Copyright © 2004, Oracle. All rights reserved. Oracle10g Single development model Common skill sets Reliability Unified management Scalability One vendor Oracle10g Features The Oracle10g release offers a comprehensive high-performance infrastructure, including: • Scalability from departments to enterprise e-business sites • Robust, reliable, available, and secure architecture • One development model; easy deployment options • Leverage an organization’s current skillset throughout the Oracle platform (including SQL, PL/SQL, Java, and XML) • One management interface for all applications • Industry standard technologies; no proprietary lock-in In addition to providing the benefits listed above, the Oracle10g release contains the database for the grid. Grid computing can dramatically lower the cost of computing, extend the availability of computing resources, and deliver higher productivity and quality. The basic idea of grid computing is the notion of computing as a utility, analogous to the electric power grid or the telephone network. As a client of the grid, you do not care where your data is or where your computation is done. You want to have your computation done and to have your information delivered to you when you want it. From the server side, grid is about virtualization and provisioning. You pool all your resources together and provision these resources dynamically based on the needs of your business, thus achieving better resource utilization at the same time. Oracle Database 10g: SQL Fundamentals I I-5 I-5 Copyright © 2004, Oracle. All rights reserved. Oracle10g Oracle10g The three grid-infrastructure products of the Oracle10g release are: • Oracle Database 10g • Oracle Application Server 10g • Oracle Enterprise Manager 10g Grid Control Oracle Database 10g: SQL Fundamentals I I-6 I-6 Copyright © 2004, Oracle. All rights reserved. Oracle Database 10g Oracle Database 10g: SQL Fundamentals I I-7 I-7 Copyright © 2004, Oracle. All rights reserved. Oracle Application Server 10g Application development framework Application server Business intelligence Portals Integration Transactional applications Oracle Database 10g: SQL Fundamentals I I-8 I-8 Copyright © 2004, Oracle. All rights reserved. Oracle Enterprise Manager 10g Grid Control • Software provisioning • Application service level monitoring Oracle Enterprise Manager 10g Grid Control Oracle Enterprise Manager 10g Grid Control is the complete, integrated, central management console and underlying framework that automates administrative tasks across sets of systems in a grid environment. With Oracle Grid Control, you can group multiple hardware nodes, databases, application servers, and other targets into single logical entities. By executing jobs, enforcing standard policies, monitoring performance and automating many other tasks across a group of targets instead of on many systems individually, Grid Control enables scaling with a growing grid. Software Provisioning With Grid Control, Oracle 10g automates installation, configuration, and cloning of Application Server 10g and Database 10g across multiples nodes. Oracle Enterprise Manager provides a common framework for software provisioning and management, enabling administrators to create, configure, deploy, and utilize new servers with new instances of the application server and database as they are needed. Application Service Level Monitoring Oracle Grid Control views the availability and performance of the grid infrastructure as a unified whole, as a user would experience it, rather than as isolated storage units, processing boxes, databases, and application servers. Oracle Database 10g: SQL Fundamentals I I-9 I-9 Copyright © 2004, Oracle. All rights reserved. Relational and Object Relational Database Management Systems • Relational model and object relational model • User-defined data types and objects • Fully compatible with relational database • Support of multimedia and large objects • High-quality database server features About the Oracle Server The Oracle server supports both the relational and object relational models. The Oracle server extends the data-modeling capabilities to support an object relational database model that brings object-oriented programming, complex data types, complex business objects, and full compatibility with the relational world. It includes several features for improved performance and functionality of online transaction processing (OLTP) applications, such as better sharing of run-time data structures, larger buffer caches, and deferrable constraints. Data warehouse applications benefit from enhancements such as parallel execution of insert, update, and delete operations; partitioning; and parallel-aware query optimization. Operating within the Network Computing Architecture (NCA) framework, the Oracle model supports client/server and Web-based applications that are distributed and multitiered. For more information about the relational and object relational model, see the Database Concepts manual. Oracle Database 10g: SQL Fundamentals I I-10 I-10 Copyright © 2004, Oracle. All rights reserved. Oracle Internet PlatformSystem management Network services Databases Application servers Internet applications Any browser Any FTP client Any mail client Oracle Database 10g: SQL Fundamentals I I-11 I-11 Copyright © 2004, Oracle. All rights reserved. System Development Life Cycle Strategy and analysis Design Build and document Transition Production System Development Life Cycle From concept to production, you can develop a database by using the system-development life cycle, which contains multiple stages of development. This top-down, systematic approach to database development transforms business information requirements into an operational database. Strategy and Analysis Phase • Study and analyze the business requirements. Interview users and managers to identify the information requirements. Incorporate the enterprise and application mission statements as well as any future system specifications. • Build models of the system. Transfer the business narrative into a graphical representation of business information needs and rules. Confirm and refine the model with the analysts and experts. Design Phase Design the database based on the model developed in the strategy and analysis phase. Build and Documentation Phase • Build the prototype system. Write and execute the commands to create the tables and supporting objects for the database. • Develop user documentation, help text, and operations manuals to support the use and operation of the system. Oracle Database 10g: SQL Fundamentals I I-12 I-12 Copyright © 2004, Oracle. All rights reserved. System Development Life Cycle Strategy and analysis Design Build and document Transition Production System Development Life Cycle (continued) Transition Phase Refine the prototype. Move an application into production with user-acceptance testing, conversion of existing data, and parallel operations. Make any modifications required. Production Phase Roll out the system to the users. Operate the production system. Monitor its performance, and enhance and refine the system. Note: The various phases of the system development life cycle can be carried out iteratively. This course focuses on the Build phase of the system development life cycle. Oracle Database 10g: SQL Fundamentals I I-13 I-13 Copyright © 2004, Oracle. All rights reserved. Data Storage on Different Media Electronic spreadsheet Filing cabinet Database Oracle Database 10g: SQL Fundamentals I I-14 I-14 Copyright © 2004, Oracle. All rights reserved. Relational Database Concept • Dr. E. F. Codd proposed the relational model for database systems in 1970. • It is the basis for the relational database management system (RDBMS). • The relational model consists of the following: – Collection of objects or relations – Set of operators to act on the relations – Data integrity for accuracy and consistency Relational Model The principles of the relational model were first outlined by Dr. E. F. Codd in a June 1970 paper titled “A Relational Model of Data for Large Shared Data Banks.” In this paper, Dr. Codd proposed the relational model for database systems. The common models used at that time were hierarchical and network, or even simple flat- file data structures. Relational database management systems (RDBMS) soon became very popular, especially for their ease of use and flexibility in structure. In addition, a number of innovative vendors, such as Oracle, supplemented the RDBMS with a suite of powerful application development and user products, providing a total solution. Components of the Relational Model • Collections of objects or relations that store the data • A set of operators that can act on the relations to produce other relations • Data integrity for accuracy and consistency For more information, see An Introduction to Database Systems, Eighth Edition (Addison- Wesley: 2004), written by Chris Date. Oracle Database 10g: SQL Fundamentals I I-15 I-15 Copyright © 2004, Oracle. All rights reserved. Definition of a Relational Database A relational database is a collection of relations or two-dimensional tables. Oracle server Oracle Database 10g: SQL Fundamentals I I-16 I-16 Copyright © 2004, Oracle. All rights reserved. Data Models Model of system in client’s mind Entity model of client’s model Tables on disk Oracle server Table model of entity model Oracle Database 10g: SQL Fundamentals I I-17 I-17 Copyright © 2004, Oracle. All rights reserved. • Create an entity relationship diagram from business specifications or narratives: • Scenario – “. . . Assign one or more employees to a department . . .” – “. . . Some departments do not yet have assigned employees . . .” Entity Relationship Model EMPLOYEE #* number * name o job title DEPARTMENT #* number * name o location assigned to composed of ER Modeling In an effective system, data is divided into discrete categories or entities. An entity relationship (ER) model is an illustration of various entities in a business and the relationships among them. An ER model is derived from business specifications or narratives and built during the analysis phase of the system development life cycle. ER models separate the information required by a business from the activities performed within a business. Although businesses can change their activities, the type of information tends to remain constant. Therefore, the data structures also tend to be constant. Oracle Database 10g: SQL Fundamentals I I-18 ER Modeling (continued) Benefits of ER Modeling • Documents information for the organization in a clear, precise format • Provides a clear picture of the scope of the information requirement • Provides an easily understood pictorial map for database design • Offers an effective framework for integrating multiple applications Key Components • Entity: A thing of significance about which information needs to be known. Examples are departments, employees, and orders. • Attribute: Something that describes or qualifies an entity. For example, for the employee entity, the attributes would be the employee number, name, job title, hire date, department number, and so on. Each of the attributes is either required or optional. This state is called optionality. • Relationship: A named association between entities showing optionality and degree. Examples are employees and departments, and orders and items. Oracle Database 10g: SQL Fundamentals I I-19 I-19 Copyright © 2004, Oracle. All rights reserved. Entity Relationship Modeling Conventions Entity • Singular, unique name • Uppercase • Soft box • Synonym in parentheses Unique identifier (UID) Primary marked with “#” Secondary marked with “(#)” EMPLOYEE #* number * name o job title DEPARTMENT #* number * name o location Attribute • Singular name • Lowercase • Mandatory marked with * • Optional marked with “o” assigned to composed of ER Modeling Conventions Entities To represent an entity in a model, use the following conventions: • Singular, unique entity name • Entity name in uppercase • Soft box • Optional synonym names in uppercase within parentheses: ( ) Attributes To represent an attribute in a model, use the following conventions: • Singular name in lowercase • Asterisk (*) tag for mandatory attributes (i.e., values that must be known) • Letter “o” tag for optional attributes (i.e., values that may be known) Relationships Symbol Description Dashed line Optional element indicating “may be” Solid line Mandatory element indicating “must be” Crow’s foot Degree element indicating “one or more” Single line Degree element indicating “one and only one” Oracle Database 10g: SQL Fundamentals I I-20 I-20 Copyright © 2004, Oracle. All rights reserved. Entity Relationship Modeling Conventions Unique Identifier (UID) Primary marked with # Secondary marked with (#) Entity • Singular, unique name • Uppercase • Soft box • Synonym in parentheses Attribute • Singular name • Lowercase • Mandatory marked with * • Optional marked with “o” EMPLOYEE #* number * name o job title DEPARTMENT #* number * name o location assigned to composed of ER Modeling Conventions (continued) Relationships Each direction of the relationship contains: • A label: for example, taught by or assigned to • An optionality: either must be or may be • A degree: either one and only one or one or more Note: The term cardinality is a synonym for the term degree. Each source entity {may be | must be} relationship name {one and only one | one or more} destination entity. Note: The convention is to read clockwise. Unique Identifiers A unique identifier (UID) is any combination of attributes or relationships, or both, that serves to distinguish occurrences of an entity. Each entity occurrence must be uniquely identifiable. • Tag each attribute that is part of the UID with a number sign: # • Tag secondary UIDs with a number sign in parentheses: (#) Oracle Database 10g: SQL Fundamentals I I-21 I-21 Copyright © 2004, Oracle. All rights reserved. Relating Multiple Tables • Each row of data in a table is uniquely identified by a primary key (PK). • You can logically relate data from multiple tables using foreign keys (FK). Table name: EMPLOYEES Table name: DEPARTMENTS Primary key Primary keyForeign key … Relating Multiple Tables Each table contains data that describes exactly one entity. For example, the EMPLOYEES table contains information about employees. Categories of data are listed across the top of each table, and individual cases are listed below. Using a table format, you can readily visualize, understand, and use information. Because data about different entities is stored in different tables, you may need to combine two or more tables to answer a particular question. For example, you may want to know the location of the department where an employee works. In this scenario, you need information from the EMPLOYEES table (which contains data about employees) and the DEPARTMENTS table (which contains information about departments). With an RDBMS, you can relate the data in one table to the data in another by using the foreign keys. A foreign key is a column (or a set of columns) that refers to a primary key in the same table or another table. You can use the ability to relate data in one table to data in another to organize information in separate, manageable units. Employee data can be kept logically distinct from department data by storing it in a separate table. Oracle Database 10g: SQL Fundamentals I I-22 Relating Multiple Tables (continued) Guidelines for Primary Keys and Foreign Keys • You cannot use duplicate values in a primary key. • Primary keys generally cannot be changed. • Foreign keys are based on data values and are purely logical (not physical) pointers. • A foreign key value must match an existing primary key value or unique key value, or else it must be null. • A foreign key must reference either a primary key or a unique key column. Oracle Database 10g: SQL Fundamentals I I-23 I-23 Copyright © 2004, Oracle. All rights reserved. Relational Database Terminology 1 2 3 4 6 5 Terminology Used in a Relational Database A relational database can contain one or many tables. A table is the basic storage structure of an RDBMS. A table holds all the data necessary about something in the real world, such as employees, invoices, or customers. The slide shows the contents of the EMPLOYEES table or relation. The numbers indicate the following: 1. A single row (or tuple) representing all data required for a particular employee. Each row in a table should be identified by a primary key, which permits no duplicate rows. The order of rows is insignificant; specify the row order when the data is retrieved. 2. A column or attribute containing the employee number. The employee number identifies a unique employee in the EMPLOYEES table. In this example, the employee number column is designated as the primary key. A primary key must contain a value, and the value must be unique. 3. A column that is not a key value. A column represents one kind of data in a table; in this example, the data is the salaries of all the employees. Column order is insignificant when storing data; specify the column order when the data is retrieved. Oracle Database 10g: SQL Fundamentals I I-24 Terminology Used in a Relational Database (continued) 4. A column containing the department number, which is also a foreign key. A foreign key is a column that defines how tables relate to each other. A foreign key refers to a primary key or a unique key in the same table or in another table. In the example, DEPARTMENT_ID uniquely identifies a department in the DEPARTMENTS table. 5. A field can be found at the intersection of a row and a column. There can be only one value in it. 6. A field may have no value in it. This is called a null value. In the EMPLOYEES table, only those employees who have the role of sales representative have a value in the COMMISSION_PCT (commission) field. Oracle Database 10g: SQL Fundamentals I I-25 I-25 Copyright © 2004, Oracle. All rights reserved. Relational Database Properties A relational database: • Can be accessed and modified by executing structured query language (SQL) statements • Contains a collection of tables with no physical pointers • Uses a set of operators Properties of a Relational Database In a relational database, you do not specify the access route to the tables, and you do not need to know how the data is arranged physically. To access the database, you execute a structured query language (SQL) statement, which is the American National Standards Institute (ANSI) standard language for operating relational databases. The language contains a large set of operators for partitioning and combining relations. The database can be modified by using the SQL statements. Oracle Database 10g: SQL Fundamentals I I-26 I-26 Copyright © 2004, Oracle. All rights reserved. Communicating with an RDBMS Using SQL SQL statement is entered. Statement is sent to Oracle server. Oracle server SELECT department_name FROM departments; Structured Query Language Using SQL, you can communicate with the Oracle server. SQL has the following advantages: • Efficient • Easy to learn and use • Functionally complete (With SQL, you can define, retrieve, and manipulate data in the tables.) Oracle Database 10g: SQL Fundamentals I I-27 I-27 Copyright © 2004, Oracle. All rights reserved. Oracle’s Relational Database Management System User tables Data dictionary Oracle server Oracle Database 10g: SQL Fundamentals I I-28 I-28 Copyright © 2004, Oracle. All rights reserved. SQL Statements SELECT INSERT UPDATE DELETE MERGE CREATE ALTER DROP RENAME TRUNCATE COMMENT GRANT REVOKE COMMIT ROLLBACK SAVEPOINT Data manipulation language (DML) Data definition language (DDL) Transaction control Data control language (DCL) SQL Statements Oracle SQL complies with industry-accepted standards. Oracle Corporation ensures future compliance with evolving standards by actively involving key personnel in SQL standards committees. Industry-accepted committees are the American National Standards Institute (ANSI) and the International Standards Organization (ISO). Both ANSI and ISO have accepted SQL as the standard language for relational databases. Statem ent D escription SELECT INSERT UPDATE DELETE MERGE R etrieves data from the database, enters new row s, changes existing row s, and rem oves unw anted row s from tables in the database, respectively. C ollectively know n as data m anipulation language (D M L). CREATE ALTER DROP RENAME TRUNCATE COMMENT Sets up, changes, and rem oves data structures from tables. C ollectively know n as data definition language (D D L). GRANT REVOKE G ives or rem oves access rights to both the O racle database and the structures w ithin it. COMMIT ROLLBACK SAVEPOINT M anages the changes m ade by D M L statem ents. C hanges to the data can be grouped together into logical transactions. Oracle Database 10g: SQL Fundamentals I I-29 I-29 Copyright © 2004, Oracle. All rights reserved. Tables Used in the Course EMPLOYEES DEPARTMENTS JOB_GRADES Tables Used in the Course The following main tables are used in this course: • EMPLOYEES table: Gives details of all the employees • DEPARTMENTS table: Gives details of all the departments • JOB_GRADES table: Gives details of salaries for various grades Note: The structure and data for all the tables are provided in Appendix B. Oracle Database 10g: SQL Fundamentals I I-30 I-30 Copyright © 2004, Oracle. All rights reserved. Summary • Oracle Database 10g is the database for grid computing. • The database is based on the object relational database management system. • Relational databases are composed of relations, managed by relational operations, and governed by data integrity constraints. • With the Oracle server, you can store and manage information by using the SQL language and PL/SQL engine. Summary Relational database management systems are composed of objects or relations. They are managed by operations and governed by data integrity constraints. Oracle Corporation produces products and services to meet your RDBMS needs. The main products are the following: • Oracle Database 10g, with which you store and manage information by using SQL • Oracle Application Server 10g, with which you run all of your applications • Oracle Enterprise Manager 10g Grid Control, which you use to manage and automate administrative tasks across sets of systems in a grid environment SQL The Oracle server supports ANSI-standard SQL and contains extensions. SQL is the language that is used to communicate with the server to access, manipulate, and control data. Copyright © 2004, Oracle. All rights reserved. Retrieving Data Using the SQL SELECT Statement Oracle Database 10g: SQL Fundamentals I 1-2 1-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • List the capabilities of SQL SELECT statements • Execute a basic SELECT statement • Differentiate between SQL statements and SQL*Plus commands Objectives To extract data from the database, you need to use the structured query language (SQL) SELECT statement. You may need to restrict the columns that are displayed. This lesson describes all the SQL statements that are needed to perform these actions. You may want to create SELECT statements that can be used more than once. This lesson also covers the iSQL*Plus environment in which you execute SQL statements. Oracle Database 10g: SQL Fundamentals I 1-3 1-3 Copyright © 2004, Oracle. All rights reserved. Capabilities of SQL SELECT Statements SelectionProjection Table 1 Table 2 Table 1Table 1 Join Capabilities of SQL SELECT Statements A SELECT statement retrieves information from the database. With a SELECT statement, you can use the following capabilities: • Projection: Choose the columns in a table that are returned by a query. Choose as few or as many of the columns as needed • Selection: Choose the rows in a table that are returned by a query. Various criteria can be used to restrict the rows that are retrieved. • Joining: Bring together data that is stored in different tables by specifying the link between them. SQL joins are covered in more detail in a later lesson. Oracle Database 10g: SQL Fundamentals I 1-4 1-4 Copyright © 2004, Oracle. All rights reserved. Basic SELECT Statement • SELECT identifies the columns to be displayed • FROM identifies the table containing those columns SELECT *|{[DISTINCT] column|expression [alias],...} FROM table; Basic SELECT Statement In its simplest form, a SELECT statement must include the following: • A SELECT clause, which specifies the columns to be displayed • A FROM clause, which identifies the table containing the columns that are listed in the SELECT clause In the syntax: SELECT is a list of one or more columns * selects all columns DISTINCT suppresses duplicates column|expression selects the named column or the expression alias gives selected columns different headings FROM table specifies the table containing the columns Note: Throughout this course, the words keyword, clause, and statement are used as follows: • A keyword refers to an individual SQL element. For example, SELECT and FROM are keywords. • A clause is a part of a SQL statement. For example, SELECT employee_id, last_name, ... is a clause. • A statement is a combination of two or more clauses. For example, SELECT * FROM employees is a SQL statement. Oracle Database 10g: SQL Fundamentals I 1-5 1-5 Copyright © 2004, Oracle. All rights reserved. Selecting All Columns Oracle Database 10g: SQL Fundamentals I 1-6 1-6 Copyright © 2004, Oracle. All rights reserved. Selecting Specific Columns Oracle Database 10g: SQL Fundamentals I 1-7 1-7 Copyright © 2004, Oracle. All rights reserved. Writing SQL Statements • SQL statements are not case-sensitive. • SQL statements can be on one or more lines. • Keywords cannot be abbreviated or split across lines. • Clauses are usually placed on separate lines. • Indents are used to enhance readability. • In iSQL*Plus, SQL statements can optionally be terminated by a semicolon (;). Semicolons are required if you execute multiple SQL statements. • In SQL*plus, you are required to end each SQL statement with a semicolon (;). Writing SQL Statements Using the following simple rules and guidelines, you can construct valid statements that are both easy to read and easy to edit: • SQL statements are not case-sensitive (unless indicated). • SQL statements can be entered on one or many lines. • Keywords cannot be split across lines or abbreviated. • Clauses are usually placed on separate lines for readability and ease of editing. • Indents should be used to make code more readable. • Keywords typically are entered in uppercase; all other words, such as table names and columns, are entered in lowercase. Executing SQL Statements Using iSQL*Plus, click the Execute button to run the command or commands in the editing window. Using SQL*Plus, terminate the SQL statement with a semicolon and then press the Enter key to run the command. Oracle Database 10g: SQL Fundamentals I 1-8 1-8 Copyright © 2004, Oracle. All rights reserved. Column Heading Defaults • iSQL*Plus: – Default heading alignment: Center – Default heading display: Uppercase • SQL*Plus: – Character and Date column headings are left- aligned – Number column headings are right-aligned – Default heading display: Uppercase Column Heading Defaults In iSQL*Plus, column headings are displayed in uppercase and centered. SELECT last_name, hire_date, salary FROM employees; You can override the column heading display with an alias. Column aliases are covered later in this lesson. … Oracle Database 10g: SQL Fundamentals I 1-9 1-9 Copyright © 2004, Oracle. All rights reserved. Arithmetic Expressions Create expressions with number and date data by using arithmetic operators. Multiply* Divide/ Subtract- Add+ DescriptionOperator Arithmetic Expressions You may need to modify the way in which data is displayed, or you may want to perform calculations or look at what-if scenarios. These are all possible using arithmetic expressions. An arithmetic expression can contain column names, constant numeric values, and the arithmetic operators. Arithmetic Operators The slide lists the arithmetic operators that are available in SQL. You can use arithmetic operators in any clause of a SQL statement (except the FROM clause). Note: With DATE and TIMESTAMP data types, you can use the addition and subtraction operators only. Oracle Database 10g: SQL Fundamentals I 1-10 1-10 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, salary, salary + 300 FROM employees; Using Arithmetic Operators … Oracle Database 10g: SQL Fundamentals I 1-11 1-11 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, salary, 12*salary+100 FROM employees; Operator Precedence SELECT last_name, salary, 12*(salary+100) FROM employees; … Oracle Database 10g: SQL Fundamentals I 1-12 1-12 Copyright © 2004, Oracle. All rights reserved. Defining a Null Value • A null is a value that is unavailable, unassigned, unknown, or inapplicable. • A null is not the same as a zero or a blank space. SELECT last_name, job_id, salary, commission_pct FROM employees; … … Oracle Database 10g: SQL Fundamentals I 1-13 1-13 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, 12*salary*commission_pct FROM employees; Null Values in Arithmetic Expressions Arithmetic expressions containing a null value evaluate to null. … … Oracle Database 10g: SQL Fundamentals I 1-14 1-14 Copyright © 2004, Oracle. All rights reserved. Defining a Column Alias A column alias: • Renames a column heading • Is useful with calculations • Immediately follows the column name (There can also be the optional AS keyword between the column name and alias.) • Requires double quotation marks if it contains spaces or special characters or if it is case- sensitive Column Aliases When displaying the result of a query, iSQL*Plus normally uses the name of the selected column as the column heading. This heading may not be descriptive and hence may be difficult to understand. You can change a column heading by using a column alias. Specify the alias after the column in the SELECT list using a space as a separator. By default, alias headings appear in uppercase. If the alias contains spaces or special characters (such as # or $), or if it is case-sensitive, enclose the alias in double quotation marks (\" \"). Oracle Database 10g: SQL Fundamentals I 1-15 1-15 Copyright © 2004, Oracle. All rights reserved. Using Column Aliases SELECT last_name \"Name\" , salary*12 \"Annual Salary\" FROM employees; SELECT last_name AS name, commission_pct comm FROM employees; … Oracle Database 10g: SQL Fundamentals I 1-16 1-16 Copyright © 2004, Oracle. All rights reserved. Concatenation Operator A concatenation operator: • Links columns or character strings to other columns • Is represented by two vertical bars (||) • Creates a resultant column that is a character expression SELECT last_name||job_id AS \"Employees\" FROM employees; … Oracle Database 10g: SQL Fundamentals I 1-17 1-17 Copyright © 2004, Oracle. All rights reserved. Literal Character Strings • A literal is a character, a number, or a date that is included in the SELECT statement. • Date and character literal values must be enclosed by single quotation marks. • Each character string is output once for each row returned. Literal Character Strings A literal is a character, a number, or a date that is included in the SELECT list and that is not a column name or a column alias. It is printed for each row returned. Literal strings of free- format text can be included in the query result and are treated the same as a column in the SELECT list. Date and character literals must be enclosed by single quotation marks (' '); number literals need not be so enclosed. Oracle Database 10g: SQL Fundamentals I 1-18 1-18 Copyright © 2004, Oracle. All rights reserved. Using Literal Character Strings … Oracle Database 10g: SQL Fundamentals I 1-19 1-19 Copyright © 2004, Oracle. All rights reserved. Alternative Quote (q) Operator • Specify your own quotation mark delimiter • Choose any delimiter • Increase readability and usability SELECT department_name || q'[, it's assigned Manager Id: ]' || manager_id AS \"Department and Manager\" FROM departments; … Oracle Database 10g: SQL Fundamentals I 1-20 1-20 Copyright © 2004, Oracle. All rights reserved. Duplicate Rows The default display of queries is all rows, including duplicate rows. SELECT department_id FROM employees; … Oracle Database 10g: SQL Fundamentals I 1-21 1-21 Copyright © 2004, Oracle. All rights reserved. SQL and iSQL*Plus Interaction SQL statements Query resultsiSQL*Plus commands Client Formatted report Internet browser Oracle Database 10g: SQL Fundamentals I 1-22 1-22 Copyright © 2004, Oracle. All rights reserved. SQL Statements Versus iSQL*Plus Commands SQL statements SQL • A language • ANSI standard • Keyword cannot be abbreviated • Statements manipulate data and table definitions in the database iSQL*Plus • An environment • Oracle-proprietary • Keywords can be abbreviated • Commands do not allow manipulation of values in the database • Runs on a browser • Centrally loaded; does not have to be implemented on each machine iSQL*Plus commands SQL and iSQL*Plus (continued) The following table compares SQL and iSQL*Plus: SQL iSQL*Plus Is a language for communicating with the Oracle server to access data Recognizes SQL statements and sends them to the server Is based on American National Standards Institute (ANSI)–standard SQL Is the Oracle-proprietary interface for executing SQL statements Retrieves data; manipulates data and table definitions in the database Does not allow manipulation of values in the database Does not have a continuation character Has a dash (–) as a continuation character if the command is longer than one line Cannot be abbreviated Can be abbreviated Uses functions to perform some formatting Uses commands to format data Oracle Database 10g: SQL Fundamentals I 1-23 1-23 Copyright © 2004, Oracle. All rights reserved. Overview of iSQL*Plus After you log in to iSQL*Plus, you can: • Describe table structures • Enter, execute, and edit SQL statements • Save or append SQL statements to files • Execute or edit statements that are stored in saved script files iSQL*Plus iSQL*Plus is an environment in which you can do the following: • Execute SQL statements to retrieve, modify, add, and remove data from the database • Format, perform calculations on, store, and print query results in the form of reports • Create script files to store SQL statements for repeated use in the future iSQL*Plus commands can be divided into the following main categories: Category Purpose Environment Affects the general behavior of SQL statements for the session Format Formats query results File manipulation Saves statements in text script files and runs statements from text script files Execution Sends SQL statements from the browser to the Oracle server Edit Modifies SQL statements in the Edit window Interaction Enables you to create and pass variables to SQL statements, print variable values, and print messages to the screen Miscellaneous Has various commands to connect to the database, manipulate the iSQL*Plus environment, and display column definitions Oracle Database 10g: SQL Fundamentals I 1-24 1-24 Copyright © 2004, Oracle. All rights reserved. Logging In to iSQL*Plus From your browser environment: Logging In to iSQL*Plus To log in from a browser environment: 1. Start the browser. 2. Enter the URL address of the iSQL*Plus environment. 3. On the Login page, enter appropriate values in the Username, Password, and Connect Identifier fields. Oracle Database 10g: SQL Fundamentals I 1-25 1-25 Copyright © 2004, Oracle. All rights reserved. iSQL*Plus Environment 6 3 4 5 1 2 8 9 7 iSQL*Plus Environment In the browser, the iSQL*Plus Workspace page has several key areas: 1. Text box: Area where you type the SQL statements and iSQL*Plus commands 2. Execute button: Click to execute the statements and commands in the text box 3. Load Script button: Brings up a form where you can identify a path and file name or a URL that contains SQL, PL/SQL, or SQL*Plus commands and load them into the text box 4. Save Script button: Saves the contents of the text box to a file 5. Cancel button: Stops the execution of the command in the text box 6. Clear Screen button: Click to clear text from the text box 7. Logout icon: Click to end the iSQL*Plus session and return to the iSQL*Plus Login page 8. Preferences icon: Click to change your interface configuration, system configuration, or password 9. Help icon: Provides access to iSQL*Plus help documentation Oracle Database 10g: SQL Fundamentals I 1-26 1-26 Copyright © 2004, Oracle. All rights reserved. Displaying Table Structure Use the iSQL*Plus DESCRIBE command to display the structure of a table: DESC[RIBE] tablename Displaying the Table Structure In iSQL*Plus, you can display the structure of a table by using the DESCRIBE command. The command displays the column names and data types, and it shows you whether a column must contain data (that is, whether the column has a NOT NULL constraint). In the syntax, tablename is the name of any existing table, view, or synonym that is accessible to the user. Oracle Database 10g: SQL Fundamentals I 1-27 1-27 Copyright © 2004, Oracle. All rights reserved. Displaying Table Structure DESCRIBE employees Displaying the Table Structure (continued) The example in the slide displays the information about the structure of the EMPLOYEES table. In the resulting display, Null? indicates that the values for this column may be unknown. NOT NULL indicates that a column must contain data. Type displays the data type for a column. The data types are described in the following table: Data Type Description NUMBER(p,s) Number value having a maximum number of digits p, with s digits to the right of the decimal point VARCHAR2(s) Variable-length character value of maximum size s DATE Date and time value between January 1, 4712 B.C., and December 31, 9999 A.D. CHAR(s) Fixed-length character value of size s Oracle Database 10g: SQL Fundamentals I 1-28 1-28 Copyright © 2004, Oracle. All rights reserved. Interacting with Script Files SELECT last_name, hire_date, salary FROM employees; 1 2 Interacting with Script Files Placing Statements and Commands into a Text Script File You can save commands and statements from the text box in iSQL*Plus to a text script file as follows: 1. Type the SQL statements in the text box in iSQL*Plus. 2. Click the Save Script button. This opens the Windows File Save dialog box. Identify the name of the file. The extension defaults to .uix. You can change the file type to a text file or save it as a .sql file. Oracle Database 10g: SQL Fundamentals I 1-29 1-29 Copyright © 2004, Oracle. All rights reserved. Interacting with Script Files Interacting with Script Files (continued) In the example shown, the SQL SELECT statement typed in the text box is saved to a file named emp_data.sql. You can choose the type of the file, name of the file, and location of where you want to save the script file. Oracle Database 10g: SQL Fundamentals I 1-30 1-30 Copyright © 2004, Oracle. All rights reserved. Interacting with Script Files 1 Interacting with Script Files (continued) Using Statements and Commands from a Script File in iSQL*Plus You can use previously saved commands and statements from a script file in iSQL*Plus as follows: 1. Click the Load Script button. This opens a form where you can type the name of the file or a URL containing the SQL, PL/SQL, or SQL*Plus commands that you want to enter in the text box. Oracle Database 10g: SQL Fundamentals I 1-31 1-31 Copyright © 2004, Oracle. All rights reserved. Interacting with Script Files 2 3 D:\\TEMP\\emp_data.sql Interacting with Script Files (continued) 2. Enter the script name and path, or the URL location. Or you can click the Browse button to find the script name and location. 3. Click the Load button to bring the contents of the file or URL location into the text box. Oracle Database 10g: SQL Fundamentals I 1-32 1-32 Copyright © 2004, Oracle. All rights reserved. iSQL*Plus History Page 1 2 3 Running Previous Statements The History page in iSQL*Plus lets you execute previously run statements in your session. The History page shows your most recently run SQL statements and iSQL*Plus commands. To rerun the statements: 1. Select the statement that you want to execute. 2. Click the Load button. Note • You can control the number of statements that are shown on the History page with Preferences settings. • You can choose to delete selected statements by clicking the Delete button. Oracle Database 10g: SQL Fundamentals I 1-33 1-33 Copyright © 2004, Oracle. All rights reserved. iSQL*Plus History Page 3 4 Running Previous Statements (continued) 3. Return to the Workspace page. 4. Click the Execute button to run the commands that have been loaded into the text box. Oracle Database 10g: SQL Fundamentals I 1-34 1-34 Copyright © 2004, Oracle. All rights reserved. Setting iSQL*Plus Preferences 2 3 1 iSQL*Plus Preferences • You can set preferences for your iSQL*Plus session by clicking the Preferences icon. • The preferences are divided into categories. You can set preferences for script formatting, script execution, and database administration, and you can change your password. • When you choose a preference category, a form is displayed that lets you set the preferences for that category. Oracle Database 10g: SQL Fundamentals I 1-35 1-35 Copyright © 2004, Oracle. All rights reserved. Setting the Output Location Preference 1 2 Changing the Output Location You can send the results that are generated by a SQL statement or iSQL*Plus command to the screen (the default), a file, or another browser window. On the Preferences page: 1. Select an Output Location option. 2. Click the Apply button. Oracle Database 10g: SQL Fundamentals I 1-36 1-36 Copyright © 2004, Oracle. All rights reserved. Summary In this lesson, you should have learned how to: • Write a SELECT statement that: – Returns all rows and columns from a table – Returns specified columns from a table – Uses column aliases to display more descriptive column headings • Use the iSQL*Plus environment to write, save, and execute SQL statements and iSQL*Plus commands SELECT *|{[DISTINCT] column|expression [alias],...} FROM table; SELECT Statement In this lesson, you should have learned how to retrieve data from a database table with the SELECT statement. SELECT *|{[DISTINCT] column [alias],...} FROM table; In the syntax: SELECT is a list of one or more columns * selects all columns DISTINCT suppresses duplicates column|expression selects the named column or the expression alias gives selected columns different headings FROM table specifies the table containing the columns iSQL*Plus iSQL*Plus is an execution environment that you can use to send SQL statements to the database server and to edit and save SQL statements. Statements can be executed from the SQL prompt or from a script file. Oracle Database 10g: SQL Fundamentals I 1-37 1-37 Copyright © 2004, Oracle. All rights reserved. Practice 1: Overview This practice covers the following topics: • Selecting all data from different tables • Describing the structure of tables • Performing arithmetic calculations and specifying column names • Using iSQL*Plus Practice 1: Overview This is the first of many practices in this course. The solutions (if you require them) can be found in Appendix A. Practices are intended to cover all topics that are presented in the corresponding lesson. Note the following location for the lab files: E:\\labs\\SQL1\\labs If you are asked to save any lab files, save them at this location. To start ISQL*Plus, start your browser. You need to enter a URL to access iSQL*Plus. The URL requires the host name, which your instructor will provide. Enter the following command, replacing the host name with the value that your instructor provides: http://<HOSTNAME:5561>/isqlplus In any practice, there may be exercises that are prefaced with the phrases “If you have time” or “If you want an extra challenge.” Work on these exercises only if you have completed all other exercises in the allocated time and would like a further challenge to your skills. Perform the practices slowly and precisely. You can experiment with saving and running command files. If you have any questions at any time, ask your instructor. Oracle Database 10g: SQL Fundamentals I 1-38 Practice 1 Part 1 Test your knowledge: 1. Initiate an iSQL*Plus session using the user ID and password that are provided by the instructor. 2. iSQL*Plus commands access the database. True/False 3. The following SELECT statement executes successfully: SELECT last_name, job_id, salary AS Sal FROM employees; True/False 4. The following SELECT statement executes successfully: SELECT * FROM job_grades; True/False 5. There are four coding errors in the following statement. Can you identify them? SELECT employee_id, last_name sal x 12 ANNUAL SALARY FROM employees; Part 2 Note the following location for the lab files: E:\\labs\\SQL1\\labs If you are asked to save any lab files, save them at this location. To start ISQL*Plus, start your browser. You need to enter a URL to access iSQL*Plus. The URL requires the host name, which your instructor will provide. Enter the following command, replacing the host name with the value that your instructor provides: http://<HOSTNAME:5561>/isqlplus You have been hired as a SQL programmer for Acme Corporation. Your first task is to create some reports based on data from the Human Resources tables. 6. Your first task is to determine the structure of the DEPARTMENTS table and its contents. Oracle Database 10g: SQL Fundamentals I 1-39 Practice 1 (continued) 7. You need to determine the structure of the EMPLOYEES table. The HR department wants a query to display the last name, job code, hire date, and employee number for each employee, with employee number appearing first. Provide an alias STARTDATE for the HIRE_DATE column. Save your SQL statement to a file named lab_01_07.sql so that you can disperse this file to the HR department. Oracle Database 10g: SQL Fundamentals I 1-40 Practice 1 (continued) 8. Test your query in the lab_01_07.sql file to ensure that it runs correctly. 9. The HR department needs a query to display all unique job codes from the EMPLOYEES table. … Oracle Database 10g: SQL Fundamentals I 1-41 Practice 1 (continued) Part 3 If you have time, complete the following exercises: 10. The HR department wants more descriptive column headings for its report on employees. Copy the statement from lab_01_07.sql to the iSQL*Plus text box. Name the column headings Emp #, Employee, Job, and Hire Date, respectively. Then run your query again. 11. The HR department has requested a report of all employees and their job IDs. Display the last name concatenated with the job ID (separated by a comma and space) and name the column Employee and Title. … … Oracle Database 10g: SQL Fundamentals I 1-42 Practice 1 (continued) If you want an extra challenge, complete the following exercise: 12. To familiarize yourself with the data in the EMPLOYEES table, create a query to display all the data from that table. Separate each column output by a comma. Name the column title THE_OUTPUT. … Copyright © 2004, Oracle. All rights reserved. Restricting and Sorting Data Oracle Database 10g: SQL Fundamentals I 2-2 2-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Limit the rows that are retrieved by a query • Sort the rows that are retrieved by a query • Use ampersand substitution in iSQL*Plus to restrict and sort output at run time Objectives When retrieving data from the database, you may need to do the following: • Restrict the rows of data that are displayed • Specify the order in which the rows are displayed This lesson explains the SQL statements that you use to perform these actions. Oracle Database 10g: SQL Fundamentals I 2-3 2-3 Copyright © 2004, Oracle. All rights reserved. Limiting Rows Using a Selection “retrieve all employees in department 90” EMPLOYEES … Oracle Database 10g: SQL Fundamentals I 2-4 2-4 Copyright © 2004, Oracle. All rights reserved. Limiting the Rows That Are Selected • Restrict the rows that are returned by using the WHERE clause: • The WHERE clause follows the FROM clause. SELECT *|{[DISTINCT] column|expression [alias],...} FROM table [WHERE condition(s)]; Limiting the Rows That Are Selected You can restrict the rows that are returned from the query by using the WHERE clause. A WHERE clause contains a condition that must be met, and it directly follows the FROM clause. If the condition is true, the row meeting the condition is returned. In the syntax: WHERE restricts the query to rows that meet a condition condition is composed of column names, expressions, constants, and a comparison operator The WHERE clause can compare values in columns, literal values, arithmetic expressions, or functions. It consists of three elements: • Column name • Comparison condition • Column name, constant, or list of values Oracle Database 10g: SQL Fundamentals I 2-5 2-5 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, last_name, job_id, department_id FROM employees WHERE department_id = 90 ; Using the WHERE Clause Using the WHERE Clause In the example, the SELECT statement retrieves the employee ID, name, job ID, and department number of all employees who are in department 90. Oracle Database 10g: SQL Fundamentals I 2-6 2-6 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, job_id, department_id FROM employees WHERE last_name = 'Whalen' ; Character Strings and Dates • Character strings and date values are enclosed by single quotation marks. • Character values are case-sensitive, and date values are format-sensitive. • The default date format is DD-MON-RR. Character Strings and Dates Character strings and dates in the WHERE clause must be enclosed by single quotation marks (''). Number constants, however, should not be enclosed by single quotation marks. All character searches are case-sensitive. In the following example, no rows are returned because the EMPLOYEES table stores all the last names in mixed case: SELECT last_name, job_id, department_id FROM employees WHERE last_name = 'WHALEN'; Oracle databases store dates in an internal numeric format, representing the century, year, month, day, hours, minutes, and seconds. The default date display is DD-MON-RR. Note: For details about the RR format and about changing the default date format, see the next lesson. Oracle Database 10g: SQL Fundamentals I 2-7 2-7 Copyright © 2004, Oracle. All rights reserved. Comparison Conditions Not equal to<> Between two values (inclusive) BETWEEN ...AND... Match any of a list of values IN(set) Match a character pattern LIKE Is a null value IS NULL Less than< Less than or equal to<= Greater than or equal to>= Greater than> Equal to= MeaningOperator Comparison Conditions Comparison conditions are used in conditions that compare one expression to another value or expression. They are used in the WHERE clause in the following format: Syntax ... WHERE expr operator value Example ... WHERE hire_date = '01-JAN-95' ... WHERE salary >= 6000 ... WHERE last_name = 'Smith' An alias cannot be used in the WHERE clause. Note: The symbols != and ^= can also represent the not equal to condition. Oracle Database 10g: SQL Fundamentals I 2-8 2-8 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, salary FROM employees WHERE salary <= 3000 ; Using Comparison Conditions Using Comparison Conditions In the example, the SELECT statement retrieves the last name and salary from the EMPLOYEES table for any employee whose salary is less than or equal to $3,000. Note that there is an explicit value supplied to the WHERE clause. The explicit value of 3000 is compared to the salary value in the SALARY column of the EMPLOYEES table. Oracle Database 10g: SQL Fundamentals I 2-9 2-9 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, salary FROM employees WHERE salary BETWEEN 2500 AND 3500 ; Using the BETWEEN Condition Use the BETWEEN condition to display rows based on a range of values: Lower limit Upper limit Using the BETWEEN Condition You can display rows based on a range of values using the BETWEEN range condition. The range that you specify contains a lower limit and an upper limit. The SELECT statement in the slide returns rows from the EMPLOYEES table for any employee whose salary is between $2,500 and $3,500. Values that are specified with the BETWEEN condition are inclusive. You must specify the lower limit first. You can also use the BETWEEN condition on character values: SELECT last_name FROM employees WHERE last_name BETWEEN 'King' AND 'Smith'; Oracle Database 10g: SQL Fundamentals I 2-10 2-10 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, last_name, salary, manager_id FROM employees WHERE manager_id IN (100, 101, 201) ; Using the IN Condition Use the IN membership condition to test for values in a list: Oracle Database 10g: SQL Fundamentals I 2-11 Using the LIKE Condition You may not always know the exact value to search for. You can select rows that match a character pattern by using the LIKE condition. The character pattern–matching operation is referred to as a wildcard search. Two symbols can be used to construct the search string. The SELECT statement in the slide returns the employee first name from the EMPLOYEES table for any employee whose first name begins with the letter S. Note the uppercase S. Names beginning with an s are not returned. The LIKE condition can be used as a shortcut for some BETWEEN comparisons. The following example displays the last names and hire dates of all employees who joined between January 1995 and December 1995: SELECT last_name, hire_date FROM employees WHERE hire_date LIKE '%95'; Symbol Description % Represents any sequence of zero or more characters _ Represents any single character 2-11 Copyright © 2004, Oracle. All rights reserved. SELECT first_name FROM employees WHERE first_name LIKE 'S%' ; Using the LIKE Condition • Use the LIKE condition to perform wildcard searches of valid search string values. • Search conditions can contain either literal characters or numbers: – % denotes zero or many characters. – _ denotes one character. Oracle Database 10g: SQL Fundamentals I 2-12 2-12 Copyright © 2004, Oracle. All rights reserved. • You can combine pattern-matching characters: • You can use the ESCAPE identifier to search for the actual % and _ symbols. SELECT last_name FROM employees WHERE last_name LIKE '_o%' ; Using the LIKE Condition Combining Wildcard Characters The % and _ symbols can be used in any combination with literal characters. The example in the slide displays the names of all employees whose last names have the letter o as the second character. ESCAPE Option When you need to have an exact match for the actual % and _ characters, use the ESCAPE option. This option specifies what the escape character is. If you want to search for strings that contain ‘SA_’, you can use the following SQL statement: SELECT employee_id, last_name, job_id FROM employees WHERE job_id LIKE '%SA\\_%' ESCAPE '\\'; The ESCAPE option identifies the backslash (\\) as the escape character. In the pattern, the escape character precedes the underscore (_). This causes the Oracle Server to interpret the underscore literally. Oracle Database 10g: SQL Fundamentals I 2-13 2-13 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, manager_id FROM employees WHERE manager_id IS NULL ; Using the NULL Conditions Test for nulls with the IS NULL operator. Using the NULL Conditions The NULL conditions include the IS NULL condition and the IS NOT NULL condition. The IS NULL condition tests for nulls. A null value means the value is unavailable, unassigned, unknown, or inapplicable. Therefore, you cannot test with = because a null cannot be equal or unequal to any value. The slide example retrieves the last names and managers of all employees who do not have a manager. Here is another example: To display last name, job ID, and commission for all employees who are not entitled to receive a commission, use the following SQL statement: SELECT last_name, job_id, commission_pct FROM employees WHERE commission_pct IS NULL; … Oracle Database 10g: SQL Fundamentals I 2-14 2-14 Copyright © 2004, Oracle. All rights reserved. Logical Conditions Returns TRUE if the following condition is false NOT Returns TRUE if either component condition is true OR Returns TRUE if both component conditions are true AND MeaningOperator Logical Conditions A logical condition combines the result of two component conditions to produce a single result based on those conditions, or it inverts the result of a single condition. A row is returned only if the overall result of the condition is true. Three logical operators are available in SQL: • AND • OR • NOT All the examples so far have specified only one condition in the WHERE clause. You can use several conditions in one WHERE clause using the AND and OR operators. Oracle Database 10g: SQL Fundamentals I 2-15 2-15 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, last_name, job_id, salary FROM employees WHERE salary >=10000 AND job_id LIKE '%MAN%' ; Using the AND Operator AND requires both conditions to be true: Using the AND Operator In the example, both conditions must be true for any record to be selected. Therefore, only employees who have a job title that contains the string ‘MAN’ and earn $10,000 or more are selected. All character searches are case-sensitive. No rows are returned if ‘MAN’ is not uppercase. Character strings must be enclosed by quotation marks. AND Truth Table The following table shows the results of combining two expressions with AND: AND TRUE FALSE NULL TRUE TRUE FALSE NULL FALSE FALSE FALSE FALSE NULL NULL FALSE NULL Oracle Database 10g: SQL Fundamentals I 2-16 2-16 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, last_name, job_id, salary FROM employees WHERE salary >= 10000 OR job_id LIKE '%MAN%' ; Using the OR Operator OR requires either condition to be true: Oracle Database 10g: SQL Fundamentals I 2-17 2-17 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, job_id FROM employees WHERE job_id NOT IN ('IT_PROG', 'ST_CLERK', 'SA_REP') ; Using the NOT Operator Oracle Database 10g: SQL Fundamentals I 2-18 2-18 Copyright © 2004, Oracle. All rights reserved. Rules of Precedence You can use parentheses to override rules of precedence. Not equal to6 NOT logical condition7 AND logical condition8 OR logical condition9 IS [NOT] NULL, LIKE, [NOT] IN4 [NOT] BETWEEN5 Comparison conditions3 Concatenation operator2 Arithmetic operators1 MeaningOperator Rules of Precedence The rules of precedence determine the order in which expressions are evaluated and calculated. The table lists the default order of precedence. You can override the default order by using parentheses around the expressions that you want to calculate first. Oracle Database 10g: SQL Fundamentals I 2-19 2-19 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, job_id, salary FROM employees WHERE job_id = 'SA_REP' OR job_id = 'AD_PRES' AND salary > 15000; Rules of Precedence SELECT last_name, job_id, salary FROM employees WHERE (job_id = 'SA_REP' OR job_id = 'AD_PRES') AND salary > 15000; 1 2 1. Example of the Precedence of the AND Operator In this example, there are two conditions: • The first condition is that the job ID is AD_PRES and the salary is greater than $15,000. • The second condition is that the job ID is SA_REP. Therefore, the SELECT statement reads as follows: “Select the row if an employee is a president and earns more than $15,000, or if the employee is a sales representative.” 2. Example of Using Parentheses In this example, there are two conditions: • The first condition is that the job ID is AD_PRES or SA_REP. • The second condition is that salary is greater than $15,000. Therefore, the SELECT statement reads as follows: “Select the row if an employee is a president or a sales representative, and if the employee earns more than $15,000.” Oracle Database 10g: SQL Fundamentals I 2-20 2-20 Copyright © 2004, Oracle. All rights reserved. Using the ORDER BY Clause • Sort retrieved rows with the ORDER BY clause: – ASC: ascending order, default – DESC: descending order • The ORDER BY clause comes last in the SELECT statement: SELECT last_name, job_id, department_id, hire_date FROM employees ORDER BY hire_date ; … Oracle Database 10g: SQL Fundamentals I 2-21 2-21 Copyright © 2004, Oracle. All rights reserved. Sorting • Sorting in descending order: • Sorting by column alias: • Sorting by multiple columns: SELECT last_name, job_id, department_id, hire_date FROM employees ORDER BY hire_date DESC ; 1 SELECT employee_id, last_name, salary*12 annsal FROM employees ORDER BY annsal ; 2 SELECT last_name, department_id, salary FROM employees ORDER BY department_id, salary DESC; 3 Default Ordering of Data The default sort order is ascending: • Numeric values are displayed with the lowest values first (for example, 1 to 999). • Date values are displayed with the earliest value first (for example, 01-JAN-92 before 01-JAN-95). • Character values are displayed in alphabetical order (for example, A first and Z last). • Null values are displayed last for ascending sequences and first for descending sequences. • You can sort by a column that is not in the SELECT list. Examples 1. To reverse the order in which rows are displayed, specify the DESC keyword after the column name in the ORDER BY clause. The slide example sorts the result by the most recently hired employee. 2. You can use a column alias in the ORDER BY clause. The slide example sorts the data by annual salary. 3. You can sort query results by more than one column. The sort limit is the number of columns in the given table. In the ORDER BY clause, specify the columns and separate the column names using commas. If you want to reverse the order of a column, specify DESC after its name. Oracle Database 10g: SQL Fundamentals I 2-22 2-22 Copyright © 2004, Oracle. All rights reserved. Substitution Variables Oracle Database 10g: SQL Fundamentals I 2-23 2-23 Copyright © 2004, Oracle. All rights reserved. Substitution Variables • Use iSQL*Plus substitution variables to: – Temporarily store values with single-ampersand (&) and double-ampersand (&&) substitution • Use substitution variables to supplement the following: – WHERE conditions – ORDER BY clauses – Column expressions – Table names – Entire SELECT statements Substitution Variables (continued) In iSQL*Plus, you can use single-ampersand (&) substitution variables to temporarily store values. You can predefine variables in iSQL*Plus by using the DEFINE command. DEFINE creates and assigns a value to a variable. Examples of Restricted Ranges of Data • Reporting figures only for the current quarter or specified date range • Reporting on data relevant only to the user requesting the report • Displaying personnel only within a given department Other Interactive Effects Interactive effects are not restricted to direct user interaction with the WHERE clause. The same principles can be used to achieve other goals, such as: • Obtaining input values from a file rather than from a person • Passing values from one SQL statement to another iSQL*Plus does not support validation checks (except for data type) on user input. Oracle Database 10g: SQL Fundamentals I 2-24 2-24 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, last_name, salary, department_id FROM employees WHERE employee_id = &employee_num ; Using the & Substitution Variable Use a variable prefixed with an ampersand (&) to prompt the user for a value: Single-Ampersand Substitution Variable When running a report, users often want to restrict the data that is returned dynamically. iSQL*Plus provides this flexibility with user variables. Use an ampersand (&) to identify each variable in your SQL statement. You do not need to define the value of each variable. The example in the slide creates an iSQL*Plus substitution variable for an employee number. When the statement is executed, iSQL*Plus prompts the user for an employee number and then displays the employee number, last name, salary, and department number for that employee. With the single ampersand, the user is prompted every time the command is executed, if the variable does not exist. Notation Description &user_variable Indicates a variable in a SQL statement; if the variable does not exist, iSQL*Plus prompts the user for a value (iSQL*Plus discards a new variable once it is used.) Oracle Database 10g: SQL Fundamentals I 2-25 2-25 Copyright © 2004, Oracle. All rights reserved. Using the & Substitution Variable 101 1 2 Single-Ampersand Substitution Variable (continued) When iSQL*Plus detects that the SQL statement contains an ampersand, you are prompted to enter a value for the substitution variable that is named in the SQL statement. After you enter a value and click the Continue button, the results are displayed in the output area of your iSQL*Plus session. Oracle Database 10g: SQL Fundamentals I 2-26 2-26 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, department_id, salary*12 FROM employees WHERE job_id = '&job_title' ; Character and Date Values with Substitution Variables Use single quotation marks for date and character values: Specifying Character and Date Values with Substitution Variables In a WHERE clause, date and character values must be enclosed by single quotation marks. The same rule applies to the substitution variables. Enclose the variable in single quotation marks within the SQL statement itself. The slide shows a query to retrieve the employee names, department numbers, and annual salaries of all employees based on the job title value of the iSQL*Plus substitution variable. Oracle Database 10g: SQL Fundamentals I 2-27 2-27 Copyright © 2004, Oracle. All rights reserved. Specifying Column Names, Expressions, and Text SELECT employee_id, last_name, job_id,&column_name FROM employees WHERE &condition ORDER BY &order_column ; salary salary > 15000 last_name Specifying Column Names, Expressions, and Text Not only can you use the substitution variables in the WHERE clause of a SQL statement, but these variables can also be used to substitute for column names, expressions, or text. Example The slide example displays the employee number, name, job title, and any other column that is specified by the user at run time, from the EMPLOYEES table. For each substitution variable in the SELECT statement, you are prompted to enter a value, and you then click the Continue button to proceed. If you do not enter a value for the substitution variable, you get an error when you execute the preceding statement. Note: A substitution variable can be used anywhere in the SELECT statement, except as the first word entered at the command prompt. Oracle Database 10g: SQL Fundamentals I 2-28 2-28 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, last_name, job_id, &&column_name FROM employees ORDER BY &column_name ; … Oracle Database 10g: SQL Fundamentals I 2-29 2-29 Copyright © 2004, Oracle. All rights reserved. Using the iSQL*Plus DEFINE Command • Use the iSQL*Plus DEFINE command to create and assign a value to a variable. • Use the iSQL*Plus UNDEFINE command to remove a variable. DEFINE employee_num = 200 SELECT employee_id, last_name, salary, department_id FROM employees WHERE employee_id = &employee_num ; UNDEFINE employee_num Using the iSQL*Plus DEFINE Command The example shown creates an iSQL*Plus substitution variable for an employee number by using the DEFINE command. At run time, this displays the employee number, name, salary, and department number for that employee. Because the variable is created using the iSQL*Plus DEFINE command, the user is not prompted to enter a value for the employee number. Instead, the defined variable value is automatically substituted in the SELECT statement. The EMPLOYEE_NUM substitution variable is present in the session until the user undefines it or exits the iSQL*Plus session. Oracle Database 10g: SQL Fundamentals I 2-30 2-30 Copyright © 2004, Oracle. All rights reserved. old 3: WHERE employee_id = &employee_num new 3: WHERE employee_id = 200 SET VERIFY ON SELECT employee_id, last_name, salary, department_id FROM employees WHERE employee_id = &employee_num; Using the VERIFY Command Use the VERIFY command to toggle the display of the substitution variable, both before and after iSQL*Plus replaces substitution variables with values: Using the VERIFY Command To confirm the changes in the SQL statement, use the iSQL*Plus VERIFY command. Setting SET VERIFY ON forces iSQL*Plus to display the text of a command before and after it replaces substitution variables with values. The example in the slide displays the old as well as the new value of the EMPLOYEE_ID column. iSQL*Plus System Variables iSQL*Plus uses various system variables that control the working environment. One of those variables is VERIFY. To obtain a complete list of all system variables, you can issue the SHOW ALL command. Oracle Database 10g: SQL Fundamentals I 2-31 2-31 Copyright © 2004, Oracle. All rights reserved. SELECT *|{[DISTINCT] column|expression [alias],...} FROM table [WHERE condition(s)] [ORDER BY {column, expr, alias} [ASC|DESC]] ; Summary In this lesson, you should have learned how to: • Use the WHERE clause to restrict rows of output: – Use the comparison conditions – Use the BETWEEN, IN, LIKE, and NULL conditions – Apply the logical AND, OR, and NOT operators • Use the ORDER BY clause to sort rows of output: • Use ampersand substitution in iSQL*Plus to restrict and sort output at run time Summary In this lesson, you should have learned about restricting and sorting rows that are returned by the SELECT statement. You should also have learned how to implement various operators and conditions. By using the iSQL*Plus substitution variables, you can add flexibility to your SQL statements. You can query users at run time and enable them to specify criteria. Oracle Database 10g: SQL Fundamentals I 2-32 2-32 Copyright © 2004, Oracle. All rights reserved. Practice 2: Overview This practice covers the following topics: • Selecting data and changing the order of the rows that are displayed • Restricting rows by using the WHERE clause • Sorting rows by using the ORDER BY clause • Using substitution variables to add flexibility to your SQL SELECT statements Practice 2: Overview In this practice, you build more reports, including statements that use the WHERE clause and the ORDER BY clause. You make the SQL statements more reusable and generic by including ampersand substitution. Oracle Database 10g: SQL Fundamentals I 2-33 Practice 2 The HR department needs your assistance with creating some queries. 1. Due to budget issues, the HR department needs a report that displays the last name and salary of employees who earn more than $12,000. Place your SQL statement in a text file named lab_02_01.sql. Run your query. 2. Create a report that displays the last name and department number for employee number 176. 3. The HR departments needs to find high-salary and low-salary employees. Modify lab_02_01.sql to display the last name and salary for any employee whose salary is not in the range of $5,000 to $12,000. Place your SQL statement in a text file named lab_02_03.sql. Oracle Database 10g: SQL Fundamentals I 2-34 Practice 2 (continued) 4. Create a report to display the last name, job ID, and start date for the employees with the last names of Matos and Taylor. Order the query in ascending order by start date. 5. Display the last name and department number of all employees in departments 20 or 50 in ascending alphabetical order by name. 6. Modify lab_02_03.sql to display the last name and salary of employees who earn between $5,000 and $12,000 and are in department 20 or 50. Label the columns Employee and Monthly Salary, respectively. Resave lab_02_03.sql as lab_02_06.sql. Run the statement in lab_02_06.sql. Oracle Database 10g: SQL Fundamentals I 2-35 Practice 2 (continued) 7. The HR department needs a report that displays the last name and hire date for all employees who were hired in 1994. 8. Create a report to display the last name and job title of all employees who do not have a manager. 9. Create a report to display the last name, salary, and commission of all employees who earn commissions. Sort data in descending order of salary and commissions. 10. Members of the HR department want to have more flexibility with the queries that you are writing. They would like a report that displays the last name and salary of employees who earn more than an amount that the user specifies after a prompt. (You can use the query that you created in practice exercise 1 and modify it.) Save this query to a file named lab_02_10.sql. If you enter 12000 when prompted, the report displays the following results: Oracle Database 10g: SQL Fundamentals I 2-36 Practice 2 (continued) 11. The HR department wants to run reports based on a manager. Create a query that prompts the user for a manager ID and generates the employee ID, last name, salary, and department for that manager’s employees. The HR department wants the ability to sort the report on a selected column. You can test the data with the following values: manager ID = 103, sorted by employee last name: manager ID = 201, sorted by salary: manager ID = 124, sorted by employee ID: Oracle Database 10g: SQL Fundamentals I 2-37 Practice 2 (continued) If you have time, complete the following exercises: 12. Display all employee last names in which the third letter of the name is a. 13. Display the last name of all employees who have both an a and an e in their last name. If you want an extra challenge, complete the following exercises: 14. Display the last name, job, and salary for all employees whose job is sales representative or stock clerk and whose salary is not equal to $2,500, $3,500, or $7,000. 15. Modify lab_02_06.sql to display the last name, salary, and commission for all employees whose commission amount is 20%. Resave lab_02_06.sql as lab_02_15.sql. Rerun the statement in lab_02_15.sql. Copyright © 2004, Oracle. All rights reserved. Using Single-Row Functions to Customize Output Oracle Database 10g: SQL Fundamentals I 3-2 3-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Describe various types of functions that are available in SQL • Use character, number, and date functions in SELECT statements • Describe the use of conversion functions Objectives Functions make the basic query block more powerful, and they are used to manipulate data values. This is the first of two lessons that explore functions. It focuses on single-row character, number, and date functions, as well as those functions that convert data from one type to another (for example, conversion from character data to numeric data). Oracle Database 10g: SQL Fundamentals I 3-3 3-3 Copyright © 2004, Oracle. All rights reserved. SQL Functions Function Input arg 1 arg 2 arg n Function performs action Output Result value SQL Functions Functions are a very powerful feature of SQL. They can be used to do the following: • Perform calculations on data • Modify individual data items • Manipulate output for groups of rows • Format dates and numbers for display • Convert column data types SQL functions sometimes take arguments and always return a value. Note: Most of the functions that are described in this lesson are specific to the Oracle version of SQL. Oracle Database 10g: SQL Fundamentals I 3-4 3-4 Copyright © 2004, Oracle. All rights reserved. Two Types of SQL Functions Single-row functions Multiple-row functions Return one result per row Return one result per set of rows Functions SQL Functions (continued) There are two types of functions: • Single-row functions • Multiple-row functions Single-Row Functions These functions operate on single rows only and return one result per row. There are different types of single-row functions. This lesson covers the following ones: • Character • Number • Date • Conversion • General Multiple-Row Functions Functions can manipulate groups of rows to give one result per group of rows. These functions are also known as group functions (covered in a later lesson). Note: For more information and a complete list of available functions and their syntax, see Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 3-5 3-5 Copyright © 2004, Oracle. All rights reserved. Single-Row Functions Single-row functions: • Manipulate data items • Accept arguments and return one value • Act on each row that is returned • Return one result per row • May modify the data type • Can be nested • Accept arguments that can be a column or an expression function_name [(arg1, arg2,...)] Single-Row Functions Single-row functions are used to manipulate data items. They accept one or more arguments and return one value for each row that is returned by the query. An argument can be one of the following: • User-supplied constant • Variable value • Column name • Expression Features of single-row functions include: • Acting on each row that is returned in the query • Returning one result per row • Possibly returning a data value of a different type than the one that is referenced • Possibly expecting one or more arguments • Can be used in SELECT, WHERE, and ORDER BY clauses; can be nested In the syntax: function_name is the name of the function arg1, arg2 is any argument to be used by the function. This can be represented by a column name or expression. Oracle Database 10g: SQL Fundamentals I 3-6 3-6 Copyright © 2004, Oracle. All rights reserved. Single-Row Functions Conversion Character Number Date General Single-row functions Single-Row Functions (continued) This lesson covers the following single-row functions: • Character functions:::: Αccept character input and can return both character and number values • Number functions:::: Accept numeric input and return numeric values • Date functions:::: Operate on values of the DATE data type (All date functions return a value of DATE data type except the MONTHS_BETWEEN function, which returns a number.) • Conversion functions:::: Convert a value from one data type to another • General functions: - NVL - NVL2 - NULLIF - COALESCE - CASE - DECODE Oracle Database 10g: SQL Fundamentals I 3-7 Function Purpose LOWER(column|expression) Converts alpha character values to lowercase UPPER(column|expression) Converts alpha character values to uppercase INITCAP(column|expression) Converts alpha character values to uppercase for the first letter of each word; all other letters in lowercase CONCAT(column1|expression1, column2|expression2) Concatenates the first character value to the second character value; equivalent to concatenation operator (||) SUBSTR(column|expression,m[ ,n]) Returns specified characters from character value starting at character position m, n characters long (If m is negative, the count starts from the end of the character value. If n is omitted, all characters to the end of the string are returned.) 3-7 Copyright © 2004, Oracle. All rights reserved. Character Functions Character functions LOWER UPPER INITCAP CONCAT SUBSTR LENGTH INSTR LPAD | RPAD TRIM REPLACE Case-manipulation functions Character-manipulation functions Character Functions Single-row character functions accept character data as input and can return both character and numeric values. Character functions can be divided into the following: • Case-manipulation functions • Character-manipulation functions Note: The functions discussed in this lesson are only some of the available functions. Oracle Database 10g: SQL Fundamentals I 3-8 Function Purpose LENGTH(column|expression) Returns the number of characters in the expression INSTR(column|expression, ’string’, [,m], [n] ) Returns the numeric position of a named string. Optionally, you can provide a position m to start searching, and the occurrence n of the string. m and n default to 1, meaning start the search at the beginning of the search and report the first occurrence. LPAD(column|expression, n, 'string') RPAD(column|expression, n, 'string') Pads the character value right-justified to a total width of n character positions Pads the character value left-justified to a total width of n character positions TRIM(leading|trailing|both, trim_character FROM trim_source) Enables you to trim heading or trailing characters (or both) from a character string. If trim_character or trim_source is a character literal, you must enclose it in single quotation marks. This is a feature that is available in Oracle8i and later versions. REPLACE(text, search_string, replacement_string) Searches a text expression for a character string and, if found, replaces it with a specified replacement string Character Functions (continued) Oracle Database 10g: SQL Fundamentals I 3-9 3-9 Copyright © 2004, Oracle. All rights reserved. Case-Manipulation Functions These functions convert case for character strings: sql courseLOWER('SQL Course') Sql CourseINITCAP('SQL Course') SQL COURSEUPPER('SQL Course') ResultFunction Case-Manipulation Functions LOWER, UPPER, and INITCAP are the three case-conversion functions. • LOWER:::: Converts mixed-case or uppercase character strings to lowercase • UPPER:::: Converts mixed-case or lowercase character strings to uppercase • INITCAP:::: Converts the first letter of each word to uppercase and remaining letters to lowercase SELECT 'The job id for '||UPPER(last_name)||' is ' ||LOWER(job_id) AS \"EMPLOYEE DETAILS\" FROM employees; … Oracle Database 10g: SQL Fundamentals I 3-10 3-10 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, last_name, department_id FROM employees WHERE LOWER(last_name) = 'higgins'; Using Case-Manipulation Functions Display the employee number, name, and department number for employee Higgins: SELECT employee_id, last_name, department_id FROM employees WHERE last_name = 'higgins'; no rows selected Using Case-Manipulation Functions The slide example displays the employee number, name, and department number of employee Higgins. The WHERE clause of the first SQL statement specifies the employee name as higgins. Because all the data in the EMPLOYEES table is stored in proper case, the name higgins does not find a match in the table, and no rows are selected. The WHERE clause of the second SQL statement specifies that the employee name in the EMPLOYEES table is compared to higgins, converting the LAST_NAME column to lowercase for comparison purposes. Since both names are now lowercase, a match is found and one row is selected. The WHERE clause can be rewritten in the following manner to produce the same result: ...WHERE last_name = 'Higgins' The name in the output appears as it was stored in the database. To display the name with only the first letter in uppercase, use the UPPER function in the SELECT statement. SELECT employee_id, UPPER(last_name), department_id FROM employees WHERE INITCAP(last_name) = 'Higgins'; Oracle Database 10g: SQL Fundamentals I 3-11 3-11 Copyright © 2004, Oracle. All rights reserved. Character-Manipulation Functions These functions manipulate character strings: BLACK and BLUE REPLACE ('JACK and JUE','J','BL') 10LENGTH('HelloWorld') 6INSTR('HelloWorld', 'W') *****24000LPAD(salary,10,'*') 24000*****RPAD(salary, 10, '*') HelloWorldCONCAT('Hello', 'World') elloWorldTRIM('H' FROM 'HelloWorld') HelloSUBSTR('HelloWorld',1,5) ResultFunction Character-Manipulation Functions CONCAT, SUBSTR, LENGTH, INSTR, LPAD, RPAD, and TRIM are the character- manipulation functions that are covered in this lesson. • CONCAT:::: Joins values together (You are limited to using two parameters with CONCAT.) • SUBSTR:::: Extracts a string of determined length • LENGTH:::: Shows the length of a string as a numeric value • INSTR:::: Finds the numeric position of a named character • LPAD:::: Pads the character value right-justified • RPAD: Pads the character value left-justified • TRIM: Trims heading or trailing characters (or both) from a character string (If trim_character or trim_source is a character literal, you must enclose it in single quotation marks.) Note: You can use functions such as UPPER and LOWER with ampersand substitution. For example, use UPPER('&job_title') so that the user does not have to enter the job title in a specific case. Oracle Database 10g: SQL Fundamentals I 3-12 3-12 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, CONCAT(first_name, last_name) NAME, job_id, LENGTH (last_name), INSTR(last_name, 'a') \"Contains 'a'?\" FROM employees WHERE SUBSTR(job_id, 4) = 'REP'; Using the Character-Manipulation Functions 2 31 2 1 3 Using the Character-Manipulation Functions The slide example displays employee first names and last names joined together, the length of the employee last name, and the numeric position of the letter a in the employee last name for all employees who have the string REP contained in the job ID starting at the fourth position of the job ID. Example Modify the SQL statement in the slide to display the data for those employees whose last names end with the letter n. SELECT employee_id, CONCAT(first_name, last_name) NAME, LENGTH (last_name), INSTR(last_name, 'a') \"Contains 'a'?\" FROM employees WHERE SUBSTR(last_name, -1, 1) = 'n'; Oracle Database 10g: SQL Fundamentals I 3-13 3-13 Copyright © 2004, Oracle. All rights reserved. Number Functions • ROUND: Rounds value to specified decimal • TRUNC: Truncates value to specified decimal • MOD: Returns remainder of division 100MOD(1600, 300) 45.93ROUND(45.926, 2) 45.92TRUNC(45.926, 2) ResultFunction Number Functions Number functions accept numeric input and return numeric values. This section describes some of the number functions. Note: This list contains only some of the available number functions. For more information, see “Number Functions” in Oracle SQL Reference. Function Purpose ROUND(column|expression, n) Rounds the column, expression, or value to n decimal places or, if n is omitted, no decimal places (If n is negative, numbers to left of the decimal point are rounded.) TRUNC(column|expression, n) Truncates the column, expression, or value to n decimal places or, if n is omitted, n defaults to zero MOD(m,n) Returns the remainder of m divided by n Oracle Database 10g: SQL Fundamentals I 3-14 3-14 Copyright © 2004, Oracle. All rights reserved. SELECT ROUND(45.923,2), ROUND(45.923,0), ROUND(45.923,-1) FROM DUAL; Using the ROUND Function DUAL is a dummy table that you can use to view results from functions and calculations. 3 31 2 1 2 ROUND Function The ROUND function rounds the column, expression, or value to n decimal places. If the second argument is 0 or is missing, the value is rounded to zero decimal places. If the second argument is 2, the value is rounded to two decimal places. Conversely, if the second argument is –2, the value is rounded to two decimal places to the left (rounded to the nearest unit of 10). The ROUND function can also be used with date functions. You will see examples later in this lesson. DUAL Table The DUAL table is owned by the user SYS and can be accessed by all users. It contains one column, DUMMY, and one row with the value X. The DUAL table is useful when you want to return a value once only (for example, the value of a constant, pseudocolumn, or expression that is not derived from a table with user data). The DUAL table is generally used for SELECT clause syntax completeness, because both SELECT and FROM clauses are mandatory, and several calculations do not need to select from actual tables. Oracle Database 10g: SQL Fundamentals I 3-15 3-15 Copyright © 2004, Oracle. All rights reserved. Using the TRUNC Function SELECT ROUND(45.923,2), ROUND(45.923), ROUND(45.923,-1) FROM DUAL; 3 31 2 1 2 TRUNC Function The TRUNC function truncates the column, expression, or value to n decimal places. The TRUNC function works with arguments similar to those of the ROUND function. If the second argument is 0 or is missing, the value is truncated to zero decimal places. If the second argument is 2, the value is truncated to two decimal places. Conversely, if the second argument is –2, the value is truncated to two decimal places to the left. If the second argument is –1, the value is truncated to one decimal place to the left. Like the ROUND function, the TRUNC function can be used with date functions. Oracle Database 10g: SQL Fundamentals I 3-16 3-16 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, salary, MOD(salary, 5000) FROM employees WHERE job_id = 'SA_REP'; Using the MOD Function For all employees with job title of Sales Representative, calculate the remainder of the salary after it is divided by 5,000. MOD Function The MOD function finds the remainder of the first argument divided by the second argument. The slide example calculates the remainder of the salary after dividing it by 5,000 for all employees whose job ID is SA_REP. Note: The MOD function is often used to determine if a value is odd or even. Oracle Database 10g: SQL Fundamentals I 3-17 3-17 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, hire_date FROM employees WHERE hire_date < ''01-FEB-88';'; Working with Dates • The Oracle database stores dates in an internal numeric format: century, year, month, day, hours, minutes, and seconds. • The default date display format is DD-MON-RR. – Enables you to store 21st-century dates in the 20th century by specifying only the last two digits of the year – Enables you to store 20th-century dates in the 21st century in the same way Oracle Date Format The Oracle database stores dates in an internal numeric format, representing the century, year, month, day, hours, minutes, and seconds. The default display and input format for any date is DD-MON-RR. Valid Oracle dates are between January 1, 4712 B.C., and December 31, 9999 A.D. In the example in the slide, the HIRE_DATE column output is displayed in the default format DD-MON-RR. However, dates are not stored in the database in this format. All the components of the date and time are stored. So, although a HIRE_DATE such as 17-JUN-87 is displayed as day, month, and year, there is also time and century information associated with the date. The complete data might be June 17, 1987, 5:10:43 p.m. Oracle Database 10g: SQL Fundamentals I 3-18 Oracle Date Format (continued) This data is stored internally as follows: CENTURY YEAR MONTH DAY HOUR MINUTE SECOND 19 87 06 17 17 10 43 Centuries and the Year 2000 When a record with a date column is inserted into a table, the century information is picked up from the SYSDATE function. However, when the date column is displayed on the screen, the century component is not displayed (by default). The DATE data type always stores year information as a four-digit number internally: two digits for the century and two digits for the year. For example, the Oracle database stores the year as 1987 or 2004, and not just as 87 or 04. Oracle Database 10g: SQL Fundamentals I 3-19 3-19 Copyright © 2004, Oracle. All rights reserved. Working with Dates SYSDATE is a function that returns: • Date • Time SYSDATE Function SYSDATE is a date function that returns the current database server date and time. You can use SYSDATE just as you would use any other column name. For example, you can display the current date by selecting SYSDATE from a table. It is customary to select SYSDATE from a dummy table called DUAL. Example Display the current date using the DUAL table. SELECT SYSDATE FROM DUAL; Oracle Database 10g: SQL Fundamentals I 3-20 3-20 Copyright © 2004, Oracle. All rights reserved. Arithmetic with Dates • Add or subtract a number to or from a date for a resultant date value. • Subtract two dates to find the number of days between those dates. • Add hours to a date by dividing the number of hours by 24. Arithmetic with Dates Because the database stores dates as numbers, you can perform calculations using arithmetic operators such as addition and subtraction. You can add and subtract number constants as well as dates. You can perform the following operations: Operation Result Description date + number Date Adds a number of days to a date date – number Date Subtracts a number of days from a date date – date Number of days Subtracts one date from another date + number/24 Date Adds a number of hours to a date Oracle Database 10g: SQL Fundamentals I 3-21 3-21 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, (SYSDATE-hire_date)/7 AS WEEKS FROM employees WHERE department_id = 90; Using Arithmetic Operators with Dates Arithmetic with Dates (continued) The example in the slide displays the last name and the number of weeks employed for all employees in department 90. It subtracts the date on which the employee was hired from the current date (SYSDATE) and divides the result by 7 to calculate the number of weeks that a worker has been employed. Note: SYSDATE is a SQL function that returns the current date and time. Your results may differ from the example. If a more current date is subtracted from an older date, the difference is a negative number. Oracle Database 10g: SQL Fundamentals I 3-22 3-22 Copyright © 2004, Oracle. All rights reserved. Date Functions Next day of the date specifiedNEXT_DAY Last day of the monthLAST_DAY Round dateROUND Truncate dateTRUNC Number of months between two datesMONTHS_BETWEEN Add calendar months to dateADD_MONTHS ResultFunction Date Functions Date functions operate on Oracle dates. All date functions return a value of DATE data type except MONTHS_BETWEEN, which returns a numeric value. • MONTHS_BETWEEN(date1, date2):::: Finds the number of months between date1 and date2. The result can be positive or negative. If date1 is later than date2, the result is positive; if date1 is earlier than date2, the result is negative. The noninteger part of the result represents a portion of the month. • ADD_MONTHS(date, n):::: Adds n number of calendar months to date. The value of n must be an integer and can be negative. • NEXT_DAY(date, 'char'):::: Finds the date of the next specified day of the week ('char') following date. The value of char may be a number representing a day or a character string. • LAST_DAY(date):::: Finds the date of the last day of the month that contains date • ROUND(date[,'fmt']):::: Returns date rounded to the unit that is specified by the format model fmt. If the format model fmt is omitted, date is rounded to the nearest day. • TRUNC(date[, 'fmt']):::: Returns date with the time portion of the day truncated to the unit that is specified by the format model fmt. If the format model fmt is omitted, date is truncated to the nearest day. This list is a subset of the available date functions. The format models are covered later in this lesson. Examples of format models are month and year. Oracle Database 10g: SQL Fundamentals I 3-23 3-23 Copyright © 2004, Oracle. All rights reserved. Using Date Functions '08-SEP-95'NEXT_DAY ('01-SEP-95','FRIDAY') '28-FEB-95'LAST_DAY ('01-FEB-95') 19.6774194MONTHS_BETWEEN ('01-SEP-95','11-JAN-94') '11-JUL-94'ADD_MONTHS ('11-JAN-94',6) ResultFunction Date Functions (continued) For example, display the employee number, hire date, number of months employed, six- month review date, first Friday after hire date, and last day of the hire month for all employees who have been employed for fewer than 70 months. SELECT employee_id, hire_date, MONTHS_BETWEEN (SYSDATE, hire_date) TENURE, ADD_MONTHS (hire_date, 6) REVIEW, NEXT_DAY (hire_date, 'FRIDAY'), LAST_DAY(hire_date) FROM employees WHERE MONTHS_BETWEEN (SYSDATE, hire_date) < 70; Oracle Database 10g: SQL Fundamentals I 3-24 3-24 Copyright © 2004, Oracle. All rights reserved. Using Date Functions Assume SYSDATE = '25-JUL-03': 01-JUL-03TRUNC(SYSDATE ,'MONTH') 01-JAN-03TRUNC(SYSDATE ,'YEAR') 01-AUG-03ROUND(SYSDATE,'MONTH') 01-JAN-04ROUND(SYSDATE ,'YEAR') ResultFunction Date Functions (continued) The ROUND and TRUNC functions can be used for number and date values. When used with dates, these functions round or truncate to the specified format model. Therefore, you can round dates to the nearest year or month. Example Compare the hire dates for all employees who started in 1997. Display the employee number, hire date, and start month using the ROUND and TRUNC functions. SELECT employee_id, hire_date, ROUND(hire_date, 'MONTH'), TRUNC(hire_date, 'MONTH') FROM employees WHERE hire_date LIKE '%97'; Oracle Database 10g: SQL Fundamentals I 3-25 3-25 Copyright © 2004, Oracle. All rights reserved. Practice 3: Overview of Part 1 This practice covers the following topics: • Writing a query that displays the current date • Creating queries that require the use of numeric, character, and date functions • Performing calculations of years and months of service for an employee Practice 3: Overview of Part 1 Part 1 of this lesson’s practice provides a variety of exercises using different functions that are available for character, number, and date data types. For Part 1, complete questions 1–6 at the end of this lesson. Oracle Database 10g: SQL Fundamentals I 3-26 3-26 Copyright © 2004, Oracle. All rights reserved. Conversion Functions Implicit data type conversion Explicit data type conversion Data type conversion Conversion Functions In addition to Oracle data types, columns of tables in an Oracle database can be defined using ANSI, DB2, and SQL/DS data types. However, the Oracle server internally converts such data types to Oracle data types. In some cases, the Oracle server uses data of one data type where it expects data of a different data type. When this happens, the Oracle server can automatically convert the data to the expected data type. This data type conversion can be done implicitly by the Oracle server or explicitly by the user. Implicit data type conversions work according to the rules that are explained in the next two slides. Explicit data type conversions are done by using the conversion functions. Conversion functions convert a value from one data type to another. Generally, the form of the function names follows the convention data type TO data type. The first data type is the input data type; the second data type is the output. Note: Although implicit data type conversion is available, it is recommended that you do explicit data type conversion to ensure the reliability of your SQL statements. Oracle Database 10g: SQL Fundamentals I 3-27 3-27 Copyright © 2004, Oracle. All rights reserved. Implicit Data Type Conversion For assignments, the Oracle server can automatically convert the following: VARCHAR2NUMBER VARCHAR2DATE NUMBERVARCHAR2 or CHAR DATEVARCHAR2 or CHAR ToFrom Implicit Data Type Conversion The assignment succeeds if the Oracle server can convert the data type of the value used in the assignment to that of the assignment target. For example, the expression hire_date > '01-JAN-90' results in the implicit conversion from the string '01-JAN-90' to a date. Oracle Database 10g: SQL Fundamentals I 3-28 3-28 Copyright © 2004, Oracle. All rights reserved. Implicit Data Type Conversion For expression evaluation, the Oracle Server can automatically convert the following: NUMBERVARCHAR2 or CHAR DATEVARCHAR2 or CHAR ToFrom Implicit Data Type Conversion (continued) In general, the Oracle server uses the rule for expressions when a data type conversion is needed in places that are not covered by a rule for assignment conversions. For example, the expression salary = '20000' results in the implicit conversion of the string '20000' to the number 20000. Note: CHAR to NUMBER conversions succeed only if the character string represents a valid number. Oracle Database 10g: SQL Fundamentals I 3-29 3-29 Copyright © 2004, Oracle. All rights reserved. Explicit Data Type Conversion NUMBER CHARACTER TO_CHAR TO_NUMBER DATE TO_CHAR TO_DATE Explicit Data Type Conversion SQL provides three functions to convert a value from one data type to another: Function Purpose TO_CHAR(number|date,[ fmt], [nlsparams]) Converts a number or date value to a VARCHAR2 character string with format model fmt Number conversion: The nlsparams parameter specifies the following characters, which are returned by number format elements: • Decimal character • Group separator • Local currency symbol • International currency symbol If nlsparams or any other parameter is omitted, this function uses the default parameter values for the session. Oracle Database 10g: SQL Fundamentals I 3-30 3-30 Copyright © 2004, Oracle. All rights reserved. Explicit Data Type Conversion NUMBER CHARACTER TO_CHAR TO_NUMBER DATE TO_CHAR TO_DATE Explicit Data Type Conversion (continued) Function Purpose TO_CHAR(number|date,[ fmt], [nlsparams]) Date conversion: The nlsparams parameter specifies the language in which month and day names and abbreviations are returned. If this parameter is omitted, this function uses the default date languages for the session. TO_NUMBER(char,[fmt], [nlsparams]) Converts a character string containing digits to a number in the format specified by the optional format model fmt. The nlsparams parameter has the same purpose in this function as in the TO_CHAR function for number conversion. TO_DATE(char,[fmt],[nlspara ms]) Converts a character string representing a date to a date value according to the fmt that is specified. If fmt is omitted, the format is DD-MON-YY. The nlsparams parameter has the same purpose in this function as in the TO_CHAR function for date conversion. Oracle Database 10g: SQL Fundamentals I 3-31 Explicit Data Type Conversion (continued) Note: The list of functions mentioned in this lesson includes only some of the available conversion functions. For more information, see “Conversion Functions” in Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 3-32 3-32 Copyright © 2004, Oracle. All rights reserved. Using the TO_CHAR Function with Dates The format model: • Must be enclosed by single quotation marks • Is case-sensitive • Can include any valid date format element • Has an fm element to remove padded blanks or suppress leading zeros • Is separated from the date value by a comma TO_CHAR(date, 'format_model') Displaying a Date in a Specific Format Previously, all Oracle date values were displayed in the DD-MON-YY format. You can use the TO_CHAR function to convert a date from this default format to one that you specify. Guidelines • The format model must be enclosed by single quotation marks and is case-sensitive. • The format model can include any valid date format element. Be sure to separate the date value from the format model by a comma. • The names of days and months in the output are automatically padded with blanks. • To remove padded blanks or to suppress leading zeros, use the fill mode fm element. • You can format the resulting character field with the iSQL*Plus COLUMN command (covered in a later lesson). SELECT employee_id, TO_CHAR(hire_date, 'MM/YY') Month_Hired FROM employees WHERE last_name = 'Higgins'; Oracle Database 10g: SQL Fundamentals I 3-33 3-33 Copyright © 2004, Oracle. All rights reserved. Elements of the Date Format Model Three-letter abbreviation of the day of the week DY Full name of the day of the weekDAY Two-digit value for monthMM Full name of the monthMONTH Three-letter abbreviation of the monthMON Numeric day of the monthDD Full year in numbersYYYY Year spelled out (in English)YEAR ResultElement Oracle Database 10g: SQL Fundamentals I 3-34 Sample Format Elements of Valid Date Formats Element Description SCC or CC Century; server prefixes B.C. date with - Years in dates YYYY or SYYYY Year; server prefixes B.C. date with - YYY or YY or Y Last three, two, or one digits of year Y,YYY Year with comma in this position IYYY, IYY, IY, I Four-, three-, two-, or one-digit year based on the ISO standard SYEAR or YEAR Year spelled out; server prefixes B.C. date with - BC or AD Indicates B.C. or A.D. year B.C. or A.D. Indicates B.C. or A.D. year using periods Q Quarter of year MM Month: two-digit value MONTH Name of month padded with blanks to length of nine characters MON Name of month, three-letter abbreviation RM Roman numeral month WW or W Week of year or month DDD or DD or D Day of year, month, or week DAY Name of day padded with blanks to a length of nine characters DY Name of day; three-letter abbreviation J Julian day; the number of days since December 31, 4713 B.C. Oracle Database 10g: SQL Fundamentals I 3-35 3-35 Copyright © 2004, Oracle. All rights reserved. Elements of the Date Format Model • Time elements format the time portion of the date: • Add character strings by enclosing them in double quotation marks: • Number suffixes spell out numbers: DD \"of\" MONTH 12 of OCTOBER ddspth fourteenth HH24:MI:SS AM 15:45:32 PM Date Format Elements: Time Formats Use the formats that are listed in the following tables to display time information and literals and to change numerals to spelled numbers. Element Description AM or PM Meridian indicator A.M. or P.M. Meridian indicator with periods HH or HH12 or HH24 Hour of day, or hour (1–12), or hour (0–23) MI Minute (0–59) SS Second (0–59) SSSSS Seconds past midnight (0–86399) Oracle Database 10g: SQL Fundamentals I 3-36 Other Formats Specifying Suffixes to Influence Number Display Element Description / . , Punctuation is reproduced in the result. “of the” Quoted string is reproduced in the result. Element Description TH Ordinal number (for example, DDTH for 4TH) SP Spelled-out number (for example, DDSP for FOUR) SPTH or THSP Spelled-out ordinal numbers (for example, DDSPTH for FOURTH) Oracle Database 10g: SQL Fundamentals I 3-37 3-37 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, TO_CHAR(hire_date, 'fmDD Month YYYY') AS HIREDATE FROM employees; Using the TO_CHAR Function with Dates … Oracle Database 10g: SQL Fundamentals I 3-38 3-38 Copyright © 2004, Oracle. All rights reserved. Using the TO_CHAR Function with Numbers These are some of the format elements that you can use with the TO_CHAR function to display a number value as a character: Prints a decimal point. Prints a comma as thousands indicator, Places a floating dollar sign$ Uses the floating local currency symbolL Represents a number9 Forces a zero to be displayed0 ResultElement TO_CHAR(number, 'format_model') Using the TO_CHAR Function with Numbers When working with number values such as character strings, you should convert those numbers to the character data type using the TO_CHAR function, which translates a value of NUMBER data type to VARCHAR2 data type. This technique is especially useful with concatenation. Oracle Database 10g: SQL Fundamentals I 3-39 Using the TO_CHAR Function with Numbers (continued) Number Format Elements If you are converting a number to the character data type, you can use the following format elements: Element Description Example Result 9 Numeric position (number of 9s determine display width) 999999 1234 0 Display leading zeros 099999 001234 $ Floating dollar sign $999999 $1234 L Floating local currency symbol L999999 FF1234 D Returns in the specified position the decimal character. The default is a period (.). 99D99 99.99 . Decimal point in position specified 999999.99 1234.00 G Returns the group separator in the specified position. You can specify multiple group separators in a number format model. 9,999 9G999 , Comma in position specified 999,999 1,234 MI Minus signs to right (negative values) 999999MI 1234- PR Parenthesize negative numbers 999999PR <1234> EEEE Scientific notation (format must specify four Es) 99.999EEEE 1.234E+03 U Returns in the specified position the \"Euro\" (or other) dual currency U9999 €1234 V Multiply by 10 n times (n = number of 9s after V) 9999V99 123400 S Returns the negative or positive value S9999 -1234 or +1234 B Display zero values as blank, not 0 B9999.99 1234.00 Oracle Database 10g: SQL Fundamentals I 3-40 3-40 Copyright © 2004, Oracle. All rights reserved. SELECT TO_CHAR(salary, '$99,999.00') SALARY FROM employees WHERE last_name = 'Ernst'; Using the TO_CHAR Function with Numbers Guidelines • The Oracle server displays a string of number signs (#) in place of a whole number whose digits exceed the number of digits that is provided in the format model. • The Oracle server rounds the stored decimal value to the number of decimal places that is provided in the format model. Oracle Database 10g: SQL Fundamentals I 3-41 3-41 Copyright © 2004, Oracle. All rights reserved. Using the TO_NUMBER and TO_DATE Functions • Convert a character string to a number format using the TO_NUMBER function: • Convert a character string to a date format using the TO_DATE function: • These functions have an fx modifier. This modifier specifies the exact matching for the character argument and date format model of a TO_DATE function. TO_NUMBER(char[, 'format_model']) TO_DATE(char[, 'format_model']) Using the TO_NUMBER and TO_DATE Functions You may want to convert a character string to either a number or a date. To accomplish this task, use the TO_NUMBER or TO_DATE functions. The format model that you choose is based on the previously demonstrated format elements. The fx modifier specifies exact matching for the character argument and date format model of a TO_DATE function: • Punctuation and quoted text in the character argument must exactly match (except for case) the corresponding parts of the format model. • The character argument cannot have extra blanks. Without fx, Oracle ignores extra blanks. • Numeric data in the character argument must have the same number of digits as the corresponding element in the format model. Without fx, numbers in the character argument can omit leading zeros. Oracle Database 10g: SQL Fundamentals I 3-42 Using the TO_NUMBER and TO_DATE Functions (continued) Example Display the name and hire date for all employees who started on May 24, 1999. Because the fx modifier is used, an exact match is required and the spaces after the word May are not recognized: SELECT last_name, hire_date FROM employees WHERE hire_date = TO_DATE('May 24, 1999', 'fxMonth DD, YYYY'); * WHERE hire_date = TO_DATE('May 24, 1999', 'fxMonth DD, YYYY') * ERROR at line 3: ORA-01858: a non-numeric character was found where a numeric was expected Oracle Database 10g: SQL Fundamentals I 3-43 3-43 Copyright © 2004, Oracle. All rights reserved. RR Date Format Current Year 1995 1995 2001 2001 Specified Date 27-OCT-95 27-OCT-17 27-OCT-17 27-OCT-95 RR Format 1995 2017 2017 1995 YY Format 1995 1917 2017 2095 If two digits of the current year are: 0–49 0–49 50–99 50–99 The return date is in the current century The return date is in the century after the current one The return date is in the century before the current one The return date is in the current century If the specified two-digit year is: RR Date Format Element The RR date format is similar to the YY element, but you can use it to specify different centuries. Use the RR date format element instead of YY so that the century of the return value varies according to the specified two-digit year and the last two digits of the current year. The table in the slide summarizes the behavior of the RR element. Current Year Given Date Interpreted (RR) Interpreted (YY) 1994 27-OCT-95 1995 1995 1994 27-OCT-17 2017 1917 2001 27-OCT-17 2017 2017 Oracle Database 10g: SQL Fundamentals I 3-44 3-44 Copyright © 2004, Oracle. All rights reserved. Example of RR Date Format To find employees hired prior to 1990, use the RR date format, which produces the same results whether the command is run in 1999 or now: SELECT last_name, TO_CHAR(hire_date, 'DD-Mon-YYYY') FROM employees WHERE hire_date < TO_DATE('01-Jan-90','DD-Mon-RR'); Example of RR Date Format To find employees who were hired prior to 1990, the RR format can be used. Because the current year is greater than 1999, the RR format interprets the year portion of the date from 1950 to 1999. The following command, on the other hand, results in no rows being selected because the YY format interprets the year portion of the date in the current century (2090). SELECT last_name, TO_CHAR(hire_date, 'DD-Mon-yyyy') FROM employees WHERE TO_DATE(hire_date, 'DD-Mon-yy') < '01-Jan-1990'; no rows selected Oracle Database 10g: SQL Fundamentals I 3-45 3-45 Copyright © 2004, Oracle. All rights reserved. Nesting Functions • Single-row functions can be nested to any level. • Nested functions are evaluated from deepest level to the least deep level. F3(F2(F1(col,arg1),arg2),arg3) Step 1 = Result 1 Step 2 = Result 2 Step 3 = Result 3 Nesting Functions Single-row functions can be nested to any depth. Nested functions are evaluated from the innermost level to the outermost level. Some examples follow to show you the flexibility of these functions. Oracle Database 10g: SQL Fundamentals I 3-46 3-46 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, UPPER(CONCAT(SUBSTR (LAST_NAME, 1, 8), '_US')) FROM employees WHERE department_id = 60; Nesting Functions Nesting Functions (continued) The slide example displays the last names of employees in department 60. The evaluation of the SQL statement involves three steps: 1. The inner function retrieves the first eight characters of the last name. Result1 = SUBSTR (LAST_NAME, 1, 8) 2. The outer function concatenates the result with _US. Result2 = CONCAT(Result1, '_US') 3. The outermost function converts the results to uppercase. The entire expression becomes the column heading because no column alias was given. Example Display the date of the next Friday that is six months from the hire date. The resulting date should appear as Friday, August 13th, 1999. Order the results by hire date. SELECT TO_CHAR(NEXT_DAY(ADD_MONTHS (hire_date, 6), 'FRIDAY'), 'fmDay, Month DDth, YYYY') \"Next 6 Month Review\" FROM employees ORDER BY hire_date; Oracle Database 10g: SQL Fundamentals I 3-47 3-47 Copyright © 2004, Oracle. All rights reserved. General Functions The following functions work with any data type and pertain to using nulls: • NVL (expr1, expr2) • NVL2 (expr1, expr2, expr3) • NULLIF (expr1, expr2) • COALESCE (expr1, expr2, ..., exprn) General Functions These functions work with any data type and pertain to the use of null values in the expression list. Note: For more information about the hundreds of functions available, see “Functions” in Oracle SQL Reference. Function Description NVL Converts a null value to an actual value NVL2 If expr1 is not null, NVL2 returns expr2. If expr1 is null, NVL2 returns expr3. The argum ent expr1 can have any data type. NULLIF Com pares two expressions and returns null if they are equal; returns the first expression if they are not equal COALESCE Returns the first non-null expression in the expression list Oracle Database 10g: SQL Fundamentals I 3-48 3-48 Copyright © 2004, Oracle. All rights reserved. NVL Function Converts a null value to an actual value: • Data types that can be used are date, character, and number. • Data types must match: – NVL(commission_pct,0) – NVL(hire_date,'01-JAN-97') – NVL(job_id,'No Job Yet') NVL Function To convert a null value to an actual value, use the NVL function. Syntax NVL (expr1, expr2) In the syntax: • expr1 is the source value or expression that may contain a null • expr2 is the target value for converting the null You can use the NVL function to convert any data type, but the return value is always the same as the data type of expr1. NVL Conversions for Various Data Types Data Type Conversion Example NUMBER NVL(number_column,9) DATE NVL(date_column, '01-JAN-95') CHAR or VARCHAR2 NVL(character_column, 'Unavailable') Oracle Database 10g: SQL Fundamentals I 3-49 3-49 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, salary, NVL(commission_pct, 0), (salary*12) + (salary*12*NVL(commission_pct, 0)) AN_SAL FROM employees; Using the NVL Function … Oracle Database 10g: SQL Fundamentals I 3-50 3-50 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, salary, commission_pct, NVL2(commission_pct, 'SAL+COMM', 'SAL') income FROM employees WHERE department_id IN (50, 80); Oracle Database 10g: SQL Fundamentals I 3-51 3-51 Copyright © 2004, Oracle. All rights reserved. SELECT first_name, LENGTH(first_name) \"expr1\", last_name, LENGTH(last_name) \"expr2\", NULLIF(LENGTH(first_name), LENGTH(last_name)) result FROM employees; Using the NULLIF Function … Oracle Database 10g: SQL Fundamentals I 3-52 3-52 Copyright © 2004, Oracle. All rights reserved. Using the COALESCE Function • The advantage of the COALESCE function over the NVL function is that the COALESCE function can take multiple alternate values. • If the first expression is not null, the COALESCE function returns that expression; otherwise, it does a COALESCE of the remaining expressions. Using the COALESCE Function The COALESCE function returns the first non-null expression in the list. Syntax COALESCE (expr1, expr2, ... exprn) In the syntax: • expr1 returns this expression if it is not null • expr2 returns this expression if the first expression is null and this expression is not null • exprn returns this expression if the preceding expressions are null All expressions must be of the same data type. Oracle Database 10g: SQL Fundamentals I 3-53 3-53 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, COALESCE(manager_id,commission_pct, -1) comm FROM employees ORDER BY commission_pct; Using the COALESCE Function … Oracle Database 10g: SQL Fundamentals I 3-54 3-54 Copyright © 2004, Oracle. All rights reserved. Conditional Expressions • Provide the use of IF-THEN-ELSE logic within a SQL statement • Use two methods: – CASE expression – DECODE function Conditional Expressions Two methods used to implement conditional processing (IF-THEN-ELSE logic) in a SQL statement are the CASE expression and the DECODE function. Note: The CASE expression complies with ANSI SQL. The DECODE function is specific to Oracle syntax. Oracle Database 10g: SQL Fundamentals I 3-55 3-55 Copyright © 2004, Oracle. All rights reserved. CASE Expression Facilitates conditional inquiries by doing the work of an IF-THEN-ELSE statement: CASE expr WHEN comparison_expr1 THEN return_expr1 [WHEN comparison_expr2 THEN return_expr2 WHEN comparison_exprn THEN return_exprn ELSE else_expr] END CASE Expression CASE expressions let you use IF-THEN-ELSE logic in SQL statements without having to invoke procedures. In a simple CASE expression, the Oracle server searches for the first WHEN ... THEN pair for which expr is equal to comparison_expr and returns return_expr. If none of the WHEN ... THEN pairs meet this condition, and if an ELSE clause exists, then the Oracle server returns else_expr. Otherwise, the Oracle server returns null. You cannot specify the literal NULL for all the return_exprs and the else_expr. All of the expressions ( expr, comparison_expr, and return_expr) must be of the same data type, which can be CHAR, VARCHAR2, NCHAR, or NVARCHAR2. Oracle Database 10g: SQL Fundamentals I 3-56 3-56 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, job_id, salary, CASE job_id WHEN 'IT_PROG' THEN 1.10*salary WHEN 'ST_CLERK' THEN 1.15*salary WHEN 'SA_REP' THEN 1.20*salary ELSE salary END \"REVISED_SALARY\" FROM employees; Using the CASE Expression Facilitates conditional inquiries by doing the work of an IF-THEN-ELSE statement: … … Oracle Database 10g: SQL Fundamentals I 3-57 3-57 Copyright © 2004, Oracle. All rights reserved. DECODE Function Facilitates conditional inquiries by doing the work of a CASE expression or an IF-THEN-ELSE statement: DECODE(col|expression, search1, result1 [, search2, result2,...,] [, default]) DECODE Function The DECODE function decodes an expression in a way similar to the IF-THEN-ELSE logic that is used in various languages. The DECODE function decodes expression after comparing it to each search value. If the expression is the same as search, result is returned. If the default value is omitted, a null value is returned where a search value does not match any of the result values. Oracle Database 10g: SQL Fundamentals I 3-58 3-58 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, job_id, salary, DECODE(job_id, 'IT_PROG', 1.10*salary, 'ST_CLERK', 1.15*salary, 'SA_REP', 1.20*salary, salary) REVISED_SALARY FROM employees; Using the DECODE Function … … Oracle Database 10g: SQL Fundamentals I 3-59 3-59 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, salary, DECODE (TRUNC(salary/2000, 0), 0, 0.00, 1, 0.09, 2, 0.20, 3, 0.30, 4, 0.40, 5, 0.42, 6, 0.44, 0.45) TAX_RATE FROM employees WHERE department_id = 80; Using the DECODE Function Display the applicable tax rate for each employee in department 80: Using the DECODE function (continued) This slide shows another example using the DECODE function. In this example, we determine the tax rate for each employee in department 80 based on the monthly salary. The tax rates are as follows: Monthly Salary Range Tax Rate $0.00–1,999.99 00% $2,000.00–3,999.99 09% $4,000.00–5,999.99 20% $6,000.00–7,999.99 30% $8,000.00–9,999.99 40% $10,000.00–11,999.99 42% $12,200.00–13,999.99 44% $14,000.00 or greater 45% Oracle Database 10g: SQL Fundamentals I 3-60 3-60 Copyright © 2004, Oracle. All rights reserved. Summary In this lesson, you should have learned how to: • Perform calculations on data using functions • Modify individual data items using functions • Manipulate output for groups of rows using functions • Alter date formats for display using functions • Convert column data types using functions • Use NVL functions • Use IF-THEN-ELSE logic Summary Single-row functions can be nested to any level. Single-row functions can manipulate the following: • Character data: LOWER, UPPER, INITCAP, CONCAT, SUBSTR, INSTR, LENGTH • Number data: ROUND, TRUNC, MOD • Date data: MONTHS_BETWEEN, ADD_MONTHS, NEXT_DAY, LAST_DAY, ROUND, TRUNC Remember the following: • Date values can also use arithmetic operators. • Conversion functions can convert character, date, and numeric values: TO_CHAR, TO_DATE, TO_NUMBER • There are several functions that pertain to nulls, including NVL, NVL2, NULLIF, and COALESCE. • IF-THEN-ELSE logic can be applied within a SQL statement by using the CASE expression or the DECODE function. SYSDATE and DUAL SYSDATE is a date function that returns the current date and time. It is customary to select SYSDATE from a dummy table called DUAL. Oracle Database 10g: SQL Fundamentals I 3-61 3-61 Copyright © 2004, Oracle. All rights reserved. Practice 3: Overview of Part 2 This practice covers the following topics: • Creating queries that require the use of numeric, character, and date functions • Using concatenation with functions • Writing case-insensitive queries to test the usefulness of character functions • Performing calculations of years and months of service for an employee • Determining the review date for an employee Practice 3: Overview of Part 2 Part 2 of this lesson’s practice provides a variety of exercises using different functions that are available for character, number, and date data types. For Part 2, complete exercises 7–14. Remember that for nested functions, the results are evaluated from the innermost function to the outermost function. Oracle Database 10g: SQL Fundamentals I 3-62 … Practice 3 Part 1 1. Write a query to display the current date. Label the column Date. 2. The HR department needs a report to display the employee number, last name, salary, and salary increased by 15.5% (expressed as a whole number) for each employee. Label the column New Salary. Place your SQL statement in a text file named lab_03_02.sql. 3. Run your query in the file lab_03_02.sql. 4. Modify your query lab_03_02.sql to add a column that subtracts the old salary from the new salary. Label the column Increase. Save the contents of the file as lab_03_04.sql. Run the revised query. … Oracle Database 10g: SQL Fundamentals I 3-63 Practice 3 (continued) 5. Write a query that displays the last name (with the first letter uppercase and all other letters lowercase) and the length of the last name for all employees whose name starts with the letters J, A, or M. Give each column an appropriate label. Sort the results by the employees’ last names. Rewrite the query so that the user is prompted to enter a letter that starts the last name. For example, if the user enters H when prompted for a letter, then the output should show all employees whose last name starts with the letter H. Oracle Database 10g: SQL Fundamentals I 3-64 Practice 3 (continued) 6. The HR department wants to find the length of employment for each employee. For each employee, display the last name and calculate the number of months between today and the date on which the employee was hired. Label the column MONTHS_WORKED. Order your results by the number of months employed. Round the number of months up to the closest whole number. Note: Your results will differ. Oracle Database 10g: SQL Fundamentals I 3-65 Practice 3 (continued) Part 2 7. Create a report that produces the following for each employee: <employee last name> earns <salary> monthly but wants <3 times salary>. Label the column Dream Salaries. If you have time, complete the following exercises: 8. Create a query to display the last name and salary for all employees. Format the salary to be 15 characters long, left-padded with the $ symbol. Label the column SALARY. … … Oracle Database 10g: SQL Fundamentals I 3-66 Practice 3 (continued) 9. Display each employee’s last name, hire date, and salary review date, which is the first Monday after six months of service. Label the column REVIEW. Format the dates to appear in the format similar to “Monday, the Thirty-First of July, 2000.” 10. Display the last name, hire date, and day of the week on which the employee started. Label the column DAY. Order the results by the day of the week, starting with Monday. … … Oracle Database 10g: SQL Fundamentals I 3-67 Practice 3 (continued) If you want an extra challenge, complete the following exercises: 11. Create a query that displays the employees’ last names and commission amounts. If an employee does not earn commission, show “No Commission.” Label the column COMM. 12. Create a query that displays the first eight characters of the employees’ last names and indicates the amounts of their salaries with asterisks. Each asterisk signifies a thousand dollars. Sort the data in descending order of salary. Label the column EMPLOYEES_AND_THEIR_SALARIES. … … Oracle Database 10g: SQL Fundamentals I 3-68 Practice 3 (continued) 13. Using the DECODE function, write a query that displays the grade of all employees based on the value of the column JOB_ID, using the following data: Job Grade AD_PRES A ST_MAN B IT_PROG C SA_REP D ST_CLERK E None of the above 0 14. Rewrite the statement in the preceding exercise using the CASE syntax. Copyright © 2004, Oracle. All rights reserved. Reporting Aggregated Data Using the Group Functions Oracle Database 10g: SQL Fundamentals I 4-2 4-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Identify the available group functions • Describe the use of group functions • Group data by using the GROUP BY clause • Include or exclude grouped rows by using the HAVING clause Objectives This lesson further addresses functions. It focuses on obtaining summary information (such as averages) for groups of rows. It discusses how to group rows in a table into smaller sets and how to specify search criteria for groups of rows. Oracle Database 10g: SQL Fundamentals I 4-3 4-3 Copyright © 2004, Oracle. All rights reserved. What Are Group Functions? Group functions operate on sets of rows to give one result per group. EMPLOYEES Oracle Database 10g: SQL Fundamentals I 4-4 4-4 Copyright © 2004, Oracle. All rights reserved. Types of Group Functions • AVG • COUNT • MAX • MIN • STDDEV • SUM • VARIANCE Group functions Types of Group Functions Each of the functions accepts an argument. The following table identifies the options that you can use in the syntax: Function Description AVG([DISTINCT|ALL]n) Average value of n, ignoring null values COUNT({*|[DISTINCT|ALL]expr }) Number of rows, where expr evaluates to something other than null (count all selected rows using *, including duplicates and rows with nulls) MAX([DISTINCT|ALL]expr) Maximum value of expr, ignoring null values MIN([DISTINCT|ALL]expr) Minimum value of expr, ignoring null values STDDEV([DISTINCT|ALL]x) Standard deviation of n, ignoring null values SUM([DISTINCT|ALL]n) Sum values of n, ignoring null values VARIANCE([DISTINCT|ALL]x) Variance of n, ignoring null values Oracle Database 10g: SQL Fundamentals I 4-5 4-5 Copyright © 2004, Oracle. All rights reserved. SELECT [column,] group_function(column), ... FROM table [WHERE condition] [GROUP BY column] [ORDER BY column]; Group Functions: Syntax Guidelines for Using Group Functions • DISTINCT makes the function consider only nonduplicate values; ALL makes it consider every value, including duplicates. The default is ALL and therefore does not need to be specified. • The data types for the functions with an expr argument may be CHAR, VARCHAR2, NUMBER, or DATE. • All group functions ignore null values. To substitute a value for null values, use the NVL, NVL2, or COALESCE functions. Oracle Database 10g: SQL Fundamentals I 4-6 4-6 Copyright © 2004, Oracle. All rights reserved. SELECT AVG(salary), MAX(salary), MIN(salary), SUM(salary) FROM employees WHERE job_id LIKE '%REP%'; Using the AVG and SUM Functions You can use AVG and SUM for numeric data. Using the Group Functions You can use AVG, SUM, MIN, and MAX functions against columns that can store numeric data. The example in the slide displays the average, highest, lowest, and sum of monthly salaries for all sales representatives. Oracle Database 10g: SQL Fundamentals I 4-7 4-7 Copyright © 2004, Oracle. All rights reserved. SELECT MIN(hire_date), MAX(hire_date) FROM employees; Using the MIN and MAX Functions You can use MIN and MAX for numeric, character, and date data types. Using the Group Functions (continued) You can use the MAX and MIN functions for numeric, character, and date data types. The slide example displays the most junior and most senior employees. The following example displays the employee last name that is first and the employee last name that is last in an alphabetized list of all employees: SELECT MIN(last_name), MAX(last_name) FROM employees; Note: The AVG, SUM, VARIANCE, and STDDEV functions can be used only with numeric data types. MAX and MIN cannot be used with LOB or LONG data types. Oracle Database 10g: SQL Fundamentals I 4-8 4-8 Copyright © 2004, Oracle. All rights reserved. COUNT(*) returns the number of rows in a table: COUNT(expr) returns the number of rows with non- null values for the expr: SELECT COUNT(commission_pct) FROM employees WHERE department_id = 80; SELECT COUNT(*) FROM employees WHERE department_id = 50; Using the COUNT Function 1 2 COUNT Function The COUNT function has three formats: • COUNT(*) • COUNT(expr) • COUNT(DISTINCT expr) COUNT(*) returns the number of rows in a table that satisfy the criteria of the SELECT statement, including duplicate rows and rows containing null values in any of the columns. If a WHERE clause is included in the SELECT statement, COUNT(*) returns the number of rows that satisfy the condition in the WHERE clause. In contrast, COUNT(expr) returns the number of non-null values that are in the column identified by expr. COUNT(DISTINCT expr) returns the number of unique, non-null values that are in the column identified by expr. Examples 1. The slide example displays the number of employees in department 50. 2. The slide example displays the number of employees in department 80 who can earn a commission. Oracle Database 10g: SQL Fundamentals I 4-9 4-9 Copyright © 2004, Oracle. All rights reserved. SELECT COUNT(DISTINCT department_id) FROM employees; Using the DISTINCT Keyword • COUNT(DISTINCT expr) returns the number of distinct non-null values of the expr. • To display the number of distinct department values in the EMPLOYEES table: DISTINCT Keyword Use the DISTINCT keyword to suppress the counting of any duplicate values in a column. The example in the slide displays the number of distinct department values that are in the EMPLOYEES table. Oracle Database 10g: SQL Fundamentals I 4-10 4-10 Copyright © 2004, Oracle. All rights reserved. Group functions ignore null values in the column: The NVL function forces group functions to include null values: SELECT AVG(commission_pct) FROM employees; SELECT AVG(NVL(commission_pct, 0)) FROM employees; Group Functions and Null Values 1 2 Group Functions and Null Values All group functions ignore null values in the column. The NVL function forces group functions to include null values. Examples 1. The average is calculated based on only those rows in the table where a valid value is stored in the COMMISSION_PCT column. The average is calculated as the total commission that is paid to all employees divided by the number of employees receiving a commission (four). 2. The average is calculated based on all rows in the table, regardless of whether null values are stored in the COMMISSION_PCT column. The average is calculated as the total commission that is paid to all employees divided by the total number of employees in the company (20). Oracle Database 10g: SQL Fundamentals I 4-11 4-11 Copyright © 2004, Oracle. All rights reserved. Oracle Database 10g: SQL Fundamentals I 4-12 4-12 Copyright © 2004, Oracle. All rights reserved. You can divide rows in a table into smaller groups by using the GROUP BY clause. Creating Groups of Data: GROUP BY Clause Syntax SELECT column, group_function(column) FROM table [WHERE condition] [GROUP BY group_by_expression] [ORDER BY column]; GROUP BY Clause You can use the GROUP BY clause to divide the rows in a table into groups. You can then use the group functions to return summary information for each group. In the syntax: group_by_expression specifies columns whose values determine the basis for grouping rows Guidelines • If you include a group function in a SELECT clause, you cannot select individual results as well, unless the individual column appears in the GROUP BY clause. You receive an error message if you fail to include the column list in the GROUP BY clause. • Using a WHERE clause, you can exclude rows before dividing them into groups. • You must include the columns in the GROUP BY clause. • You cannot use a column alias in the GROUP BY clause. Oracle Database 10g: SQL Fundamentals I 4-13 4-13 Copyright © 2004, Oracle. All rights reserved. SELECT department_id, AVG(salary) FROM employees GROUP BY department_id ; Using the GROUP BY Clause All columns in the SELECT list that are not in group functions must be in the GROUP BY clause. Oracle Database 10g: SQL Fundamentals I 4-14 4-14 Copyright © 2004, Oracle. All rights reserved. Using the GROUP BY Clause The GROUP BY column does not have to be in the SELECT list. SELECT AVG(salary) FROM employees GROUP BY department_id ; Using the GROUP BY Clause (continued) The GROUP BY column does not have to be in the SELECT clause. For example, the SELECT statement in the slide displays the average salaries for each department without displaying the respective department numbers. Without the department numbers, however, the results do not look meaningful. You can use the group function in the ORDER BY clause: SELECT department_id, AVG(salary) FROM employees GROUP BY department_id ORDER BY AVG(salary); … Oracle Database 10g: SQL Fundamentals I 4-15 4-15 Copyright © 2004, Oracle. All rights reserved. Grouping by More Than One Column EMPLOYEES Oracle Database 10g: SQL Fundamentals I 4-16 4-16 Copyright © 2004, Oracle. All rights reserved. SELECT department_id dept_id, job_id, SUM(salary) FROM employees GROUP BY department_id, job_id ; Using the GROUP BY Clause on Multiple Columns Oracle Database 10g: SQL Fundamentals I 4-17 4-17 Copyright © 2004, Oracle. All rights reserved. Illegal Queries Using Group Functions Any column or expression in the SELECT list that is not an aggregate function must be in the GROUP BY clause: SELECT department_id, COUNT(last_name) FROM employees; SELECT department_id, COUNT(last_name) * ERROR at line 1: ORA-00937: not a single-group group function Column missing in the GROUP BY clause Illegal Queries Using Group Functions Whenever you use a mixture of individual items (DEPARTMENT_ID) and group functions (COUNT) in the same SELECT statement, you must include a GROUP BY clause that specifies the individual items (in this case, DEPARTMENT_ID). If the GROUP BY clause is missing, then the error message “not a single-group group function” appears and an asterisk (*) points to the offending column. You can correct the error in the slide by adding the GROUP BY clause: SELECT department_id, count(last_name) FROM employees GROUP BY department_id; Any column or expression in the SELECT list that is not an aggregate function must be in the GROUP BY clause. … Oracle Database 10g: SQL Fundamentals I 4-18 4-18 Copyright © 2004, Oracle. All rights reserved. Illegal Queries Using Group Functions • You cannot use the WHERE clause to restrict groups. • You use the HAVING clause to restrict groups. • You cannot use group functions in the WHERE clause. SELECT department_id, AVG(salary) FROM employees WHERE AVG(salary) > 8000 GROUP BY department_id; WHERE AVG(salary) > 8000 * ERROR at line 3: ORA-00934: group function is not allowed here Cannot use the WHERE clause to restrict groups Illegal Queries Using Group Functions (continued) The WHERE clause cannot be used to restrict groups. The SELECT statement in the slide example results in an error because it uses the WHERE clause to restrict the display of average salaries of those departments that have an average salary greater than $8,000. You can correct the error in the example by using the HAVING clause to restrict groups: SELECT department_id, AVG(salary) FROM employees HAVING AVG(salary) > 8000 GROUP BY department_id; Oracle Database 10g: SQL Fundamentals I 4-19 4-19 Copyright © 2004, Oracle. All rights reserved. Restricting Group Results Oracle Database 10g: SQL Fundamentals I 4-20 4-20 Copyright © 2004, Oracle. All rights reserved. SELECT column, group_function FROM table [WHERE condition] [GROUP BY group_by_expression] [HAVING group_condition] [ORDER BY column]; Restricting Group Results with the HAVING Clause When you use the HAVING clause, the Oracle server restricts groups as follows: 1. Rows are grouped. 2. The group function is applied. 3. Groups matching the HAVING clause are displayed. Restricting Group Results with the HAVING Clause You use the HAVING clause to specify which groups are to be displayed, thus further restricting the groups on the basis of aggregate information. In the syntax, group_condition restricts the groups of rows returned to those groups for which the specified condition is true. The Oracle server performs the following steps when you use the HAVING clause: 1. Rows are grouped. 2. The group function is applied to the group. 3. The groups that match the criteria in the HAVING clause are displayed. The HAVING clause can precede the GROUP BY clause, but it is recommended that you place the GROUP BY clause first because that is more logical. Groups are formed and group functions are calculated before the HAVING clause is applied to the groups in the SELECT list. Oracle Database 10g: SQL Fundamentals I 4-21 4-21 Copyright © 2004, Oracle. All rights reserved. SELECT department_id, MAX(salary) FROM employees GROUP BY department_id HAVING MAX(salary)>10000 ; Using the HAVING Clause Using the HAVING Clause The slide example displays department numbers and maximum salaries for those departments with a maximum salary that is greater than $10,000. You can use the GROUP BY clause without using a group function in the SELECT list. If you restrict rows based on the result of a group function, you must have a GROUP BY clause as well as the HAVING clause. The following example displays the department numbers and average salaries for those departments with a maximum salary that is greater than $10,000: SELECT department_id, AVG(salary) FROM employees GROUP BY department_id HAVING max(salary)>10000; Oracle Database 10g: SQL Fundamentals I 4-22 4-22 Copyright © 2004, Oracle. All rights reserved. SELECT job_id, SUM(salary) PAYROLL FROM employees WHERE job_id NOT LIKE '%REP%' GROUP BY job_id HAVING SUM(salary) > 13000 ORDER BY SUM(salary); Using the HAVING Clause Using the HAVING Clause (continued) The slide example displays the job ID and total monthly salary for each job that has a total payroll exceeding $13,000. The example excludes sales representatives and sorts the list by the total monthly salary. Oracle Database 10g: SQL Fundamentals I 4-23 4-23 Copyright © 2004, Oracle. All rights reserved. SELECT MAX(AVG(salary)) FROM employees GROUP BY department_id; Nesting Group Functions Display the maximum average salary: Nesting Group Functions Group functions can be nested to a depth of two. The slide example displays the maximum average salary. Oracle Database 10g: SQL Fundamentals I 4-24 4-24 Copyright © 2004, Oracle. All rights reserved. SELECT column, group_function FROM table [WHERE condition] [GROUP BY group_by_expression] [HAVING group_condition] [ORDER BY column]; Summary In this lesson, you should have learned how to: • Use the group functions COUNT, MAX, MIN, and AVG • Write queries that use the GROUP BY clause • Write queries that use the HAVING clause Summary Several group functions are available in SQL, such as the following: AVG, COUNT, MAX, MIN, SUM, STDDEV, and VARIANCE You can create subgroups by using the GROUP BY clause. Groups can be restricted using the HAVING clause. Place the HAVING and GROUP BY clauses after the WHERE clause in a statement. The order of the HAVING and GROUP clauses following the WHERE clause is not important. Place the ORDER BY clause last. The Oracle server evaluates the clauses in the following order: 1. If the statement contains a WHERE clause, the server establishes the candidate rows. 2. The server identifies the groups that are specified in the GROUP BY clause. 3. The HAVING clause further restricts result groups that do not meet the group criteria in the HAVING clause. Note: For a complete list of the group functions, see Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 4-25 4-25 Copyright © 2004, Oracle. All rights reserved. Practice 4: Overview This practice covers the following topics: • Writing queries that use the group functions • Grouping by rows to achieve more than one result • Restricting groups by using the HAVING clause Practice 4: Overview At the end of this practice, you should be familiar with using group functions and selecting groups of data. Oracle Database 10g: SQL Fundamentals I 4-26 Practice 4 Determine the validity of the following three statements. Circle either True or False. 1. Group functions work across many rows to produce one result per group. True/False 2. Group functions include nulls in calculations. True/False 3. The WHERE clause restricts rows prior to inclusion in a group calculation. True/False The HR department needs the following reports: 4. Find the highest, lowest, sum, and average salary of all employees. Label the columns Maximum, Minimum, Sum, and Average, respectively. Round your results to the nearest whole number. Place your SQL statement in a text file named lab_04_04.sql. 5. Modify the query in lab_04_04.sql to display the minimum, maximum, sum, and average salary for each job type. Resave lab_04_04.sql as lab_04_05.sql. Run the statement in lab_04_05.sql. Oracle Database 10g: SQL Fundamentals I 4-27 Practice 4 (continued) 6. Write a query to display the number of people with the same job. Generalize the query so that the user in the HR department is prompted for a job title. Save the script to a file named lab_04_06.sql. 7. Determine the number of managers without listing them. Label the column Number of Managers. Hint: Use the MANAGER_ID column to determine the number of managers. 8. Find the difference between the highest and lowest salaries. Label the column DIFFERENCE. If you have time, complete the following exercises: 9. Create a report to display the manager number and the salary of the lowest-paid employee for that manager. Exclude anyone whose manager is not known. Exclude any groups where the minimum salary is $6,000 or less. Sort the output in descending order of salary. Oracle Database 10g: SQL Fundamentals I 4-28 Practice 4 (continued) If you want an extra challenge, complete the following exercises: 10. Create a query to display the total number of employees and, of that total, the number of employees hired in 1995, 1996, 1997, and 1998. Create appropriate column headings. 11. Create a matrix query to display the job, the salary for that job based on department number, and the total salary for that job, for departments 20, 50, 80, and 90, giving each column an appropriate heading. Copyright © 2004, Oracle. All rights reserved. Displaying Data from Multiple Tables Oracle Database 10g: SQL Fundamentals I 5-2 5-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Write SELECT statements to access data from more than one table using equijoins and non- equijoins • Join a table to itself by using a self-join • View data that generally does not meet a join condition by using outer joins • Generate a Cartesian product of all rows from two or more tables Objectives This lesson explains how to obtain data from more than one table. A join is used to view information from multiple tables. Hence, you can join tables together to view information from more than one table. Note: Information on joins is found in “SQL Queries and Subqueries: Joins” in Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 5-3 5-3 Copyright © 2004, Oracle. All rights reserved. Obtaining Data from Multiple Tables EMPLOYEES DEPARTMENTS … … Obtaining Data from Multiple Tables Sometimes you need to use data from more than one table. In the slide example, the report displays data from two separate tables: • Employee IDs exist in the EMPLOYEES table. • Department IDs exist in both the EMPLOYEES and DEPARTMENTS tables. • Department names exist in the DEPARTMENTS table. To produce the report, you need to link the EMPLOYEES and DEPARTMENTS tables and access data from both of them. Oracle Database 10g: SQL Fundamentals I 5-4 5-4 Copyright © 2004, Oracle. All rights reserved. Types of Joins Joins that are compliant with the SQL:1999 standard include the following: • Cross joins • Natural joins • USING clause • Full (or two-sided) outer joins • Arbitrary join conditions for outer joins Types of Joins To join tables, you can use join syntax that is compliant with the SQL:1999 standard. Note: Prior to the Oracle9i release, the join syntax was different from the ANSI standards. The SQL:1999–compliant join syntax does not offer any performance benefits over the Oracle-proprietary join syntax that existed in prior releases. For detailed information about the proprietary join syntax, see Appendix C. Oracle Database 10g: SQL Fundamentals I 5-5 5-5 Copyright © 2004, Oracle. All rights reserved. Joining Tables Using SQL:1999 Syntax Use a join to query data from more than one table: SELECT table1.column, table2.column FROM table1 [NATURAL JOIN table2] | [JOIN table2 USING (column_name)] | [JOIN table2 ON (table1.column_name = table2.column_name)]| [LEFT|RIGHT|FULL OUTER JOIN table2 ON (table1.column_name = table2.column_name)]| [CROSS JOIN table2]; Defining Joins In the syntax: table1.column denotes the table and column from which data is retrieved NATURAL JOIN joins two tables based on the same column name JOIN table USING column_name performs an equijoin based on the column name JOIN table ON table1.column_name performs an equijoin based on the condition in the ON clause, = table2.column_name LEFT/RIGHT/FULL OUTER is used to perform outer joins CROSS JOIN returns a Cartesian product from the two tables For more information, see “SELECT” in Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 5-6 5-6 Copyright © 2004, Oracle. All rights reserved. Creating Natural Joins • The NATURAL JOIN clause is based on all columns in the two tables that have the same name. • It selects rows from the two tables that have equal values in all matched columns. • If the columns having the same names have different data types, an error is returned. Creating Natural Joins You can join tables automatically based on columns in the two tables that have matching data types and names. You do this by using the keywords NATURAL JOIN. Note: The join can happen on only those columns that have the same names and data types in both tables. If the columns have the same name but different data types, then the NATURAL JOIN syntax causes an error. Oracle Database 10g: SQL Fundamentals I 5-7 5-7 Copyright © 2004, Oracle. All rights reserved. SELECT department_id, department_name, location_id, city FROM departments NATURAL JOIN locations ; Retrieving Records with Natural Joins Oracle Database 10g: SQL Fundamentals I 5-8 5-8 Copyright © 2004, Oracle. All rights reserved. Creating Joins with the USING Clause • If several columns have the same names but the data types do not match, the NATURAL JOIN clause can be modified with the USING clause to specify the columns that should be used for an equijoin. • Use the USING clause to match only one column when more than one column matches. • Do not use a table name or alias in the referenced columns. • The NATURAL JOIN and USING clauses are mutually exclusive. USING Clause Natural joins use all columns with matching names and data types to join the tables. The USING clause can be used to specify only those columns that should be used for an equijoin. The columns that are referenced in the USING clause should not have a qualifier (table name or alias) anywhere in the SQL statement. For example, the following statement is valid: SELECT l.city, d.department_name FROM locations l JOIN departments d USING (location_id) WHERE location_id = 1400; The following statement is invalid because the LOCATION_ID is qualified in the WHERE clause: SELECT l.city, d.department_name FROM locations l JOIN departments d USING (location_id) WHERE d.location_id = 1400; ORA-25154: column part of USING clause cannot have qualifier The same restriction also applies to NATURAL joins. Therefore, columns that have the same name in both tables must be used without any qualifiers. Oracle Database 10g: SQL Fundamentals I 5-9 5-9 Copyright © 2004, Oracle. All rights reserved. Joining Column Names EMPLOYEES DEPARTMENTS Foreign key Primary key … … The USING Clause for Equijoins To determine an employee’s department name, you compare the value in the DEPARTMENT_ID column in the EMPLOYEES table with the DEPARTMENT_ID values in the DEPARTMENTS table. The relationship between the EMPLOYEES and DEPARTMENTS tables is an equijoin; that is, values in the DEPARTMENT_ID column in both tables must be equal. Frequently, this type of join involves primary and foreign key complements. Note: Equijoins are also called simple joins or inner joins. Oracle Database 10g: SQL Fundamentals I 5-10 5-10 Copyright © 2004, Oracle. All rights reserved. SELECT employees.employee_id, employees.last_name, departments.location_id, department_id FROM employees JOIN departments USING (department_id) ; Retrieving Records with the USING Clause Oracle Database 10g: SQL Fundamentals I 5-11 5-11 Copyright © 2004, Oracle. All rights reserved. Qualifying Ambiguous Column Names • Use table prefixes to qualify column names that are in multiple tables. • Use table prefixes to improve performance. • Use column aliases to distinguish columns that have identical names but reside in different tables. • Do not use aliases on columns that are identified in the USING clause and listed elsewhere in the SQL statement. Qualifying Ambiguous Column Names You need to qualify the names of the columns with the table name to avoid ambiguity. Without the table prefixes, the DEPARTMENT_ID column in the SELECT list could be from either the DEPARTMENTS table or the EMPLOYEES table. It is necessary to add the table prefix to execute your query: SELECT employees.employee_id, employees.last_name, departments.department_id, departments.location_id FROM employees JOIN departments ON employees.department_id = departments.department_id; If there are no common column names between the two tables, there is no need to qualify the columns. However, using the table prefix improves performance, because you tell the Oracle server exactly where to find the columns. Note: When joining with the USING clause, you cannot qualify a column that is used in the USING clause itself. Furthermore, if that column is used anywhere in the SQL statement, you cannot alias it. Oracle Database 10g: SQL Fundamentals I 5-12 5-12 Copyright © 2004, Oracle. All rights reserved. SELECT e.employee_id, e.last_name, d.location_id, department_id FROM employees e JOIN departments d USING (department_id) ; Using Table Aliases • Use table aliases to simplify queries. • Use table aliases to improve performance. Using Table Aliases Qualifying column names with table names can be very time consuming, particularly if table names are lengthy. You can use table aliases instead of table names. Just as a column alias gives a column another name, a table alias gives a table another name. Table aliases help to keep SQL code smaller, therefore using less memory. Notice how table aliases are identified in the FROM clause in the example. The table name is specified in full, followed by a space and then the table alias. The EMPLOYEES table has been given an alias of e, and the DEPARTMENTS table has an alias of d. Guidelines • Table aliases can be up to 30 characters in length, but shorter aliases are better than longer ones. • If a table alias is used for a particular table name in the FROM clause, then that table alias must be substituted for the table name throughout the SELECT statement. • Table aliases should be meaningful. • The table alias is valid for only the current SELECT statement. Oracle Database 10g: SQL Fundamentals I 5-13 5-13 Copyright © 2004, Oracle. All rights reserved. Creating Joins with the ON Clause • The join condition for the natural join is basically an equijoin of all columns with the same name. • Use the ON clause to specify arbitrary conditions or specify columns to join. • The join condition is separated from other search conditions. • The ON clause makes code easy to understand. ON Clause Use the ON clause to specify a join condition. This lets you specify join conditions separate from any search or filter conditions in the WHERE clause. Oracle Database 10g: SQL Fundamentals I 5-14 5-14 Copyright © 2004, Oracle. All rights reserved. SELECT e.employee_id, e.last_name, e.department_id, d.department_id, d.location_id FROM employees e JOIN departments d ON (e.department_id = d.department_id); Retrieving Records with the ON Clause Oracle Database 10g: SQL Fundamentals I 5-15 5-15 Copyright © 2004, Oracle. All rights reserved. Self-Joins Using the ON Clause MANAGER_ID in the WORKER table is equal to EMPLOYEE_ID in the MANAGER table. EMPLOYEES (WORKER) EMPLOYEES (MANAGER) … … Joining a Table to Itself Sometimes you need to join a table to itself. To find the name of each employee’s manager, you need to join the EMPLOYEES table to itself, or perform a self join. For example, to find the name of Lorentz’s manager, you need to: • Find Lorentz in the EMPLOYEES table by looking at the LAST_NAME column. • Find the manager number for Lorentz by looking at the MANAGER_ID column. Lorentz’s manager number is 103. • Find the name of the manager with EMPLOYEE_ID 103 by looking at the LAST_NAME column. Hunold’s employee number is 103, so Hunold is Lorentz’s manager. In this process, you look in the table twice. The first time you look in the table to find Lorentz in the LAST_NAME column and MANAGER_ID value of 103. The second time you look in the EMPLOYEE_ID column to find 103 and the LAST_NAME column to find Hunold. Oracle Database 10g: SQL Fundamentals I 5-16 5-16 Copyright © 2004, Oracle. All rights reserved. Self-Joins Using the ON Clause SELECT e.last_name emp, m.last_name mgr FROM employees e JOIN employees m ON (e.manager_id = m.employee_id); … Oracle Database 10g: SQL Fundamentals I 5-17 5-17 Copyright © 2004, Oracle. All rights reserved. SELECT e.employee_id, e.last_name, e.department_id, d.department_id, d.location_id FROM employees e JOIN departments d ON (e.department_id = d.department_id) AND e.manager_id = 149 ; Applying Additional Conditions to a Join Applying Additional Conditions to a Join You can apply additional conditions to the join. The example shown performs a join on the EMPLOYEES and DEPARTMENTS tables and, in addition, displays only employees who have a manager ID of 149. To add additional conditions to the ON clause, you can add AND clauses. Alternatively, you can use a WHERE clause to apply additional conditions: SELECT e.employee_id, e.last_name, e.department_id, d.department_id, d.location_id FROM employees e JOIN departments d ON (e.department_id = d.department_id) WHERE e.manager_id = 149; Oracle Database 10g: SQL Fundamentals I 5-18 5-18 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, city, department_name FROM employees e JOIN departments d ON d.department_id = e.department_id JOIN locations l ON d.location_id = l.location_id; Creating Three-Way Joins with the ON Clause Oracle Database 10g: SQL Fundamentals I 5-19 5-19 Copyright © 2004, Oracle. All rights reserved. Non-Equijoins EMPLOYEES JOB_GRADES Salary in the EMPLOYEES table must be between lowest salary and highest salary in the JOB_GRADES table. Oracle Database 10g: SQL Fundamentals I 5-20 5-20 Copyright © 2004, Oracle. All rights reserved. SELECT e.last_name, e.salary, j.grade_level FROM employees e JOIN job_grades j ON e.salary BETWEEN j.lowest_sal AND j.highest_sal; Retrieving Records with Non-Equijoins Oracle Database 10g: SQL Fundamentals I 5-21 5-21 Copyright © 2004, Oracle. All rights reserved. Outer Joins EMPLOYEESDEPARTMENTS There are no employees in department 190. Oracle Database 10g: SQL Fundamentals I 5-22 5-22 Copyright © 2004, Oracle. All rights reserved. INNER Versus OUTER Joins • In SQL:1999, the join of two tables returning only matched rows is called an inner join. • A join between two tables that returns the results of the inner join as well as the unmatched rows from the left (or right) tables is called a left (or right) outer join. • A join between two tables that returns the results of an inner join as well as the results of a left and right join is a full outer join. INNER Versus OUTER Joins Joining tables with the NATURAL JOIN, USING, or ON clauses results in an inner join. Any unmatched rows are not displayed in the output. To return the unmatched rows, you can use an outer join. An outer join returns all rows that satisfy the join condition and also returns some or all of those rows from one table for which no rows from the other table satisfy the join condition. There are three types of outer joins: • LEFT OUTER • RIGHT OUTER • FULL OUTER Oracle Database 10g: SQL Fundamentals I 5-23 5-23 Copyright © 2004, Oracle. All rights reserved. SELECT e.last_name, e.department_id, d.department_name FROM employees e LEFT OUTER JOIN departments d ON (e.department_id = d.department_id) ; LEFT OUTER JOIN Oracle Database 10g: SQL Fundamentals I 5-24 5-24 Copyright © 2004, Oracle. All rights reserved. SELECT e.last_name, e.department_id, d.department_name FROM employees e RIGHT OUTER JOIN departments d ON (e.department_id = d.department_id) ; RIGHT OUTER JOIN … Example of RIGHT OUTER JOIN This query retrieves all rows in the DEPARTMENTS table, which is the right table even if there is no match in the EMPLOYEES table. Oracle Database 10g: SQL Fundamentals I 5-25 5-25 Copyright © 2004, Oracle. All rights reserved. SELECT e.last_name, d.department_id, d.department_name FROM employees e FULL OUTER JOIN departments d ON (e.department_id = d.department_id) ; FULL OUTER JOIN … Example of FULL OUTER JOIN This query retrieves all rows in the EMPLOYEES table, even if there is no match in the DEPARTMENTS table. It also retrieves all rows in the DEPARTMENTS table, even if there is no match in the EMPLOYEES table. Oracle Database 10g: SQL Fundamentals I 5-26 5-26 Copyright © 2004, Oracle. All rights reserved. Cartesian Products • A Cartesian product is formed when: – A join condition is omitted – A join condition is invalid – All rows in the first table are joined to all rows in the second table • To avoid a Cartesian product, always include a valid join condition. Cartesian Products When a join condition is invalid or omitted completely, the result is a Cartesian product, in which all combinations of rows are displayed. All rows in the first table are joined to all rows in the second table. A Cartesian product tends to generate a large number of rows, and the result is rarely useful. You should always include a valid join condition unless you have a specific need to combine all rows from all tables. Cartesian products are useful for some tests when you need to generate a large number of rows to simulate a reasonable amount of data. Oracle Database 10g: SQL Fundamentals I 5-27 5-27 Copyright © 2004, Oracle. All rights reserved. Generating a Cartesian Product Cartesian product: 20 x 8 = 160 rows EMPLOYEES (20 rows) DEPARTMENTS (8 rows) Oracle Database 10g: SQL Fundamentals I 5-28 5-28 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, department_name FROM employees CROSS JOIN departments ; Creating Cross Joins • The CROSS JOIN clause produces the cross- product of two tables. • This is also called a Cartesian product between the two tables. Oracle Database 10g: SQL Fundamentals I 5-29 5-29 Copyright © 2004, Oracle. All rights reserved. Summary In this lesson, you should have learned how to use joins to display data from multiple tables by using: • Equijoins • Non-equijoins • Outer joins • Self-joins • Cross joins • Natural joins • Full (or two-sided) outer joins Summary There are multiple ways to join tables. Types of Joins • Equijoins • Non-equijoins • Outer joins • Self-joins • Cross joins • Natural joins • Full (or two-sided) outer joins Cartesian Products A Cartesian product results in a display of all combinations of rows. This is done by either omitting the WHERE clause or specifying the CROSS JOIN clause. Table Aliases • Table aliases speed up database access. • Table aliases can help to keep SQL code smaller by conserving memory. Oracle Database 10g: SQL Fundamentals I 5-30 5-30 Copyright © 2004, Oracle. All rights reserved. Practice 5: Overview This practice covers the following topics: • Joining tables using an equijoin • Performing outer and self-joins • Adding conditions Practice 5: Overview This practice is intended to give you practical experience in extracting data from more than one table using SQL:1999–compliant joins. Oracle Database 10g: SQL Fundamentals I 5-31 Practice 5 1. Write a query for the HR department to produce the addresses of all the departments. Use the LOCATIONS and COUNTRIES tables. Show the location ID, street address, city, state or province, and country in the output. Use a NATURAL JOIN to produce the results. 2. The HR department needs a report of all employees. Write a query to display the last name, department number, and department name for all employees. … Oracle Database 10g: SQL Fundamentals I 5-32 Practice 5 (continued) 3. The HR department needs a report of employees in Toronto. Display the last name, job, department number, and department name for all employees who work in Toronto. 4. Create a report to display employees’ last name and employee number along with their manager’s last name and manager number. Label the columns Employee, Emp#, Manager, and Mgr#, respectively. Place your SQL statement in a text file named lab_05_04.sql. Oracle Database 10g: SQL Fundamentals I 5-33 Practice 5 (continued) 5. Modify lab_05_04.sql to display all employees including King, who has no manager. Order the results by the employee number. Place your SQL statement in a text file named lab_05_05.sql. Run the query in lab_05_05.sql. 6. Create a report for the HR department that displays employee last names, department numbers, and all the employees who work in the same department as a given employee. Give each column an appropriate label. Save the script to a file named lab_05_06.sql. Oracle Database 10g: SQL Fundamentals I 5-34 Practice 5 (continued) 7. The HR department needs a report on job grades and salaries. To familiarize yourself with the JOB_GRADES table, first show the structure of the JOB_GRADES table. Then create a query that displays the name, job, department name, salary, and grade for all employees. If you want an extra challenge, complete the following exercises: 8. The HR department wants to determine the names of all employees who were hired after Davies. Create a query to display the name and hire date of any employee hired after employee Davies. Oracle Database 10g: SQL Fundamentals I 5-35 Practice 5 (continued) 9. The HR department needs to find the names and hire dates for all employees who were hired before their managers, along with their managers’ names and hire dates. Save the script to a file named lab5_09.sql. Copyright © 2004, Oracle. All rights reserved. Using Subqueries to Solve Queries Oracle Database 10g: SQL Fundamentals I 6-2 6-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Define subqueries • Describe the types of problems that subqueries can solve • List the types of subqueries • Write single-row and multiple-row subqueries Objectives In this lesson, you learn about more-advanced features of the SELECT statement. You can write subqueries in the WHERE clause of another SQL statement to obtain values based on an unknown conditional value. This lesson covers single-row subqueries and multiple-row subqueries. Oracle Database 10g: SQL Fundamentals I 6-3 6-3 Copyright © 2004, Oracle. All rights reserved. Using a Subquery to Solve a Problem Who has a salary greater than Abel’s? Which employees have salaries greater than Abel’s salary? Main query: What is Abel’s salary? Subquery: Oracle Database 10g: SQL Fundamentals I 6-4 6-4 Copyright © 2004, Oracle. All rights reserved. • The subquery (inner query) executes once before the main query (outer query). • The result of the subquery is used by the main query. SELECT select_list FROM table WHERE expr operator (SELECT select_list FROM table); Subquery Syntax Subquery Syntax A subquery is a SELECT statement that is embedded in a clause of another SELECT statement. You can build powerful statements out of simple ones by using subqueries. They can be very useful when you need to select rows from a table with a condition that depends on the data in the table itself. You can place the subquery in a number of SQL clauses, including the following: • WHERE clause • HAVING clause • FROM clause In the syntax: operator includes a comparison condition such as >, =, or IN Note: Comparison conditions fall into two classes: single-row operators (>, =, >=, <, <>, <=) and multiple-row operators (IN, ANY, ALL). The subquery is often referred to as a nested SELECT, sub-SELECT, or inner SELECT statement. The subquery generally executes first, and its output is used to complete the query condition for the main (or outer) query. Oracle Database 10g: SQL Fundamentals I 6-5 6-5 Copyright © 2004, Oracle. All rights reserved. SELECT last_name FROM employees WHERE salary > (SELECT salary FROM employees WHERE last_name = 'Abel'); Using a Subquery 11000 Using a Subquery In the slide, the inner query determines the salary of employee Abel. The outer query takes the result of the inner query and uses this result to display all the employees who earn more than this amount. Oracle Database 10g: SQL Fundamentals I 6-6 6-6 Copyright © 2004, Oracle. All rights reserved. Guidelines for Using Subqueries • Enclose subqueries in parentheses. • Place subqueries on the right side of the comparison condition. • The ORDER BY clause in the subquery is not needed unless you are performing Top-N analysis. • Use single-row operators with single-row subqueries, and use multiple-row operators with multiple-row subqueries. Guidelines for Using Subqueries • A subquery must be enclosed in parentheses. • Place the subquery on the right side of the comparison condition for readability. • With Oracle8i and later releases, an ORDER BY clause can be used and is required in the subquery to perform Top-N analysis. - Prior to Oracle8i, however, subqueries could not contain an ORDER BY clause. Only one ORDER BY clause could be used for a SELECT statement; if specified, it had to be the last clause in the main SELECT statement. • Two classes of comparison conditions are used in subqueries: single-row operators and multiple-row operators. Oracle Database 10g: SQL Fundamentals I 6-7 6-7 Copyright © 2004, Oracle. All rights reserved. Types of Subqueries • Single-row subquery • Multiple-row subquery Main query Subquery returns ST_CLERK ST_CLERK SA_MAN Main query Subquery returns Types of Subqueries • Single-row subqueries: Queries that return only one row from the inner SELECT statement • Multiple-row subqueries: Queries that return more than one row from the inner SELECT statement Note: There are also multiple-column subqueries, which are queries that return more than one column from the inner SELECT statement. These are covered in the Oracle Database 10g: SQL Fundamentals II course. Oracle Database 10g: SQL Fundamentals I 6-8 6-8 Copyright © 2004, Oracle. All rights reserved. Single-Row Subqueries • Return only one row • Use single-row comparison operators Greater than or equal to >= Less than < Less than or equal to<= Equal to= Not equal to<> Greater than > MeaningOperator Single-Row Subqueries A single-row subquery is one that returns one row from the inner SELECT statement. This type of subquery uses a single-row operator. The slide gives a list of single-row operators. Example Display the employees whose job ID is the same as that of employee 141: SELECT last_name, job_id FROM employees WHERE job_id = (SELECT job_id FROM employees WHERE employee_id = 141); Oracle Database 10g: SQL Fundamentals I 6-9 6-9 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, job_id, salary FROM employees WHERE job_id = (SELECT job_id FROM employees WHERE employee_id = 141) AND salary > (SELECT salary FROM employees WHERE employee_id = 143); Executing Single-Row Subqueries ST_CLERK 2600 Executing Single-Row Subqueries A SELECT statement can be considered as a query block. The example in the slide displays employees whose job ID is the same as that of employee 141 and whose salary is greater than that of employee 143. The example consists of three query blocks: the outer query and two inner queries. The inner query blocks are executed first, producing the query results ST_CLERK and 2600, respectively. The outer query block is then processed and uses the values that were returned by the inner queries to complete its search conditions. Both inner queries return single values (ST_CLERK and 2600, respectively), so this SQL statement is called a single-row subquery. Note: The outer and inner queries can get data from different tables. Oracle Database 10g: SQL Fundamentals I 6-10 6-10 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, job_id, salary FROM employees WHERE salary = (SELECT MIN(salary) FROM employees); Using Group Functions in a Subquery 2500 Using Group Functions in a Subquery You can display data from a main query by using a group function in a subquery to return a single row. The subquery is in parentheses and is placed after the comparison condition. The example in the slide displays the employee last name, job ID, and salary of all employees whose salary is equal to the minimum salary. The MIN group function returns a single value (2500) to the outer query. Oracle Database 10g: SQL Fundamentals I 6-11 6-11 Copyright © 2004, Oracle. All rights reserved. SELECT department_id, MIN(salary) FROM employees GROUP BY department_id HAVING MIN(salary) > (SELECT MIN(salary) FROM employees WHERE department_id = 50); The HAVING Clause with Subqueries • The Oracle server executes subqueries first. • The Oracle server returns results into the HAVING clause of the main query. 2500 The HAVING Clause with Subqueries You can use subqueries not only in the WHERE clause but also in the HAVING clause. The Oracle server executes the subquery, and the results are returned into the HAVING clause of the main query. The SQL statement in the slide displays all the departments that have a minimum salary greater than that of department 50. Example Find the job with the lowest average salary. SELECT job_id, AVG(salary) FROM employees GROUP BY job_id HAVING AVG(salary) = (SELECT MIN(AVG(salary)) FROM employees GROUP BY job_id); … Oracle Database 10g: SQL Fundamentals I 6-12 6-12 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, last_name FROM employees WHERE salary = (SELECT MIN(salary) FROM employees GROUP BY department_id); What Is Wrong with This Statement? ERROR at line 4: ORA-01427: single-row subquery returns more than one row Single-row operator with multiple-row subquery Errors with Subqueries One common error with subqueries occurs when more than one row is returned for a single- row subquery. In the SQL statement in the slide, the subquery contains a GROUP BY clause, which implies that the subquery will return multiple rows, one for each group that it finds. In this case, the result of the subquery are 4400, 6000, 2500, 4200, 7000, 17000, and 8300. The outer query takes those results and uses them in its WHERE clause. The WHERE clause contains an equal (=) operator, a single-row comparison operator that expects only one value. The = operator cannot accept more than one value from the subquery and therefore generates the error. To correct this error, change the = operator to IN. Oracle Database 10g: SQL Fundamentals I 6-13 6-13 Copyright © 2004, Oracle. All rights reserved. SELECT last_name, job_id FROM employees WHERE job_id = (SELECT job_id FROM employees WHERE last_name = 'Haas'); Will This Statement Return Rows? no rows selected Subquery returns no values. Problems with Subqueries A common problem with subqueries occurs when no rows are returned by the inner query. In the SQL statement in the slide, the subquery contains a WHERE clause. Presumably, the intention is to find the employee whose name is Haas. The statement is correct but selects no rows when executed. There is no employee named Haas. So the subquery returns no rows. The outer query takes the results of the subquery (null) and uses these results in its WHERE clause. The outer query finds no employee with a job ID equal to null, and so returns no rows. If a job existed with a value of null, the row is not returned because comparison of two null values yields a null; therefore, the WHERE condition is not true. Oracle Database 10g: SQL Fundamentals I 6-14 6-14 Copyright © 2004, Oracle. All rights reserved. Multiple-Row Subqueries • Return more than one row • Use multiple-row comparison operators Compare value to every value returned by the subquery ALL Equal to any member in the listIN Compare value to each value returned by the subquery ANY MeaningOperator Multiple-Row Subqueries Subqueries that return more than one row are called multiple-row subqueries. You use a multiple-row operator, instead of a single-row operator, with a multiple-row subquery. The multiple-row operator expects one or more values: SELECT last_name, salary, department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id); Example Find the employees who earn the same salary as the minimum salary for each department. The inner query is executed first, producing a query result. The main query block is then processed and uses the values that were returned by the inner query to complete its search condition. In fact, the main query appears to the Oracle server as follows: SELECT last_name, salary, department_id FROM employees WHERE salary IN (2500, 4200, 4400, 6000, 7000, 8300, 8600, 17000); Oracle Database 10g: SQL Fundamentals I 6-15 6-15 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, last_name, job_id, salary FROM employees WHERE salary < ANY (SELECT salary FROM employees WHERE job_id = 'IT_PROG') AND job_id <> 'IT_PROG'; Using the ANY Operator in Multiple-Row Subqueries 9000, 6000, 4200 Oracle Database 10g: SQL Fundamentals I 6-16 6-16 Copyright © 2004, Oracle. All rights reserved. SELECT employee_id, last_name, job_id, salary FROM employees WHERE salary < ALL (SELECT salary FROM employees WHERE job_id = 'IT_PROG') AND job_id <> 'IT_PROG'; Using the ALL Operator in Multiple-Row Subqueries 9000, 6000, 4200 Multiple-Row Subqueries (continued) The ALL operator compares a value to every value returned by a subquery. The slide example displays employees whose salary is less than the salary of all employees with a job ID of IT_PROG and whose job is not IT_PROG. >ALL means more than the maximum, and <ALL means less than the minimum. The NOT operator can be used with IN, ANY, and ALL operators. Oracle Database 10g: SQL Fundamentals I 6-17 6-17 Copyright © 2004, Oracle. All rights reserved. SELECT emp.last_name FROM employees emp WHERE emp.employee_id NOT IN (SELECT mgr.manager_id FROM employees mgr); no rows selected Null Values in a Subquery Returning Nulls in the Resulting Set of a Subquery The SQL statement in the slide attempts to display all the employees who do not have any subordinates. Logically, this SQL statement should have returned 12 rows. However, the SQL statement does not return any rows. One of the values returned by the inner query is a null value, and hence the entire query returns no rows. The reason is that all conditions that compare a null value result in a null. So whenever null values are likely to be part of the results set of a subquery, do not use the NOT IN operator. The NOT IN operator is equivalent to <> ALL. Notice that the null value as part of the results set of a subquery is not a problem if you use the IN operator. The IN operator is equivalent to =ANY. For example, to display the employees who have subordinates, use the following SQL statement: SELECT emp.last_name FROM employees emp WHERE emp.employee_id IN(SELECT mgr.manager_id FROM employees mgr); Oracle Database 10g: SQL Fundamentals I 6-18 Returning Nulls in the Resulting Set of a Subquery (continued) Alternatively, a WHERE clause can be included in the subquery to display all employees who do not have any subordinates: SELECT last_name FROM employees WHERE employee_id NOT IN (SELECT manager_id FROM employees WHERE manager_id IS NOT NULL); Oracle Database 10g: SQL Fundamentals I 6-19 6-19 Copyright © 2004, Oracle. All rights reserved. SELECT select_list FROM table WHERE expr operator (SELECT select_list FROM table); Summary In this lesson, you should have learned how to: • Identify when a subquery can help solve a question • Write subqueries when a query is based on unknown values Summary In this lesson, you should have learned how to use subqueries. A subquery is a SELECT statement that is embedded in a clause of another SQL statement. Subqueries are useful when a query is based on a search criterion with unknown intermediate values. Subqueries have the following characteristics: • Can pass one row of data to a main statement that contains a single-row operator, such as =, <>, >, >=, <, or <= • Can pass multiple rows of data to a main statement that contains a multiple-row operator, such as IN • Are processed first by the Oracle server, after which the WHERE or HAVING clause uses the results • Can contain group functions Oracle Database 10g: SQL Fundamentals I 6-20 6-20 Copyright © 2004, Oracle. All rights reserved. Practice 6: Overview This practice covers the following topics: • Creating subqueries to query values based on unknown criteria • Using subqueries to find out which values exist in one set of data and not in another Practice 6: Overview In this practice, you write complex queries using nested SELECT statements. Paper-Based Questions You may want to create the inner query first for these questions. Make sure that it runs and produces the data that you anticipate before you code the outer query. Oracle Database 10g: SQL Fundamentals I 6-21 Practice 6 1. The HR department needs a query that prompts the user for an employee last name. The query then displays the last name and hire date of any employee in the same department as the employee whose name they supply (excluding that employee). For example, if the user enters Zlotkey, find all employees who work with Zlotkey (excluding Zlotkey). 2. Create a report that displays the employee number, last name, and salary of all employees who earn more than the average salary. Sort the results in order of ascending salary. 3. Write a query that displays the employee number and last name of all employees who work in a department with any employee whose last name contains a u. Place your SQL statement in a text file named lab_06_03.sql. Run your query. Oracle Database 10g: SQL Fundamentals I 6-22 Practice 6 (continued) 4. The HR department needs a report that displays the last name, department number, and job ID of all employees whose department location ID is 1700. Modify the query so that the user is prompted for a location ID. Save this to a file named lab_06_04.sql. 5. Create a report for HR that displays the last name and salary of every employee who reports to King. 6. Create a report for HR that displays the department number, last name, and job ID for every employee in the Executive department. If you have time, complete the following exercise: 7. Modify the query in lab_06_03.sql to display the employee number, last name, and salary of all employees who earn more than the average salary and who work in a department with any employee whose last name contains a u. Resave lab_06_03.sql as lab_06_07.sql. Run the statement in lab_06_07.sql. Copyright © 2004, Oracle. All rights reserved. Using the Set Operators Oracle Database 10g: SQL Fundamentals I 7-2 7-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Describe set operators • Use a set operator to combine multiple queries into a single query • Control the order of rows returned Objectives In this lesson, you learn how to write queries by using set operators. Oracle Database 10g: SQL Fundamentals I 7-3 7-3 Copyright © 2004, Oracle. All rights reserved. Set Operators UNION/UNION ALL A B A B A B INTERSECT A B MINUS Set Operators The set operators combine the results of two or more component queries into one result. Queries containing set operators are called compound queries. All set operators have equal precedence. If a SQL statement contains multiple set operators, the Oracle server evaluates them from left (top) to right (bottom) if no parentheses explicitly specify another order. You should use parentheses to specify the order of evaluation explicitly in queries that use the INTERSECT operator with other set operators. Operator Returns UNION All distinct rows selected by either query UNION ALL All rows selected by either query, including all duplicates INTERSECT All distinct rows selected by both queries MINUS All distinct rows that are selected by the first SELECT statement and not selected in the second SELECT statement Oracle Database 10g: SQL Fundamentals I 7-4 7-4 Copyright © 2004, Oracle. All rights reserved. Tables Used in This Lesson The tables used in this lesson are: • EMPLOYEES: Provides details regarding all current employees • JOB_HISTORY: Records the details of the start date and end date of the former job, and the job identification number and department when an employee switches jobs Tables Used in This Lesson Two tables are used in this lesson. They are the EMPLOYEES table and the JOB_HISTORY table. The EMPLOYEES table stores the employee details. For the human resource records, this table stores a unique identification number and e-mail address for each employee. The details of the employee’s job identification number, salary, and manager are also stored. Some of the employees earn a commission in addition to their salary; this information is tracked, too. The company organizes the roles of employees into jobs. Some of the employees have been with the company for a long time and have switched to different jobs. This is monitored using the JOB_HISTORY table. When an employee switches jobs, the details of the start date and end date of the former job, the job identification number, and the department are recorded in the JOB_HISTORY table. The structure and data from the EMPLOYEES and JOB_HISTORY tables are shown on the following pages. Oracle Database 10g: SQL Fundamentals I 7-5 Tables Used in This Lesson (continued) There have been instances in the company of people who have held the same position more than once during their tenure with the company. For example, consider the employee Taylor, who joined the company on 24-MAR-1998. Taylor held the job title SA_REP for the period 24-MAR-98 to 31-DEC-98 and the job title SA_MAN for the period 01-JAN-99 to 31-DEC-99. Taylor moved back into the job title of SA_REP, which is his current job title. Similarly, consider the employee Whalen, who joined the company on 17-SEP-1987. Whalen held the job title AD_ASST for the period 17-SEP-87 to 17-JUN-93 and the job title AC_ACCOUNT for the period 01-JUL-94 to 31-DEC-98. Whalen moved back into the job title of AD_ASST, which is his current job title. DESCRIBE employees Oracle Database 10g: SQL Fundamentals I 7-6 Tables Used in This Lesson (continued) SELECT employee_id, last_name, job_id, hire_date, department_id FROM employees; DESCRIBE job_history Oracle Database 10g: SQL Fundamentals I 7-7 Tables Used in This Lesson (continued) SELECT * FROM job_history; Oracle Database 10g: SQL Fundamentals I 7-8 7-8 Copyright © 2004, Oracle. All rights reserved. UNION Operator A B The UNION operator returns results from both queries after eliminating duplications. UNION Operator The UNION operator returns all rows that are selected by either query. Use the UNION operator to return all rows from multiple tables and eliminate any duplicate rows. Guidelines • The number of columns and the data types of the columns being selected must be identical in all the SELECT statements used in the query. The names of the columns need not be identical. • UNION operates over all of the columns being selected. • NULL values are not ignored during duplicate checking. • The IN operator has a higher precedence than the UNION operator. • By default, the output is sorted in ascending order of the first column of the SELECT clause. Oracle Database 10g: SQL Fundamentals I 7-9 7-9 Copyright © 2004, Oracle. All rights reserved. Using the UNION Operator Display the current and previous job details of all employees. Display each employee only once. SELECT employee_id, job_id FROM employees UNION SELECT employee_id, job_id FROM job_history; … Using the UNION Operator The UNION operator eliminates any duplicate records. If records that occur in both the EMPLOYEES and the JOB_HISTORY tables are identical, the records are displayed only once. Observe in the output shown on the slide that the record for the employee with the EMPLOYEE_ID 200 appears twice because the JOB_ID is different in each row. Consider the following example: SELECT employee_id, job_id, department_id FROM employees UNION SELECT employee_id, job_id, department_id FROM job_history; … … Oracle Database 10g: SQL Fundamentals I 7-10 Using the UNION Operator (continued) In the preceding output, employee 200 appears three times. Why? Notice the DEPARTMENT_ID values for employee 200. One row has a DEPARTMENT_ID of 90, another 10, and the third 90. Because of these unique combinations of job IDs and department IDs, each row for employee 200 is unique and therefore not considered to be a duplicate. Observe that the output is sorted in ascending order of the first column of the SELECT clause (in this case, EMPLOYEE_ID). Oracle Database 10g: SQL Fundamentals I 7-11 7-11 Copyright © 2004, Oracle. All rights reserved. UNION ALL Operator A B The UNION ALL operator returns results from both queries, including all duplications. UNION ALL Operator Use the UNION ALL operator to return all rows from multiple queries. Guidelines The guidelines for UNION and UNION ALL are the same, with the following two exceptions that pertain to UNION ALL: • Unlike UNION, duplicate rows are not eliminated and the output is not sorted by default. • The DISTINCT keyword cannot be used. Oracle Database 10g: SQL Fundamentals I 7-12 7-12 Copyright © 2004, Oracle. All rights reserved. Using the UNION ALL Operator Display the current and previous departments of all employees. SELECT employee_id, job_id, department_id FROM employees UNION ALL SELECT employee_id, job_id, department_id FROM job_history ORDER BY employee_id; Oracle Database 10g: SQL Fundamentals I 7-13 7-13 Copyright © 2004, Oracle. All rights reserved. INTERSECT Operator A B The INTERSECT operator returns rows that are common to both queries. INTERSECT Operator Use the INTERSECT operator to return all rows that are common to multiple queries. Guidelines • The number of columns and the data types of the columns being selected by the SELECT statements in the queries must be identical in all the SELECT statements used in the query. The names of the columns need not be identical. • Reversing the order of the intersected tables does not alter the result. • INTERSECT does not ignore NULL values. Oracle Database 10g: SQL Fundamentals I 7-14 7-14 Copyright © 2004, Oracle. All rights reserved. Using the INTERSECT Operator Display the employee IDs and job IDs of those employees who currently have a job title that is the same as their job title when they were initially hired (that is, they changed jobs but have now gone back to doing their original job). SELECT employee_id, job_id FROM employees INTERSECT SELECT employee_id, job_id FROM job_history; INTERSECT Operator (continued) In the example in this slide, the query returns only the records that have the same values in the selected columns in both tables. What will be the results if you add the DEPARTMENT_ID column to the SELECT statement from the EMPLOYEES table and add the DEPARTMENT_ID column to the SELECT statement from the JOB_HISTORY table and run this query? The results may be different because of the introduction of another column whose values may or may not be duplicates. Example SELECT employee_id, job_id, department_id FROM employees INTERSECT SELECT employee_id, job_id, department_id FROM job_history; Employee 200 is no longer part of the results because the EMPLOYEES.DEPARTMENT_ID value is different from the JOB_HISTORY.DEPARTMENT_ID value. Oracle Database 10g: SQL Fundamentals I 7-15 7-15 Copyright © 2004, Oracle. All rights reserved. MINUS Operator A B The MINUS operator returns rows in the first query that are not present in the second query. MINUS Operator Use the MINUS operator to return rows returned by the first query that are not present in the second query (the first SELECT statement MINUS the second SELECT statement). Guidelines • The number of columns and the data types of the columns being selected by the SELECT statements in the queries must be identical in all the SELECT statements used in the query. The names of the columns need not be identical. • All of the columns in the WHERE clause must be in the SELECT clause for the MINUS operator to work. Oracle Database 10g: SQL Fundamentals I 7-16 7-16 Copyright © 2004, Oracle. All rights reserved. MINUS Operator Display the employee IDs of those employees who have not changed their jobs even once. SELECT employee_id,job_id FROM employees MINUS SELECT employee_id,job_id FROM job_history; Oracle Database 10g: SQL Fundamentals I 7-17 7-17 Copyright © 2004, Oracle. All rights reserved. Set Operator Guidelines • The expressions in the SELECT lists must match in number and data type. • Parentheses can be used to alter the sequence of execution. • The ORDER BY clause: – Can appear only at the very end of the statement – Will accept the column name, aliases from the first SELECT statement, or the positional notation Set Operator Guidelines • The expressions in the select lists of the queries must match in number and data type. Queries that use UNION, UNION ALL, INTERSECT, and MINUS operators in their WHERE clause must have the same number and type of columns in their SELECT list. For example: SELECT employee_id, department_id FROM employees WHERE (employee_id, department_id) IN (SELECT employee_id, department_id FROM employees UNION SELECT employee_id, department_id FROM job_history); • The ORDER BY clause: - Can appear only at the very end of the statement - Will accept the column name, an alias, or the positional notation • The column name or alias, if used in an ORDER BY clause, must be from the first SELECT list. • Set operators can be used in subqueries. Oracle Database 10g: SQL Fundamentals I 7-18 7-18 Copyright © 2004, Oracle. All rights reserved. The Oracle Server and Set Operators • Duplicate rows are automatically eliminated except in UNION ALL. • Column names from the first query appear in the result. • The output is sorted in ascending order by default except in UNION ALL. The Oracle Server and Set Operators When a query uses set operators, the Oracle server eliminates duplicate rows automatically except in the case of the UNION ALL operator. The column names in the output are decided by the column list in the first SELECT statement. By default, the output is sorted in ascending order of the first column of the SELECT clause. The corresponding expressions in the select lists of the component queries of a compound query must match in number and data type. If component queries select character data, the data type of the return values is determined as follows: • If both queries select values of data type CHAR, the returned values have data type CHAR. • If either or both of the queries select values of data type VARCHAR2, the returned values have data type VARCHAR2. Oracle Database 10g: SQL Fundamentals I 7-19 7-19 Copyright © 2004, Oracle. All rights reserved. Matching the SELECT Statements Using the UNION operator, display the department ID, location, and hire date for all employees. SELECT department_id, TO_NUMBER(null) location, hire_date FROM employees UNION SELECT department_id, location_id, TO_DATE(null) FROM departments; Oracle Database 10g: SQL Fundamentals I 7-20 7-20 Copyright © 2004, Oracle. All rights reserved. Matching the SELECT Statement: Example Using the UNION operator, display the employee ID, job ID, and salary of all employees. SELECT employee_id, job_id,salary FROM employees UNION SELECT employee_id, job_id,0 FROM job_history; Oracle Database 10g: SQL Fundamentals I 7-21 7-21 Copyright © 2004, Oracle. All rights reserved. Controlling the Order of Rows Produce an English sentence using two UNION operators. COLUMN a_dummy NOPRINT SELECT 'sing' AS \"My dream\", 3 a_dummy FROM dual UNION SELECT 'I''d like to teach', 1 a_dummy FROM dual UNION SELECT 'the world to', 2 a_dummy FROM dual ORDER BY a_dummy; Controlling the Order of Rows By default, the output is sorted in ascending order on the first column. You can use the ORDER BY clause to change this. The ORDER BY clause can be used only once in a compound query. If used, the ORDER BY clause must be placed at the end of the query. The ORDER BY clause accepts the column name or an alias. Without the ORDER BY clause, the code example in the slide produces the following output in the alphabetical order of the first column: Note: Consider a compound query where the UNION set operator is used more than once. In this case, the ORDER BY clause can use only positions rather than explicit expressions. The iSQL*Plus COLUMN Command You can use the iSQL*Plus COLUMN command to customize column headings. Oracle Database 10g: SQL Fundamentals I 7-22 The iSQL*Plus COLUMN Command (continued) Syntax: COL[UMN] [{column|alias} [option]] Where OPTION is: CLE[AR]: Clears any column formats HEA[DING] text: Sets the column heading FOR[MAT] format: Changes the display of the column using a format model NOPRINT | PRINT: Suppresses or displays the column heading and data NULL The following statement suppresses the column data and title heading for the column named A_DUMMY. Notice that the first SELECT clause in the previous slide creates a dummy column named A_DUMMY. COLUMN a_dummy NOPRINT Oracle Database 10g: SQL Fundamentals I 7-23 7-23 Copyright © 2004, Oracle. All rights reserved. Summary In this lesson, you should have learned how to: • Use UNION to return all distinct rows • Use UNION ALL to return all rows, including duplicates • Use INTERSECT to return all rows that are shared by both queries • Use MINUS to return all distinct rows that are selected by the first query but not by the second • Use ORDER BY only at the very end of the statement Summary • The UNION operator returns all rows selected by either query. Use the UNION operator to return all rows from multiple tables and eliminate any duplicate rows. • Use the UNION ALL operator to return all rows from multiple queries. Unlike the case with the UNION operator, duplicate rows are not eliminated and the output is not sorted by default. • Use the INTERSECT operator to return all rows that are common to multiple queries. • Use the MINUS operator to return rows returned by the first query that are not present in the second query. • Remember to use the ORDER BY clause only at the very end of the compound statement. • Make sure that the corresponding expressions in the SELECT lists match in number and data type. Oracle Database 10g: SQL Fundamentals I 7-24 7-24 Copyright © 2004, Oracle. All rights reserved. Practice 7: Overview In this practice, you use the set operators to create reports: • Using the UNION operator • Using the INTERSECTION operator • Using the MINUS operator Practice 7: Overview In this practice, you write queries using the set operators. Oracle Database 10g: SQL Fundamentals I 7-25 Practice 7 1. The HR department needs a list of department IDs for departments that do not contain the job ID ST_CLERK. Use set operators to create this report. 2. The HR department needs a list of countries that have no departments located in them. Display the country ID and the name of the countries. Use set operators to create this report. 3. Produce a list of jobs for departments 10, 50, and 20, in that order. Display job ID and department ID using set operators. 4. Create a report that lists the employee IDs and job IDs of those employees who currently have a job title that is the same as their job title when they were initially hired by the company (that is, they changed jobs but have now gone back to doing their original job). Oracle Database 10g: SQL Fundamentals I 7-26 Practice 7 (continued) 5. The HR department needs a report with the following specifications: - Last name and department ID of all the employees from the EMPLOYEES table, regardless of whether or not they belong to a department - Department ID and department name of all the departments from the DEPARTMENTS table, regardless of whether or not they have employees working in them Write a compound query to accomplish this. Copyright © 2004, Oracle. All rights reserved. Manipulating Data Oracle Database 10g: SQL Fundamentals I 8-2 8-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Describe each data manipulation language (DML) statement • Insert rows into a table • Update rows in a table • Delete rows from a table • Control transactions Objective In this lesson, you learn how to use DML statements to insert rows into a table, update existing rows in a table, and delete existing rows from a table. You also learn how to control transactions with the COMMIT, SAVEPOINT, and ROLLBACK statements. Oracle Database 10g: SQL Fundamentals I 8-3 8-3 Copyright © 2004, Oracle. All rights reserved. Data Manipulation Language • A DML statement is executed when you: – Add new rows to a table – Modify existing rows in a table – Remove existing rows from a table • A transaction consists of a collection of DML statements that form a logical unit of work. Data Manipulation Language Data manipulation language (DML) is a core part of SQL. When you want to add, update, or delete data in the database, you execute a DML statement. A collection of DML statements that form a logical unit of work is called a transaction. Consider a banking database. When a bank customer transfers money from a savings account to a checking account, the transaction might consist of three separate operations: decrease the savings account, increase the checking account, and record the transaction in the transaction journal. The Oracle server must guarantee that all three SQL statements are performed to maintain the accounts in proper balance. When something prevents one of the statements in the transaction from executing, the other statements of the transaction must be undone. Oracle Database 10g: SQL Fundamentals I 8-4 8-4 Copyright © 2004, Oracle. All rights reserved. Adding a New Row to a Table DEPARTMENTS New row Insert new row into the DEPARTMENTS table Adding a New Row to a Table The slide graphic illustrates adding a new department to the DEPARTMENTS table. Oracle Database 10g: SQL Fundamentals I 8-5 8-5 Copyright © 2004, Oracle. All rights reserved. INSERT Statement Syntax • Add new rows to a table by using the INSERT statement: • With this syntax, only one row is inserted at a time. INSERT INTO table [(column [, column...])] VALUES (value [, value...]); Adding a New Row to a Table (continued) You can add new rows to a table by issuing the INSERT statement. In the syntax: table is the name of the table column is the name of the column in the table to populate value is the corresponding value for the column Note: This statement with the VALUES clause adds only one row at a time to a table. Oracle Database 10g: SQL Fundamentals I 8-6 8-6 Copyright © 2004, Oracle. All rights reserved. Inserting New Rows • Insert a new row containing values for each column. • List values in the default order of the columns in the table. • Optionally, list the columns in the INSERT clause. • Enclose character and date values in single quotation marks. INSERT INTO departments(department_id, department_name, manager_id, location_id) VALUES (70, 'Public Relations', 100, 1700); 1 row created. Adding a New Row to a Table (continued) Because you can insert a new row that contains values for each column, the column list is not required in the INSERT clause. However, if you do not use the column list, the values must be listed according to the default order of the columns in the table, and a value must be provided for each column. DESCRIBE departments For clarity, use the column list in the INSERT clause. Enclose character and date values in single quotation marks; it is not recommended that you enclose numeric values in single quotation marks. Number values should not be enclosed in single quotation marks, because implicit conversion may take place for numeric values that are assigned to NUMBER data type columns if single quotation marks are included. Oracle Database 10g: SQL Fundamentals I 8-7 8-7 Copyright © 2004, Oracle. All rights reserved. INSERT INTO departments VALUES (100, 'Finance', NULL, NULL); 1 row created. INSERT INTO departments (department_id, department_name ) VALUES (30, 'Purchasing'); 1 row created. Inserting Rows with Null Values • Implicit method: Omit the column from the column list. • Explicit method: Specify the NULL keyword in the VALUES clause. Methods for Inserting Null Values Be sure that you can use null values in the targeted column by verifying the Null? status with the iSQL*Plus DESCRIBE command. The Oracle server automatically enforces all data types, data ranges, and data integrity constraints. Any column that is not listed explicitly obtains a null value in the new row. Common errors that can occur during user input: • Mandatory value missing for a NOT NULL column • Duplicate value violates uniqueness constraint • Foreign key constraint violated • CHECK constraint violated • Data type mismatch • Value too wide to fit in column Method Description Implicit Omit the column from the column list. Explicit Specify the NULL keyword in the VALUES list; specify the empty string ('') in the VALUES list for character strings and dates. Oracle Database 10g: SQL Fundamentals I 8-8 8-8 Copyright © 2004, Oracle. All rights reserved. INSERT INTO employees (employee_id, first_name, last_name, email, phone_number, hire_date, job_id, salary, commission_pct, manager_id, department_id) VALUES (113, 'Louis', 'Popp', 'LPOPP', '515.124.4567', SYSDATE, 'AC_ACCOUNT', 6900, NULL, 205, 100); 1 row created. Inserting Special Values The SYSDATE function records the current date and time. Inserting Special Values by Using SQL Functions You can use functions to enter special values in your table. The slide example records information for employee Popp in the EMPLOYEES table. It supplies the current date and time in the HIRE_DATE column. It uses the SYSDATE function for current date and time. You can also use the USER function when inserting rows in a table. The USER function records the current username. Confirming Additions to the Table SELECT employee_id, last_name, job_id, hire_date, commission_pct FROM employees WHERE employee_id = 113; Oracle Database 10g: SQL Fundamentals I 8-9 8-9 Copyright © 2004, Oracle. All rights reserved. • Add a new employee. • Verify your addition. Inserting Specific Date Values INSERT INTO employees VALUES (114, 'Den', 'Raphealy', 'DRAPHEAL', '515.127.4561', TO_DATE('FEB 3, 1999', 'MON DD, YYYY'), 'AC_ACCOUNT', 11000, NULL, 100, 30); 1 row created. Inserting Specific Date and Time Values The DD-MON-YY format is usually used to insert a date value. With this format, recall that the century defaults to the current century. Because the date also contains time information, the default time is midnight (00:00:00). If a date must be entered in a format other than the default format (for example, with another century or a specific time), you must use the TO_DATE function. The example in the slide records information for employee Raphealy in the EMPLOYEES table. It sets the HIRE_DATE column to be February 3, 1999. If you use the following statement instead of the one shown in the slide, the year of the hire date is interpreted as 2099. INSERT INTO employees VALUES (114, 'Den', 'Raphealy', 'DRAPHEAL', '515.127.4561', '03-FEB-99', 'AC_ACCOUNT', 11000, NULL, 100, 30); If the RR format is used, the system provides the correct century automatically, even if it is not the current one. Oracle Database 10g: SQL Fundamentals I 8-10 8-10 Copyright © 2004, Oracle. All rights reserved. INSERT INTO departments (department_id, department_name, location_id) VALUES (&department_id, '&department_name',&location); Creating a Script • Use & substitution in a SQL statement to prompt for values. • & is a placeholder for the variable value. 1 row created. Creating a Script to Manipulate Data You can save commands with substitution variables to a file and execute the commands in the file. The slide example records information for a department in the DEPARTMENTS table. Run the script file and you are prompted for input for each of the & substitution variables. After entering a value for the substitution variable, click the Continue button. The values that you input are then substituted into the statement. This enables you to run the same script file over and over but supply a different set of values each time you run it. Oracle Database 10g: SQL Fundamentals I 8-11 8-11 Copyright © 2004, Oracle. All rights reserved. Copying Rows from Another Table • Write your INSERT statement with a subquery: • Do not use the VALUES clause. • Match the number of columns in the INSERT clause to those in the subquery. INSERT INTO sales_reps(id, name, salary, commission_pct) SELECT employee_id, last_name, salary, commission_pct FROM employees WHERE job_id LIKE '%REP%'; 4 rows created. Copying Rows from Another Table You can use the INSERT statement to add rows to a table where the values are derived from existing tables. In place of the VALUES clause, you use a subquery. Syntax INSERT INTO table [ column (, column) ] subquery; In the syntax: table is the table name column is the name of the column in the table to populate subquery is the subquery that returns rows to the table The number of columns and their data types in the column list of the INSERT clause must match the number of values and their data types in the subquery. To create a copy of the rows of a table, use SELECT * in the subquery: INSERT INTO copy_emp SELECT * FROM employees; For more information, see “SELECT” (“subqueries” section) in the Oracle Database SQL Reference. Oracle Database 10g: SQL Fundamentals I 8-12 8-12 Copyright © 2004, Oracle. All rights reserved. Changing Data in a Table EMPLOYEES Update rows in the EMPLOYEES table: Changing Data in a Table The slide illustrates changing the department number for employees in department 60 to department 30. Oracle Database 10g: SQL Fundamentals I 8-13 8-13 Copyright © 2004, Oracle. All rights reserved. • Modify existing rows with the UPDATE statement: • Update more than one row at a time (if required). UPDATE table SET column = value [, column = value, ...] [WHERE condition]; UPDATE Statement Syntax Updating Rows You can modify existing rows by using the UPDATE statement. In the syntax: table is the name of the table column is the name of the column in the table to populate value is the corresponding value or subquery for the column condition identifies the rows to be updated and is composed of column names, expressions, constants, subqueries, and comparison operators Confirm the update operation by querying the table to display the updated rows. For more information, see “UPDATE” in the Oracle Database SQL Reference. Note: In general, use the primary key to identify a single row. Using other columns can unexpectedly cause several rows to be updated. For example, identifying a single row in the EMPLOYEES table by name is dangerous, because more than one employee may have the same name. Oracle Database 10g: SQL Fundamentals I 8-14 8-14 Copyright © 2004, Oracle. All rights reserved. • Specific row or rows are modified if you specify the WHERE clause: • All rows in the table are modified if you omit the WHERE clause: Updating Rows in a Table UPDATE employees SET department_id = 70 WHERE employee_id = 113; 1 row updated. UPDATE copy_emp SET department_id = 110; 22 rows updated. Updating Rows (continued) The UPDATE statement modifies specific rows if the WHERE clause is specified. The slide example transfers employee 113 (Popp) to department 70. If you omit the WHERE clause, all the rows in the table are modified. SELECT last_name, department_id FROM copy_emp; Note: The COPY_EMP table has the same data as the EMPLOYEES table. Oracle Database 10g: SQL Fundamentals I 8-15 8-15 Copyright © 2004, Oracle. All rights reserved. UPDATE employees SET job_id = (SELECT job_id FROM employees WHERE employee_id = 205), salary = (SELECT salary FROM employees WHERE employee_id = 205) WHERE employee_id = 114; 1 row updated. Updating Two Columns with a Subquery Update employee 114’s job and salary to match that of employee 205. Updating Two Columns with a Subquery You can update multiple columns in the SET clause of an UPDATE statement by writing multiple subqueries. Syntax UPDATE table SET column = (SELECT column FROM table WHERE condition) [ , column = (SELECT column FROM table WHERE condition)] [WHERE condition ] ; Note: If no rows are updated, the message “0 rows updated” is returned. Oracle Database 10g: SQL Fundamentals I 8-16 8-16 Copyright © 2004, Oracle. All rights reserved. UPDATE copy_emp SET department_id = (SELECT department_id FROM employees WHERE employee_id = 100) WHERE job_id = (SELECT job_id FROM employees WHERE employee_id = 200); 1 row updated. Updating Rows Based on Another Table Use subqueries in UPDATE statements to update rows in a table based on values from another table: Updating Rows Based on Another Table You can use subqueries in UPDATE statements to update rows in a table. The example in the slide updates the COPY_EMP table based on the values from the EMPLOYEES table. It changes the department number of all employees with employee 200’s job ID to employee 100’s current department number. Oracle Database 10g: SQL Fundamentals I 8-17 8-17 Copyright © 2004, Oracle. All rights reserved. Delete a row from the DEPARTMENTS table: Removing a Row from a Table DEPARTMENTS Removing a Row from a Table The slide graphic removes the Finance department from the DEPARTMENTS table (assuming that there are no constraints defined on the DEPARTMENTS table). Oracle Database 10g: SQL Fundamentals I 8-18 8-18 Copyright © 2004, Oracle. All rights reserved. DELETE Statement You can remove existing rows from a table by using the DELETE statement: DELETE [FROM] table [WHERE condition]; Deleting Rows You can remove existing rows by using the DELETE statement. In the syntax: table is the table name condition identifies the rows to be deleted and is composed of column names, expressions, constants, subqueries, and comparison operators Note: If no rows are deleted, the message “0 rows deleted” is returned. For more information, see “DELETE” in the Oracle Database SQL Reference. Oracle Database 10g: SQL Fundamentals I 8-19 8-19 Copyright © 2004, Oracle. All rights reserved. Deleting Rows from a Table • Specific rows are deleted if you specify the WHERE clause: • All rows in the table are deleted if you omit the WHERE clause: DELETE FROM departments WHERE department_name = 'Finance'; 1 row deleted. DELETE FROM copy_emp; 22 rows deleted. Deleting Rows (continued) You can delete specific rows by specifying the WHERE clause in the DELETE statement. The slide example deletes the Finance department from the DEPARTMENTS table. You can confirm the delete operation by displaying the deleted rows using the SELECT statement. SELECT * FROM departments WHERE department_name = 'Finance'; no rows selected. If you omit the WHERE clause, all rows in the table are deleted. The second example in the slide deletes all the rows from the COPY_EMP table, because no WHERE clause has been specified. Example Remove rows identified in the WHERE clause. DELETE FROM employees WHERE employee_id = 114; 1 row deleted. DELETE FROM departments WHERE department_id IN (30, 40); 2 rows deleted. Oracle Database 10g: SQL Fundamentals I 8-20 8-20 Copyright © 2004, Oracle. All rights reserved. Deleting Rows Based on Another Table Use subqueries in DELETE statements to remove rows from a table based on values from another table: DELETE FROM employees WHERE department_id = (SELECT department_id FROM departments WHERE department_name LIKE '%Public%'); 1 row deleted. Deleting Rows Based on Another Table You can use subqueries to delete rows from a table based on values from another table. The example in the slide deletes all the employees who are in a department where the department name contains the string Public. The subquery searches the DEPARTMENTS table to find the department number based on the department name containing the string Public. The subquery then feeds the department number to the main query, which deletes rows of data from the EMPLOYEES table based on this department number. Oracle Database 10g: SQL Fundamentals I 8-21 8-21 Copyright © 2004, Oracle. All rights reserved. TRUNCATE Statement • Removes all rows from a table, leaving the table empty and the table structure intact • Is a data definition language (DDL) statement rather than a DML statement; cannot easily be undone • Syntax: • Example: TRUNCATE TABLE table_name; TRUNCATE TABLE copy_emp; TRUNCATE Statement A more efficient method of emptying a table is with the TRUNCATE statement. You can use the TRUNCATE statement to quickly remove all rows from a table or cluster. Removing rows with the TRUNCATE statement is faster than removing them with the DELETE statement for the following reasons: • The TRUNCATE statement is a data definition language (DDL) statement and generates no rollback information. Rollback information is covered later in this lesson. • Truncating a table does not fire the delete triggers of the table. • If the table is the parent of a referential integrity constraint, you cannot truncate the table. You need to disable the constraint before issuing the TRUNCATE statement. Disabling constraints is covered in a subsequent lesson. Oracle Database 10g: SQL Fundamentals I 8-22 8-22 Copyright © 2004, Oracle. All rights reserved. INSERT INTO (SELECT employee_id, last_name, email, hire_date, job_id, salary, department_id FROM employees WHERE department_id = 50) VALUES (99999, 'Taylor', 'DTAYLOR', TO_DATE('07-JUN-99', 'DD-MON-RR'), 'ST_CLERK', 5000, 50); 1 row created. Using a Subquery in an INSERT Statement Using a Subquery in an INSERT Statement You can use a subquery in place of the table name in the INTO clause of the INSERT statement. The select list of this subquery must have the same number of columns as the column list of the VALUES clause. Any rules on the columns of the base table must be followed if the INSERT statement is to work successfully. For example, you could not put in a duplicate employee ID or omit a value for a mandatory not-null column. Oracle Database 10g: SQL Fundamentals I 8-23 8-23 Copyright © 2004, Oracle. All rights reserved. Using a Subquery in an INSERT Statement Verify the results: Oracle Database 10g: SQL Fundamentals I 8-24 8-24 Copyright © 2004, Oracle. All rights reserved. Database Transactions A database transaction consists of one of the following: • DML statements that constitute one consistent change to the data • One DDL statement • One data control language (DCL) statement Database Transactions The Oracle server ensures data consistency based on transactions. Transactions give you more flexibility and control when changing data, and they ensure data consistency in the event of user process failure or system failure. Transactions consist of DML statements that make up one consistent change to the data. For example, a transfer of funds between two accounts should include the debit to one account and the credit to another account in the same amount. Both actions should either fail or succeed together; the credit should not be committed without the debit. Transaction Types Type Description Data manipulation language (DML) Consists of any number of DML statements that the Oracle server treats as a single entity or a logical unit of work Data definition language (DDL) Consists of only one DDL statement Data control language (DCL) Consists of only one DCL statement Oracle Database 10g: SQL Fundamentals I 8-25 8-25 Copyright © 2004, Oracle. All rights reserved. Database Transactions • Begin when the first DML SQL statement is executed. • End with one of the following events: – A COMMIT or ROLLBACK statement is issued. – A DDL or DCL statement executes (automatic commit). – The user exits iSQL*Plus. – The system crashes. When Does a Transaction Start and End? A transaction begins when the first DML statement is encountered and ends when one of the following occurs: • A COMMIT or ROLLBACK statement is issued. • A DDL statement, such as CREATE, is issued. • A DCL statement is issued. • The user exits iSQL*Plus. • A machine fails or the system crashes. After one transaction ends, the next executable SQL statement automatically starts the next transaction. A DDL statement or a DCL statement is automatically committed and therefore implicitly ends a transaction. Oracle Database 10g: SQL Fundamentals I 8-26 8-26 Copyright © 2004, Oracle. All rights reserved. Advantages of COMMIT and ROLLBACK Statements With COMMIT and ROLLBACK statements, you can: • Ensure data consistency • Preview data changes before making changes permanent • Group logically related operations Advantages of COMMIT and ROLLBACK With the COMMIT and ROLLBACK statements, you have control over making changes to the data permanent. Oracle Database 10g: SQL Fundamentals I 8-27 8-27 Copyright © 2004, Oracle. All rights reserved. Controlling Transactions SAVEPOINT B SAVEPOINT A DELETE INSERT UPDATE INSERT COMMITTime Transaction ROLLBACK to SAVEPOINT B ROLLBACK to SAVEPOINT A ROLLBACK Explicit Transaction Control Statements You can control the logic of transactions by using the COMMIT, SAVEPOINT, and ROLLBACK statements. Note: SAVEPOINT is not ANSI standard SQL. Statement Description COMMIT Ends the current transaction by making all pending data changes permanent SAVEPOINT name Marks a savepoint within the current transaction ROLLBACK ROLLBACK ends the current transaction by discarding all pending data changes. ROLLBACK TO SAVEPOINT name ROLLBACK TO SAVEPOINT rolls back the current transaction to the specified savepoint, thereby discarding any changes and or savepoints that were created after the savepoint to which you are rolling back. If you omit the TO SAVEPOINT clause, the ROLLBACK statement rolls back the entire transaction. Because savepoints are logical, there is no way to list the savepoints that you have created. Oracle Database 10g: SQL Fundamentals I 8-28 8-28 Copyright © 2004, Oracle. All rights reserved. UPDATE... SAVEPOINT update_done; Savepoint created. INSERT... ROLLBACK TO update_done; Rollback complete. Rolling Back Changes to a Marker • Create a marker in a current transaction by using the SAVEPOINT statement. • Roll back to that marker by using the ROLLBACK TO SAVEPOINT statement. Rolling Back Changes to a Marker You can create a marker in the current transaction by using the SAVEPOINT statement, which divides the transaction into smaller sections. You can then discard pending changes up to that marker by using the ROLLBACK TO SAVEPOINT statement. If you create a second savepoint with the same name as an earlier savepoint, the earlier savepoint is deleted. Oracle Database 10g: SQL Fundamentals I 8-29 8-29 Copyright © 2004, Oracle. All rights reserved. Implicit Transaction Processing • An automatic commit occurs under the following circumstances: – DDL statement is issued – DCL statement is issued – Normal exit from iSQL*Plus, without explicitly issuing COMMIT or ROLLBACK statements • An automatic rollback occurs under an abnormal termination of iSQL*Plus or a system failure. Implicit Transaction Processing Note: A third command is available in iSQL*Plus. The AUTOCOMMIT command can be toggled on or off. If set to on, each individual DML statement is committed as soon as it is executed. You cannot roll back the changes. If set to off, the COMMIT statement can still be issued explicitly. Also, the COMMIT statement is issued when a DDL statement is issued or when you exit iSQL*Plus. Status Circumstances Automatic commit DDL statement or DCL statement is issued. iSQL*Plus exited normally, without explicitly issuing COMMIT or ROLLBACK commands. Automatic rollback Abnormal termination of iSQL*Plus or system failure. Oracle Database 10g: SQL Fundamentals I 8-30 Implicit Transaction Processing (continued) System Failures When a transaction is interrupted by a system failure, the entire transaction is automatically rolled back. This prevents the error from causing unwanted changes to the data and returns the tables to their state at the time of the last commit. In this way, the Oracle server protects the integrity of the tables. From iSQL*Plus, a normal exit from the session is accomplished by clicking the Exit button. With SQL*Plus, a normal exit is accomplished by typing the command EXIT at the prompt. Closing the window is interpreted as an abnormal exit. Oracle Database 10g: SQL Fundamentals I 8-31 8-31 Copyright © 2004, Oracle. All rights reserved. State of the Data Before COMMIT or ROLLBACK • The previous state of the data can be recovered. • The current user can review the results of the DML operations by using the SELECT statement. • Other users cannot view the results of the DML statements by the current user. • The affected rows are locked; other users cannot change the data in the affected rows. Committing Changes Every data change made during the transaction is temporary until the transaction is committed. The state of the data before COMMIT or ROLLBACK statements are issued can be described as follows: • Data manipulation operations primarily affect the database buffer; therefore, the previous state of the data can be recovered. • The current user can review the results of the data manipulation operations by querying the tables. • Other users cannot view the results of the data manipulation operations made by the current user. The Oracle server institutes read consistency to ensure that each user sees data as it existed at the last commit. • The affected rows are locked; other users cannot change the data in the affected rows. Oracle Database 10g: SQL Fundamentals I 8-32 8-32 Copyright © 2004, Oracle. All rights reserved. State of the Data After COMMIT • Data changes are made permanent in the database. • The previous state of the data is permanently lost. • All users can view the results. • Locks on the affected rows are released; those rows are available for other users to manipulate. • All savepoints are erased. Committing Changes (continued) Make all pending changes permanent by using the COMMIT statement. Here is what happens after a COMMIT statement: • Data changes are written to the database. • The previous state of the data is no longer available with normal SQL queries. • All users can view the results of the transaction. • The locks on the affected rows are released; the rows are now available for other users to perform new data changes. • All savepoints are erased. Oracle Database 10g: SQL Fundamentals I 8-33 8-33 Copyright © 2004, Oracle. All rights reserved. COMMIT; Commit complete. Committing Data • Make the changes: • Commit the changes: DELETE FROM employees WHERE employee_id = 99999; 1 row deleted. INSERT INTO departments VALUES (290, 'Corporate Tax', NULL, 1700); 1 row created. Committing Changes (continued) The slide example deletes a row from the EMPLOYEES table and inserts a new row into the DEPARTMENTS table. It then makes the change permanent by issuing the COMMIT statement. Example Remove departments 290 and 300 in the DEPARTMENTS table, and update a row in the COPY_EMP table. Make the data change permanent. DELETE FROM departments WHERE department_id IN (290, 300); 1 row deleted. UPDATE employees SET department_id = 80 WHERE employee_id = 206; 1 row updated. COMMIT; Commit Complete. Oracle Database 10g: SQL Fundamentals I 8-34 8-34 Copyright © 2004, Oracle. All rights reserved. DELETE FROM copy_emp; 22 rows deleted. ROLLBACK ; Rollback complete. State of the Data After ROLLBACK Discard all pending changes by using the ROLLBACK statement: • Data changes are undone. • Previous state of the data is restored. • Locks on the affected rows are released. Rolling Back Changes Discard all pending changes by using the ROLLBACK statement, which results in the following: • Data changes are undone. • The previous state of the data is restored. • Locks on the affected rows are released. Oracle Database 10g: SQL Fundamentals I 8-35 8-35 Copyright © 2004, Oracle. All rights reserved. State of the Data After ROLLBACK DELETE FROM test; 25,000 rows deleted. ROLLBACK; Rollback complete. DELETE FROM test WHERE id = 100; 1 row deleted. SELECT * FROM test WHERE id = 100; No rows selected. COMMIT; Commit complete. Example While attempting to remove a record from the TEST table, you can accidentally empty the table. You can correct the mistake, reissue the proper statement, and make the data change permanent. Oracle Database 10g: SQL Fundamentals I 8-36 8-36 Copyright © 2004, Oracle. All rights reserved. Statement-Level Rollback • If a single DML statement fails during execution, only that statement is rolled back. • The Oracle server implements an implicit savepoint. • All other changes are retained. • The user should terminate transactions explicitly by executing a COMMIT or ROLLBACK statement. Statement-Level Rollback Part of a transaction can be discarded by an implicit rollback if a statement execution error is detected. If a single DML statement fails during execution of a transaction, its effect is undone by a statement-level rollback, but the changes made by the previous DML statements in the transaction are not discarded. They can be committed or rolled back explicitly by the user. The Oracle server issues an implicit commit before and after any DDL statement. So, even if your DDL statement does not execute successfully, you cannot roll back the previous statement because the server issued a commit. Terminate your transactions explicitly by executing a COMMIT or ROLLBACK statement. Oracle Database 10g: SQL Fundamentals I 8-37 8-37 Copyright © 2004, Oracle. All rights reserved. Read Consistency • Read consistency guarantees a consistent view of the data at all times. • Changes made by one user do not conflict with changes made by another user. • Read consistency ensures that on the same data: – Readers do not wait for writers – Writers do not wait for readers Read Consistency Database users access the database in two ways: • Read operations (SELECT statement) • Write operations (INSERT, UPDATE, DELETE statements) You need read consistency so that the following occur: • The database reader and writer are ensured a consistent view of the data. • Readers do not view data that is in the process of being changed. • Writers are ensured that the changes to the database are done in a consistent way. • Changes made by one writer do not disrupt or conflict with changes that another writer is making. The purpose of read consistency is to ensure that each user sees data as it existed at the last commit, before a DML operation started. Oracle Database 10g: SQL Fundamentals I 8-38 8-38 Copyright © 2004, Oracle. All rights reserved. Implementation of Read Consistency SELECT * FROM userA.employees; UPDATE employees SET salary = 7000 WHERE last_name = 'Grant'; Data blocks Undo segments Changed and unchanged data Before change (“old” data) User A User B Read- consistent image Oracle Database 10g: SQL Fundamentals I 8-39 8-39 Copyright © 2004, Oracle. All rights reserved. Summary In this lesson, you should have learned how to use the following statements: Adds a new row to the tableINSERT Modifies existing rows in the tableUPDATE Removes existing rows from the tableDELETE Makes all pending changes permanentCOMMIT Discards all pending data changesROLLBACK Is used to roll back to the savepoint markerSAVEPOINT DescriptionFunction Summary In this lesson, you should have learned how to manipulate data in the Oracle database by using the INSERT, UPDATE, and DELETE statements, as well as how to control data changes by using the COMMIT, SAVEPOINT, and ROLLBACK statements. The Oracle server guarantees a consistent view of data at all times. Oracle Database 10g: SQL Fundamentals I 8-40 8-40 Copyright © 2004, Oracle. All rights reserved. Practice 8: Overview This practice covers the following topics: • Inserting rows into the tables • Updating and deleting rows in the table • Controlling transactions Practice 8: Overview In this practice, you add rows to the MY_EMPLOYEE table, update and delete data from the table, and control your transactions. Oracle Database 10g: SQL Fundamentals I 8-41 Practice 8 The HR department wants you to create SQL statements to insert, update, and delete employee data. As a prototype, you use the MY_EMPLOYEE table, prior to giving the statements to the HR department. Insert data into the MY_EMPLOYEE table. 1. Run the statement in the lab_08_01.sql script to build the MY_EMPLOYEE table to be used for the lab. 2. Describe the structure of the MY_EMPLOYEE table to identify the column names. 3. Create an INSERT statement to add the first row of data to the MY_EMPLOYEE table from the following sample data. Do not list the columns in the INSERT clause. Do not enter all rows yet. 4. Populate the MY_EMPLOYEE table with the second row of sample data from the preceding list. This time, list the columns explicitly in the INSERT clause. 5. Confirm your addition to the table. ID LAST_NAME FIRST_NAME USERID SALARY 1 Patel Ralph rpatel 895 2 Dancs Betty bdancs 860 3 Biri Ben bbiri 1100 4 Newman Chad cnewman 750 5 Ropeburn Audrey aropebur 1550 Oracle Database 10g: SQL Fundamentals I 8-42 Practice 8 (continued) 6. Write an insert statement in a dynamic reusable script file named loademp.sql to load rows into the MY_EMPLOYEE table. Concatenate the first letter of the first name and the first seven characters of the last name to produce the user ID. Save this script to a file named lab_08_06.sql. 7. Populate the table with the next two rows of sample data by running the insert statement in the script that you created. 8. Confirm your additions to the table. 9. Make the data additions permanent. Update and delete data in the MY_EMPLOYEE table. 10. Change the last name of employee 3 to Drexler. 11. Change the salary to $1,000 for all employees who have a salary less than $900. 12. Verify your changes to the table. 13. Delete Betty Dancs from the MY_EMPLOYEE table. 14. Confirm your changes to the table. Oracle Database 10g: SQL Fundamentals I 8-43 Practice 8 (continued) 15. Commit all pending changes. Control data transaction to the MY_EMPLOYEE table. 16. Populate the table with the last row of sample data by using the statements in the script that you created in step 6. Run the statements in the script. 17. Confirm your addition to the table. 18. Mark an intermediate point in the processing of the transaction. 19. Empty the entire table. 20. Confirm that the table is empty. 21. Discard the most recent DELETE operation without discarding the earlier INSERT operation. 22. Confirm that the new row is still intact. 23. Make the data addition permanent. Copyright © 2004, Oracle. All rights reserved. Using DDL Statements to Create and Manage Tables Oracle Database 10g: SQL Fundamentals I 9-2 9-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Categorize the main database objects • Review the table structure • List the data types that are available for columns • Create a simple table • Understand how constraints are created at the time of table creation • Describe how schema objects work Objectives In this lesson, you are introduced to the data definition language (DDL) statements. You are taught the basics of how to create simple tables, alter them, and remove them. The data types available in DDL are shown, and schema concepts are introduced. Constraints are tied into this lesson. Exception messages that are generated from violating constraints during DML are shown and explained. Oracle Database 10g: SQL Fundamentals I 9-3 9-3 Copyright © 2004, Oracle. All rights reserved. Database Objects Logically represents subsets of data from one or more tables View Generates numeric valuesSequence Basic unit of storage; composed of rows Table Gives alternative names to objectsSynonym Improves the performance of some queries Index DescriptionObject Database Objects An Oracle database can contain multiple data structures. Each structure should be outlined in the database design so that it can be created during the build stage of database development. • Table: Stores data • View: Subset of data from one or more tables • Sequence: Generates numeric values • Index: Improves the performance of some queries • Synonym: Gives alternative names to objects Oracle Table Structures • Tables can be created at any time, even while users are using the database. • You do not need to specify the size of a table. The size is ultimately defined by the amount of space allocated to the database as a whole. It is important, however, to estimate how much space a table will use over time. • Table structure can be modified online. Note: More database objects are available but are not covered in this course. Oracle Database 10g: SQL Fundamentals I 9-4 9-4 Copyright © 2004, Oracle. All rights reserved. Naming Rules Table names and column names: • Must begin with a letter • Must be 1–30 characters long • Must contain only A–Z, a–z, 0–9, _, $, and # • Must not duplicate the name of another object owned by the same user • Must not be an Oracle server reserved word Naming Rules You name database tables and columns according to the standard rules for naming any Oracle database object: • Table names and column names must begin with a letter and be 1–30 characters long. • Names must contain only the characters A–Z, a–z, 0–9, _ (underscore), $, and # (legal characters, but their use is discouraged). • Names must not duplicate the name of another object owned by the same Oracle server user. • Names must not be an Oracle server reserved word. Naming Guidelines Use descriptive names for tables and other database objects. Note: Names are case-insensitive. For example, EMPLOYEES is treated as the same name as eMPloyees or eMpLOYEES. For more information, see “Object Names and Qualifiers” in the Oracle Database SQL Reference. Oracle Database 10g: SQL Fundamentals I 9-5 9-5 Copyright © 2004, Oracle. All rights reserved. • You must have: – CREATE TABLE privilege – A storage area • You specify: – Table name – Column name, column data type, and column size CREATE TABLE Statement CREATE TABLE [schema.]table (column datatype [DEFAULT expr][, ...]); Oracle Database 10g: SQL Fundamentals I 9-6 9-6 Copyright © 2004, Oracle. All rights reserved. Referencing Another User’s Tables • Tables belonging to other users are not in the user’s schema. • You should use the owner’s name as a prefix to those tables. Oracle Database 10g: SQL Fundamentals I 9-7 9-7 Copyright © 2004, Oracle. All rights reserved. • Specify a default value for a column during an insert. • Literal values, expressions, or SQL functions are legal values. • Another column’s name or a pseudocolumn are illegal values. • The default data type must match the column data type. DEFAULT Option ... hire_date DATE DEFAULT SYSDATE, ... CREATE TABLE hire_dates (id NUMBER(8), hire_date DATE DEFAULT SYSDATE); Table created. DEFAULT Option When you define a table, you can specify that a column be given a default value by using the DEFAULT option. This option prevents null values from entering the columns if a row is inserted without a value for the column. The default value can be a literal, an expression, or a SQL function (such as SYSDATE or USER), but the value cannot be the name of another column or a pseudocolumn (such as NEXTVAL or CURRVAL). The default expression must match the data type of the column. Note: CURRVAL and NEXTVAL are explained later in this lesson. Oracle Database 10g: SQL Fundamentals I 9-8 9-8 Copyright © 2004, Oracle. All rights reserved. Creating Tables • Create the table. • Confirm table creation. DESCRIBE dept CREATE TABLE dept (deptno NUMBER(2), dname VARCHAR2(14), loc VARCHAR2(13), create_date DATE DEFAULT SYSDATE); Table created. Creating Tables The example in the slide creates the DEPT table, with four columns: DEPTNO, DNAME, LOC, and CREATE_DATE. The CREATE_DATE column has a default value. If a value is not provided for an INSERT statement, the system date is automatically inserted. It further confirms the creation of the table by issuing the DESCRIBE command. Because creating a table is a DDL statement, an automatic commit takes place when this statement is executed. Oracle Database 10g: SQL Fundamentals I 9-9 9-9 Copyright © 2004, Oracle. All rights reserved. Data Types Raw binary dataRAW and LONG RAW Binary data (up to 4 GB)BLOB Binary data stored in an external file (up to 4 GB)BFILE Date and time valuesDATE Variable-length character data (up to 2 GB)LONG Character data (up to 4 GB)CLOB A base-64 number system representing the unique address of a row in its table ROWID Fixed-length character dataCHAR(size) Variable-length numeric dataNUMBER(p,s) Variable-length character dataVARCHAR2(size) DescriptionData Type Data Types When you identify a column for a table, you need to provide a data type for the column. There are several data types available: Data Type Description VARCHAR2(size) Variable-length character data (A maximum size must be specified: minimum size is 1; maximum size is 4,000.) CHAR [(size)] Fixed-length character data of length size bytes (Default and minimum size is 1; maximum size is 2,000.) NUMBER [(p,s)] Number having precision p and scale s (The precision is the total number of decimal digits, and the scale is the number of digits to the right of the decimal point; the precision can range from 1 to 38, and the scale can range from –84 to 127.) DATE Date and time values to the nearest second between January 1, 4712 B.C., and December 31, 9999 A.D. LONG Variable-length character data (up to 2 GB) CLOB Character data (up to 4 GB) Oracle Database 10g: SQL Fundamentals I 9-10 Data Types (continued) Guidelines • A LONG column is not copied when a table is created using a subquery. • A LONG column cannot be included in a GROUP BY or an ORDER BY clause. • Only one LONG column can be used per table. • No constraints can be defined on a LONG column. • You might want to use a CLOB column rather than a LONG column. D a ta T y p e D escrip tion R A W ( s i z e ) R aw b in ary d ata o f length size (A m ax im u m size m u st b e sp ecified : m axim um size is 2 ,0 00 .) L O N G R A W R aw b in ary d ata o f variab le length (u p to 2 G B ) B L O B B in ary d ata (u p to 4 G B ) B F I L E B in ary d ata sto red in an ex tern al file (u p to 4 G B ) R O W I D A b ase-6 4 nu m b er system rep resen tin g th e u n iqu e ad d ress o f a ro w in its tab le Oracle Database 10g: SQL Fundamentals I 9-11 9-11 Copyright © 2004, Oracle. All rights reserved. Datetime Data Types You can use several datetime data types: Stored as an interval of years and months INTERVAL YEAR TO MONTH Stored as an interval of days, hours, minutes, and seconds INTERVAL DAY TO SECOND Date with fractional secondsTIMESTAMP DescriptionData Type Oracle Database 10g: SQL Fundamentals I 9-12 9-12 Copyright © 2004, Oracle. All rights reserved. Datetime Data Types • The TIMESTAMP data type is an extension of the DATE data type. • It stores the year, month, and day of the DATE data type plus hour, minute, and second values as well as the fractional second value. • You can optionally specify the time zone. TIMESTAMP[(fractional_seconds_precision)] TIMESTAMP[(fractional_seconds_precision)] WITH TIME ZONE TIMESTAMP[(fractional_seconds_precision)] WITH LOCAL TIME ZONE TIMESTAMP Data Type The TIMESTAMP data type is an extension of the DATE data type. It stores the year, month, and day of the DATE data type plus hour, minute, and second values. This data type is used for storing precise time values. The fractional_seconds_precision optionally specifies the number of digits in the fractional part of the SECOND datetime field and can be a number in the range 0 to 9. The default is 6. Example In this example, a table is created named NEW_EMPLOYEES, with a column START_DATE that has a data type of TIMESTAMP: CREATE TABLE new_employees (employee_id NUMBER, first_name VARCHAR2(15), last_name VARCHAR2(15), ... start_date TIMESTAMP(7), ...); Suppose that two rows are inserted in the NEW_EMPLOYEES table. The displayed output shows the differences. (A DATE data type defaults to display the DD-MON-RR format.): Oracle Database 10g: SQL Fundamentals I 9-13 TIMESTAMP Data Type (continued) SELECT start_date FROM new_employees; 17-JUN-03 12.00.00.000000 AM 21-SEP-03 12.00.00.000000 AM TIMESTAMP WITH TIME ZONE Data Type TIMESTAMP WITH TIME ZONE is a variant of TIMESTAMP that includes a time-zone displacement in its value. The time-zone displacement is the difference (in hours and minutes) between local time and UTC (Universal Time Coordinate, formerly known as Greenwich Mean Time). This data type is used for collecting and evaluating date information across geographic regions. For example, TIMESTAMP '2003-04-15 8:00:00 -8:00' is the same as TIMESTAMP '2003-04-15 11:00:00 -5:00' That is, 8:00 a.m. Pacific Standard Time is the same as 11:00 a.m. Eastern Standard Time. This can also be specified as follows: TIMESTAMP '2003-04-15 8:00:00 US/Pacific' TIMESTAMP WITH LOCAL TIME ZONE Data Type TIMESTAMP WITH LOCAL TIME ZONE is another variant of TIMESTAMP that includes a time-zone displacement in its value. It differs from TIMESTAMP WITH TIME ZONE in that data stored in the database is normalized to the database time zone, and the time-zone displacement is not stored as part of the column data. When users retrieve the data, it is returned in the users' local session time zone. The time-zone displacement is the difference (in hours and minutes) between local time and UTC. Unlike TIMESTAMP WITH TIME ZONE, you can specify columns of type TIMESTAMP WITH LOCAL TIME ZONE as part of a primary or unique key, as in the following example: CREATE TABLE time_example (order_date TIMESTAMP WITH LOCAL TIME ZONE); INSERT INTO time_example VALUES('15-JAN-04 09:34:28 AM'); SELECT * FROM time_example; ORDER_DATE ---------------------------- 15-JAN-04 09.34.28.000000 AM The TIMESTAMP WITH LOCAL TIME ZONE type is appropriate for two-tier applications in which you want to display dates and times using the time zone of the client system. Oracle Database 10g: SQL Fundamentals I 9-14 9-14 Copyright © 2004, Oracle. All rights reserved. Datetime Data Types • The INTERVAL YEAR TO MONTH data type stores a period of time using the YEAR and MONTH datetime fields: • The INTERVAL DAY TO SECOND data type stores a period of time in terms of days, hours, minutes, and seconds: INTERVAL YEAR [(year_precision)] TO MONTH INTERVAL DAY [(day_precision)] TO SECOND [(fractional_seconds_precision)] INTERVAL YEAR TO MONTH Data Type INTERVAL YEAR TO MONTH stores a period of time using the YEAR and MONTH datetime fields. Use INTERVAL YEAR TO MONTH to represent the difference between two datetime values, where the only significant portions are the year and month. For example, you might use this value to set a reminder for a date that is 120 months in the future, or check whether 6 months have elapsed since a particular date. In the syntax: year_precision is the number of digits in the YEAR datetime field. The default value of year_precision is 2. Examples • INTERVAL '123-2' YEAR(3) TO MONTH Indicates an interval of 123 years, 2 months • INTERVAL '123' YEAR(3) Indicates an interval of 123 years 0 months • INTERVAL '300' MONTH(3) Indicates an interval of 300 months • INTERVAL '123' YEAR Returns an error because the default precision is 2, and 123 has 3 digits Oracle Database 10g: SQL Fundamentals I 9-15 INTERVAL YEAR TO MONTH Data Type (continued) CREATE TABLE time_example2 (loan_duration INTERVAL YEAR (3) TO MONTH); INSERT INTO time_example2 (loan_duration) VALUES (INTERVAL '120' MONTH(3)); SELECT TO_CHAR( sysdate+loan_duration, 'dd-mon-yyyy') FROM time_example2; --today’s date is 26-Sep-2001 INTERVAL DAY TO SECOND Data Type INTERVAL DAY TO SECOND stores a period of time in terms of days, hours, minutes, and seconds. Use INTERVAL DAY TO SECOND to represent the precise difference between two datetime values. For example, you might use this value to set a reminder for a time that is 36 hours in the future, or to record the time between the start and end of a race. To represent long spans of time, including multiple years, with high precision, you can use a large value for the days portion. In the syntax: day_precision is the number of digits in the DAY datetime field. Accepted values are 0 to 9. The default is 2. fractional_seconds_precision is the number of digits in the fractional part of the SECOND datetime field. Accepted values are 0 to 9. The default is 6. Examples • INTERVAL '4 5:12:10.222' DAY TO SECOND(3) Indicates 4 days, 5 hours, 12 minutes, 10 seconds, and 222 thousandths of a second. • INTERVAL '180' DAY(3) Indicates 180 days. • INTERVAL '4 5:12:10.222' DAY TO SECOND(3) Indicates 4 days, 5 hours, 12 minutes, 10 seconds, and 222 thousandths of a second • INTERVAL '4 5:12' DAY TO MINUTE Indicates 4 days, 5 hours, and 12 minutes • INTERVAL '400 5' DAY(3) TO HOUR Indicates 400 days and 5 hours. • INTERVAL '11:12:10.2222222' HOUR TO SECOND(7) Indicates 11 hours, 12 minutes, and 10.2222222 seconds. Oracle Database 10g: SQL Fundamentals I 9-16 INTERVAL DAY TO SECOND Data Type (continued) Example CREATE TABLE time_example3 (day_duration INTERVAL DAY (3) TO SECOND); INSERT INTO time_example3 (day_duration) VALUES (INTERVAL '180' DAY(3)); SELECT sysdate + day_duration \"Half Year\" FROM time_example3; --today’s date is 26-Sep-2001 Oracle Database 10g: SQL Fundamentals I 9-17 9-17 Copyright © 2004, Oracle. All rights reserved. Including Constraints • Constraints enforce rules at the table level. • Constraints prevent the deletion of a table if there are dependencies. • The following constraint types are valid: – NOT NULL – UNIQUE – PRIMARY KEY – FOREIGN KEY – CHECK Oracle Database 10g: SQL Fundamentals I 9-18 9-18 Copyright © 2004, Oracle. All rights reserved. Constraint Guidelines • You can name a constraint, or the Oracle server generates a name by using the SYS_Cn format. • Create a constraint at either of the following times: – At the same time as the table is created – After the table has been created • Define a constraint at the column or table level. • View a constraint in the data dictionary. Constraint Guidelines All constraints are stored in the data dictionary. Constraints are easy to reference if you give them a meaningful name. Constraint names must follow the standard object-naming rules. If you do not name your constraint, the Oracle server generates a name with the format SYS_Cn, where n is an integer so that the constraint name is unique. Constraints can be defined at the time of table creation or after the table has been created. For more information, see “Constraints” in the Oracle Database SQL Reference. Oracle Database 10g: SQL Fundamentals I 9-19 9-19 Copyright © 2004, Oracle. All rights reserved. Defining Constraints • Syntax: • Column-level constraint: • Table-level constraint: CREATE TABLE [schema.]table (column datatype [DEFAULT expr] [column_constraint], ... [table_constraint][,...]); column,... [CONSTRAINT constraint_name] constraint_type (column, ...), column [CONSTRAINT constraint_name] constraint_type, Defining Constraints The slide gives the syntax for defining constraints when creating a table. You can create the constraints at either the column level or table level. Constraints defined at the column level are included when the column is defined. Table-level constraints are defined at the end of the table definition and must refer to the column or columns on which the constraint pertains in a set of parentheses. NOT NULL constraints must be defined at the column level. Constraints that apply to more than one column must be defined at the table level. In the syntax: schema is the same as the owner’s name table is the name of the table DEFAULT expr specifies a default value to use if a value is omitted in the INSERT statement column is the name of the column datatype is the column’s data type and length column_constraint is an integrity constraint as part of the column definition table_constraint is an integrity constraint as part of the table definition Oracle Database 10g: SQL Fundamentals I 9-20 9-20 Copyright © 2004, Oracle. All rights reserved. Defining Constraints • Column-level constraint: • Table-level constraint: CREATE TABLE employees( employee_id NUMBER(6) CONSTRAINT emp_emp_id_pk PRIMARY KEY, first_name VARCHAR2(20), ...); CREATE TABLE employees( employee_id NUMBER(6), first_name VARCHAR2(20), ... job_id VARCHAR2(10) NOT NULL, CONSTRAINT emp_emp_id_pk PRIMARY KEY (EMPLOYEE_ID)); 1 2 Defining Constraints (continued) Constraints are usually created at the same time as the table. Constraints can be added to a table after its creation and also temporarily disabled. Both slide examples create a primary key constraint on the EMPLOYEE_ID column of the EMPLOYEES table. 1. The first example uses the column-level syntax to define the constraint. 2. The second example uses the table-level syntax to define the constraint. More details about the primary key constraint are provided later in this lesson. Oracle Database 10g: SQL Fundamentals I 9-21 9-21 Copyright © 2004, Oracle. All rights reserved. NOT NULL Constraint Ensures that null values are not permitted for the column: NOT NULL constraint (No row can contain a null value for this column.) Absence of NOT NULL constraint (Any row can contain a null value for this column.) NOT NULL constraint Oracle Database 10g: SQL Fundamentals I 9-22 9-22 Copyright © 2004, Oracle. All rights reserved. UNIQUE Constraint EMPLOYEES UNIQUE constraint INSERT INTO Not allowed: already exists Allowed … UNIQUE Constraint A UNIQUE key integrity constraint requires that every value in a column or set of columns (key) be unique—that is, no two rows of a table can have duplicate values in a specified column or set of columns. The column (or set of columns) included in the definition of the UNIQUE key constraint is called the unique key. If the UNIQUE constraint comprises more than one column, that group of columns is called a composite unique key. UNIQUE constraints enable the input of nulls unless you also define NOT NULL constraints for the same columns. In fact, any number of rows can include nulls for columns without NOT NULL constraints because nulls are not considered equal to anything. A null in a column (or in all columns of a composite UNIQUE key) always satisfies a UNIQUE constraint. Note: Because of the search mechanism for UNIQUE constraints on more than one column, you cannot have identical values in the non-null columns of a partially null composite UNIQUE key constraint. Oracle Database 10g: SQL Fundamentals I 9-23 9-23 Copyright © 2004, Oracle. All rights reserved. UNIQUE Constraint Defined at either the table level or the column level: CREATE TABLE employees( employee_id NUMBER(6), last_name VARCHAR2(25) NOT NULL, email VARCHAR2(25), salary NUMBER(8,2), commission_pct NUMBER(2,2), hire_date DATE NOT NULL, ... CONSTRAINT emp_email_uk UNIQUE(email)); UNIQUE Constraint (continued) UNIQUE constraints can be defined at the column level or table level. A composite unique key is created by using the table-level definition. The example in the slide applies the UNIQUE constraint to the EMAIL column of the EMPLOYEES table. The name of the constraint is EMP_EMAIL_UK. Note: The Oracle server enforces the UNIQUE constraint by implicitly creating a unique index on the unique key column or columns. Oracle Database 10g: SQL Fundamentals I 9-24 9-24 Copyright © 2004, Oracle. All rights reserved. PRIMARY KEY Constraint DEPARTMENTS PRIMARY KEY INSERT INTONot allowed (null value) Not allowed (50 already exists) … PRIMARY KEY Constraint A PRIMARY KEY constraint creates a primary key for the table. Only one primary key can be created for each table. The PRIMARY KEY constraint is a column or set of columns that uniquely identifies each row in a table. This constraint enforces uniqueness of the column or column combination and ensures that no column that is part of the primary key can contain a null value. Note: Because uniqueness is part of the primary key constraint definition, the Oracle server enforces the uniqueness by implicitly creating a unique index on the primary key column or columns. Oracle Database 10g: SQL Fundamentals I 9-25 9-25 Copyright © 2004, Oracle. All rights reserved. FOREIGN KEY Constraint DEPARTMENTS EMPLOYEES FOREIGN KEY INSERT INTO Not allowed (9 does not exist) Allowed PRIMARY KEY … … FOREIGN KEY Constraint The FOREIGN KEY (or referential integrity) constraint designates a column or combination of columns as a foreign key and establishes a relationship between a primary key or a unique key in the same table or a different table. In the example in the slide, DEPARTMENT_ID has been defined as the foreign key in the EMPLOYEES table (dependent or child table); it references the DEPARTMENT_ID column of the DEPARTMENTS table (the referenced or parent table). Guidelines • A foreign key value must match an existing value in the parent table or be NULL. • Foreign keys are based on data values and are purely logical, rather than physical, pointers. Oracle Database 10g: SQL Fundamentals I 9-26 9-26 Copyright © 2004, Oracle. All rights reserved. FOREIGN KEY Constraint Defined at either the table level or the column level: CREATE TABLE employees( employee_id NUMBER(6), last_name VARCHAR2(25) NOT NULL, email VARCHAR2(25), salary NUMBER(8,2), commission_pct NUMBER(2,2), hire_date DATE NOT NULL, ... department_id NUMBER(4), CONSTRAINT emp_dept_fk FOREIGN KEY (department_id) REFERENCES departments(department_id), CONSTRAINT emp_email_uk UNIQUE(email)); FOREIGN KEY Constraint (continued) FOREIGN KEY constraints can be defined at the column or table constraint level. A composite foreign key must be created by using the table-level definition. The example in the slide defines a FOREIGN KEY constraint on the DEPARTMENT_ID column of the EMPLOYEES table, using table-level syntax. The name of the constraint is EMP_DEPTID_FK. The foreign key can also be defined at the column level, provided the constraint is based on a single column. The syntax differs in that the keywords FOREIGN KEY do not appear. For example: CREATE TABLE employees (... department_id NUMBER(4) CONSTRAINT emp_deptid_fk REFERENCES departments(department_id), ... Oracle Database 10g: SQL Fundamentals I 9-27 9-27 Copyright © 2004, Oracle. All rights reserved. FOREIGN KEY Constraint: Keywords • FOREIGN KEY: Defines the column in the child table at the table-constraint level • REFERENCES: Identifies the table and column in the parent table • ON DELETE CASCADE: Deletes the dependent rows in the child table when a row in the parent table is deleted • ON DELETE SET NULL: Converts dependent foreign key values to null FOREIGN KEY Constraint: Keywords The foreign key is defined in the child table, and the table containing the referenced column is the parent table. The foreign key is defined using a combination of the following keywords: • FOREIGN KEY is used to define the column in the child table at the table-constraint level. • REFERENCES identifies the table and column in the parent table. • ON DELETE CASCADE indicates that when the row in the parent table is deleted, the dependent rows in the child table are also deleted. • ON DELETE SET NULL converts foreign key values to null when the parent value is removed. The default behavior is called the restrict rule, which disallows the update or deletion of referenced data. Without the ON DELETE CASCADE or the ON DELETE SET NULL options, the row in the parent table cannot be deleted if it is referenced in the child table. Oracle Database 10g: SQL Fundamentals I 9-28 9-28 Copyright © 2004, Oracle. All rights reserved. CHECK Constraint • Defines a condition that each row must satisfy • The following expressions are not allowed: – References to CURRVAL, NEXTVAL, LEVEL, and ROWNUM pseudocolumns – Calls to SYSDATE, UID, USER, and USERENV functions – Queries that refer to other values in other rows ..., salary NUMBER(2) CONSTRAINT emp_salary_min CHECK (salary > 0),... CHECK Constraint The CHECK constraint defines a condition that each row must satisfy. The condition can use the same constructs as query conditions, with the following exceptions: • References to the CURRVAL, NEXTVAL, LEVEL, and ROWNUM pseudocolumns • Calls to SYSDATE, UID, USER, and USERENV functions • Queries that refer to other values in other rows A single column can have multiple CHECK constraints that refer to the column in its definition. There is no limit to the number of CHECK constraints that you can define on a column. CHECK constraints can be defined at the column level or table level. CREATE TABLE employees (... salary NUMBER(8,2) CONSTRAINT emp_salary_min CHECK (salary > 0), ... Oracle Database 10g: SQL Fundamentals I 9-29 9-29 Copyright © 2004, Oracle. All rights reserved. CREATE TABLE: Example CREATE TABLE employees ( employee_id NUMBER(6) CONSTRAINT emp_employee_id PRIMARY KEY , first_name VARCHAR2(20) , last_name VARCHAR2(25) CONSTRAINT emp_last_name_nn NOT NULL , email VARCHAR2(25) CONSTRAINT emp_email_nn NOT NULL CONSTRAINT emp_email_uk UNIQUE , phone_number VARCHAR2(20) , hire_date DATE CONSTRAINT emp_hire_date_nn NOT NULL , job_id VARCHAR2(10) CONSTRAINT emp_job_nn NOT NULL , salary NUMBER(8,2) CONSTRAINT emp_salary_ck CHECK (salary>0) , commission_pct NUMBER(2,2) , manager_id NUMBER(6) , department_id NUMBER(4) CONSTRAINT emp_dept_fk REFERENCES departments (department_id)); The CREATE TABLE Example The example shows the statement used to create the EMPLOYEES table in the HR schema. Oracle Database 10g: SQL Fundamentals I 9-30 9-30 Copyright © 2004, Oracle. All rights reserved. UPDATE employees * ERROR at line 1: ORA-02291: integrity constraint (HR.EMP_DEPT_FK) violated - parent key not found UPDATE employees SET department_id = 55 WHERE department_id = 110; Violating Constraints Department 55 does not exist. Integrity Constraint Error When you have constraints in place on columns, an error is returned to you if you try to violate the constraint rule. For example, if you attempt to update a record with a value that is tied to an integrity constraint, an error is returned. In the example in the slide, department 55 does not exist in the parent table, DEPARTMENTS, and so you receive the parent key violation ORA-02291. Oracle Database 10g: SQL Fundamentals I 9-31 9-31 Copyright © 2004, Oracle. All rights reserved. Violating Constraints You cannot delete a row that contains a primary key that is used as a foreign key in another table. DELETE FROM departments WHERE department_id = 60; DELETE FROM departments * ERROR at line 1: ORA-02292: integrity constraint (HR.EMP_DEPT_FK) violated - child record found Integrity Constraint Error (continued) If you attempt to delete a record with a value that is tied to an integrity constraint, an error is returned. The example in the slide tries to delete department 60 from the DEPARTMENTS table, but it results in an error because that department number is used as a foreign key in the EMPLOYEES table. If the parent record that you attempt to delete has child records, then you receive the child record found violation ORA-02292. The following statement works because there are no employees in department 70: DELETE FROM departments WHERE department_id = 70; 1 row deleted. Oracle Database 10g: SQL Fundamentals I 9-32 9-32 Copyright © 2004, Oracle. All rights reserved. Creating a Table by Using a Subquery • Create a table and insert rows by combining the CREATE TABLE statement and the AS subquery option. • Match the number of specified columns to the number of subquery columns. • Define columns with column names and default values. CREATE TABLE table [(column, column...)] AS subquery; Creating a Table from Rows in Another Table A second method for creating a table is to apply the AS subquery clause, which both creates the table and inserts rows returned from the subquery. In the syntax: table is the name of the table column is the name of the column, default value, and integrity constraint subquery is the SELECT statement that defines the set of rows to be inserted into the new table Guidelines • The table is created with the specified column names, and the rows retrieved by the SELECT statement are inserted into the table. • The column definition can contain only the column name and default value. • If column specifications are given, the number of columns must equal the number of columns in the subquery SELECT list. • If no column specifications are given, the column names of the table are the same as the column names in the subquery. • The column data type definitions and the NOT NULL constraint are passed to the new table. The other constraint rules are not passed to the new table. However, you can add constraints in the column definition. Oracle Database 10g: SQL Fundamentals I 9-33 9-33 Copyright © 2004, Oracle. All rights reserved. CREATE TABLE dept80 AS SELECT employee_id, last_name, salary*12 ANNSAL, hire_date FROM employees WHERE department_id = 80; Table created. Creating a Table by Using a Subquery DESCRIBE dept80 Creating a Table from Rows in Another Table (continued) The slide example creates a table named DEPT80, which contains details of all the employees working in department 80. Notice that the data for the DEPT80 table comes from the EMPLOYEES table. You can verify the existence of a database table and check column definitions by using the iSQL*Plus DESCRIBE command. Be sure to provide a column alias when selecting an expression. The expression SALARY*12 is given the alias ANNSAL. Without the alias, the following error is generated: ERROR at line 3: ORA-00998: must name this expression with a column alias Oracle Database 10g: SQL Fundamentals I 9-34 9-34 Copyright © 2004, Oracle. All rights reserved. ALTER TABLE Statement Use the ALTER TABLE statement to: • Add a new column • Modify an existing column • Define a default value for the new column • Drop a column ALTER TABLE Statement After you create a table, you may need to change the table structure for any of the following reasons: • You omitted a column. • Your column definition needs to be changed. • You need to remove columns. You can do this by using the ALTER TABLE statement. For information about the ALTER TABLE statement, see the Oracle Database 10g SQL Fundamentals II course. Oracle Database 10g: SQL Fundamentals I 9-35 9-35 Copyright © 2004, Oracle. All rights reserved. Dropping a Table • All data and structure in the table are deleted. • Any pending transactions are committed. • All indexes are dropped. • All constraints are dropped. • You cannot roll back the DROP TABLE statement. DROP TABLE dept80; Table dropped. Dropping a Table The DROP TABLE statement removes the definition of an Oracle table. When you drop a table, the database loses all the data in the table and all the indexes associated with it. Syntax DROP TABLE table In the syntax, table is the name of the table. Guidelines • All data is deleted from the table. • Any views and synonyms remain but are invalid. • Any pending transactions are committed. • Only the creator of the table or a user with the DROP ANY TABLE privilege can remove a table. Note: The DROP TABLE statement, once executed, is irreversible. The Oracle server does not question the action when you issue the DROP TABLE statement. If you own that table or have a high-level privilege, then the table is immediately removed. As with all DDL statements, DROP TABLE is committed automatically. Oracle Database 10g: SQL Fundamentals I 9-36 9-36 Copyright © 2004, Oracle. All rights reserved. Summary In this lesson, you should have learned how to use the CREATE TABLE statement to create a table and include constraints. • Categorize the main database objects • Review the table structure • List the data types that are available for columns • Create a simple table • Understand how constraints are created at the time of table creation • Describe how schema objects work Summary In this lesson, you should have learned how to do the following: CREATE TABLE • Use the CREATE TABLE statement to create a table and include constraints. • Create a table based on another table by using a subquery. DROP TABLE • Remove rows and a table structure. • Once executed, this statement cannot be rolled back. Oracle Database 10g: SQL Fundamentals I 9-37 9-37 Copyright © 2004, Oracle. All rights reserved. Practice 9: Overview This practice covers the following topics: • Creating new tables • Creating a new table by using the CREATE TABLE AS syntax • Verifying that tables exist • Dropping tables Practice 9: Overview Create new tables by using the CREATE TABLE statement. Confirm that the new table was added to the database. Create the syntax in the command file, and then execute the command file to create the table. Oracle Database 10g: SQL Fundamentals I 9-38 Practice 9 1. Create the DEPT table based on the following table instance chart. Place the syntax in a script called lab_09_01.sql, then execute the statement in the script to create the table. Confirm that the table is created. 2. Populate the DEPT table with data from the DEPARTMENTS table. Include only columns that you need. 3. Create the EMP table based on the following table instance chart. Place the syntax in a script called lab_09_03.sql, and then execute the statement in the script to create the table. Confirm that the table is created. Column Name ID NAME Key Type Primary key Nulls/Unique FK Table FK Column Data type NUMBER VARCHAR2 Length 7 25 Column Name ID LAST_NAME FIRST_NAME DEPT_ID Key Type Nulls/Unique FK Table DEPT FK Column ID Data type NUMBER VARCHAR2 VARCHAR2 NUMBER Length 7 25 25 7 Oracle Database 10g: SQL Fundamentals I 9-39 Practice 9 (continued) 4. Create the EMPLOYEES2 table based on the structure of the EMPLOYEES table. Include only the EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY, and DEPARTMENT_ID columns. Name the columns in your new table ID, FIRST_NAME, LAST_NAME, SALARY , and DEPT_ID, respectively. 5. Drop the EMP table. Copyright © 2004, Oracle. All rights reserved. Creating Other Schema Objects Oracle Database 10g: SQL Fundamentals I 10-2 10-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Create simple and complex views • Retrieve data from views • Create, maintain, and use sequences • Create and maintain indexes • Create private and public synonyms Objectives In this lesson, you are introduced to the view, sequence, synonym, and index objects. You are taught the basics of creating and using views, sequences, and indexes. Oracle Database 10g: SQL Fundamentals I 10-3 10-3 Copyright © 2004, Oracle. All rights reserved. Database Objects Logically represents subsets of data from one or more tables View Generates numeric valuesSequence Basic unit of storage; composed of rows Table Gives alternative names to objectsSynonym Improves the performance of some queries Index DescriptionObject Database Objects There are several other objects in a database in addition to tables. In this lesson, you learn about views, sequences, indexes, and synonyms. With views, you can present and hide data from tables. Many applications require the use of unique numbers as primary key values. You can either build code into the application to handle this requirement or use a sequence to generate unique numbers. If you want to improve the performance of some queries, you should consider creating an index. You can also use indexes to enforce uniqueness on a column or a collection of columns. You can provide alternative names for objects by using synonyms. Oracle Database 10g: SQL Fundamentals I 10-4 10-4 Copyright © 2004, Oracle. All rights reserved. What Is a View? Oracle Database 10g: SQL Fundamentals I 10-5 10-5 Copyright © 2004, Oracle. All rights reserved. Advantages of Views Oracle Database 10g: SQL Fundamentals I 10-6 10-6 Copyright © 2004, Oracle. All rights reserved. Simple Views and Complex Views Yes No No One Simple Views YesContain functions YesContain groups of data One or moreNumber of tables Not alwaysDML operations through a view Complex ViewsFeature Simple Views and Complex Views There are two classifications for views: simple and complex. The basic difference is related to the DML (INSERT, UPDATE, and DELETE) operations. • A simple view is one that: - Derives data from only one table - Contains no functions or groups of data - Can perform DML operations through the view • A complex view is one that: - Derives data from many tables - Contains functions or groups of data - Does not always allow DML operations through the view Oracle Database 10g: SQL Fundamentals I 10-7 10-7 Copyright © 2004, Oracle. All rights reserved. Creating a View • You embed a subquery in the CREATE VIEW statement: • The subquery can contain complex SELECT syntax. CREATE [OR REPLACE] [FORCE|NOFORCE] VIEW view [(alias[, alias]...)] AS subquery [WITH CHECK OPTION [CONSTRAINT constraint]] [WITH READ ONLY [CONSTRAINT constraint]]; Creating a View You can create a view by embedding a subquery in the CREATE VIEW statement. In the syntax: OR REPLACE re-creates the view if it already exists FORCE creates the view regardless of whether or not the base tables exist NOFORCE creates the view only if the base tables exist (This is the default.) view is the name of the view alias specifies names for the expressions selected by the view’s query (The number of aliases must match the number of expressions selected by the view.) subquery is a complete SELECT statement (You can use aliases for the columns in the SELECT list.) WITH CHECK OPTION specifies that only those rows that are accessible to the view can be inserted or updated constraint is the name assigned to the CHECK OPTION constraint WITH READ ONLY ensures that no DML operations can be performed on this view Oracle Database 10g: SQL Fundamentals I 10-8 10-8 Copyright © 2004, Oracle. All rights reserved. Creating a View • Create the EMPVU80 view, which contains details of employees in department 80: • Describe the structure of the view by using the SQL*Plus DESCRIBE command: DESCRIBE empvu80 CREATE VIEW empvu80 AS SELECT employee_id, last_name, salary FROM employees WHERE department_id = 80; View created. Creating a View (continued) The example in the slide creates a view that contains the employee number, last name, and salary for each employee in department 80. You can display the structure of the view by using the iSQL*Plus DESCRIBE command. Guidelines for Creating a View: • The subquery that defines a view can contain complex SELECT syntax, including joins, groups, and subqueries. • If you do not specify a constraint name for a view created with the WITH CHECK OPTION, the system assigns a default name in the format SYS_Cn. • You can use the OR REPLACE option to change the definition of the view without dropping and re-creating it or regranting object privileges previously granted on it. Oracle Database 10g: SQL Fundamentals I 10-9 10-9 Copyright © 2004, Oracle. All rights reserved. Creating a View • Create a view by using column aliases in the subquery: • Select the columns from this view by the given alias names: CREATE VIEW salvu50 AS SELECT employee_id ID_NUMBER, last_name NAME, salary*12 ANN_SALARY FROM employees WHERE department_id = 50; View created. Creating a View (continued) You can control the column names by including column aliases in the subquery. The example in the slide creates a view containing the employee number (EMPLOYEE_ID) with the alias ID_NUMBER, name (LAST_NAME) with the alias NAME, and annual salary (SALARY) with the alias ANN_SALARY for every employee in department 50. As an alternative, you can use an alias after the CREATE statement and prior to the SELECT subquery. The number of aliases listed must match the number of expressions selected in the subquery. CREATE OR REPLACE VIEW salvu50 (ID_NUMBER, NAME, ANN_SALARY) AS SELECT employee_id, last_name, salary*12 FROM employees WHERE department_id = 50; View created. Oracle Database 10g: SQL Fundamentals I 10-10 10-10 Copyright © 2004, Oracle. All rights reserved. SELECT * FROM salvu50; Retrieving Data from a View Retrieving Data from a View You can retrieve data from a view as you would from any table. You can display either the contents of the entire view or just specific rows and columns. Oracle Database 10g: SQL Fundamentals I 10-11 10-11 Copyright © 2004, Oracle. All rights reserved. Modifying a View • Modify the EMPVU80 view by using a CREATE OR REPLACE VIEW clause. Add an alias for each column name: • Column aliases in the CREATE OR REPLACE VIEW clause are listed in the same order as the columns in the subquery. CREATE OR REPLACE VIEW empvu80 (id_number, name, sal, department_id) AS SELECT employee_id, first_name || ' ' || last_name, salary, department_id FROM employees WHERE department_id = 80; View created. Modifying a View With the OR REPLACE option, a view can be created even if one exists with this name already, thus replacing the old version of the view for its owner. This means that the view can be altered without dropping, re-creating, and regranting object privileges. Note: When assigning column aliases in the CREATE OR REPLACE VIEW clause, remember that the aliases are listed in the same order as the columns in the subquery. Oracle Database 10g: SQL Fundamentals I 10-12 10-12 Copyright © 2004, Oracle. All rights reserved. Creating a Complex View Create a complex view that contains group functions to display values from two tables: CREATE OR REPLACE VIEW dept_sum_vu (name, minsal, maxsal, avgsal) AS SELECT d.department_name, MIN(e.salary), MAX(e.salary),AVG(e.salary) FROM employees e JOIN departments d ON (e.department_id = d.department_id) GROUP BY d.department_name; View created. Creating a Complex View The example in the slide creates a complex view of department names, minimum salaries, maximum salaries, and average salaries by department. Note that alternative names have been specified for the view. This is a requirement if any column of the view is derived from a function or an expression. You can view the structure of the view by using the iSQL*Plus DESCRIBE command. Display the contents of the view by issuing a SELECT statement. SELECT * FROM dept_sum_vu; Oracle Database 10g: SQL Fundamentals I 10-13 10-13 Copyright © 2004, Oracle. All rights reserved. Rules for Performing DML Operations on a View • You can usually perform DML operations on simple views. • You cannot remove a row if the view contains the following: – Group functions – A GROUP BY clause – The DISTINCT keyword – The pseudocolumn ROWNUM keyword Oracle Database 10g: SQL Fundamentals I 10-14 10-14 Copyright © 2004, Oracle. All rights reserved. Rules for Performing DML Operations on a View You cannot modify data in a view if it contains: • Group functions • A GROUP BY clause • The DISTINCT keyword • The pseudocolumn ROWNUM keyword • Columns defined by expressions Performing DML Operations on a View (continued) You can modify data through a view unless it contains any of the conditions mentioned in the previous slide or columns defined by expressions (for example, SALARY * 12). Oracle Database 10g: SQL Fundamentals I 10-15 10-15 Copyright © 2004, Oracle. All rights reserved. Rules for Performing DML Operations on a View You cannot add data through a view if the view includes: • Group functions • A GROUP BY clause • The DISTINCT keyword • The pseudocolumn ROWNUM keyword • Columns defined by expressions • NOT NULL columns in the base tables that are not selected by the view Performing DML Operations on a View (continued) You can add data through a view unless it contains any of the items listed in the slide. You cannot add data to a view if the view contains NOT NULL columns without default values in the base table. All required values must be present in the view. Remember that you are adding values directly to the underlying table through the view. For more information, see “CREATE VIEW” in the Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 10-16 10-16 Copyright © 2004, Oracle. All rights reserved. Using the WITH CHECK OPTION Clause • You can ensure that DML operations performed on the view stay in the domain of the view by using the WITH CHECK OPTION clause: • Any attempt to change the department number for any row in the view fails because it violates the WITH CHECK OPTION constraint. CREATE OR REPLACE VIEW empvu20 AS SELECT * FROM employees WHERE department_id = 20 WITH CHECK OPTION CONSTRAINT empvu20_ck ; View created. Using the WITH CHECK OPTION Clause It is possible to perform referential integrity checks through views. You can also enforce constraints at the database level. The view can be used to protect data integrity, but the use is very limited. The WITH CHECK OPTION clause specifies that INSERTs and UPDATEs performed through the view cannot create rows that the view cannot select, and therefore it enables integrity constraints and data validation checks to be enforced on data being inserted or updated. If there is an attempt to perform DML operations on rows that the view has not selected, an error is displayed, along with the constraint name if that has been specified. UPDATE empvu20 SET department_id = 10 WHERE employee_id = 201; causes: ERROR at line 1: ORA-01402: view WITH CHECK OPTION where-clause violation Note: No rows are updated because if the department number were to change to 10, the view would no longer be able to see that employee. With the WITH CHECK OPTION clause, therefore, the view can see only employees in department 20 and does not allow the department number for those employees to be changed through the view. Oracle Database 10g: SQL Fundamentals I 10-17 10-17 Copyright © 2004, Oracle. All rights reserved. Denying DML Operations • You can ensure that no DML operations occur by adding the WITH READ ONLY option to your view definition. • Any attempt to perform a DML operation on any row in the view results in an Oracle server error. Oracle Database 10g: SQL Fundamentals I 10-18 10-18 Copyright © 2004, Oracle. All rights reserved. CREATE OR REPLACE VIEW empvu10 (employee_number, employee_name, job_title) AS SELECT employee_id, last_name, job_id FROM employees WHERE department_id = 10 WITH READ ONLY ; View created. Denying DML Operations Denying DML Operations (continued) Any attempt to remove a row from a view with a read-only constraint results in an error: DELETE FROM empvu10 WHERE employee_number = 200; DELETE FROM empvu10 * ERROR at line 1: ORA-01752: cannot delete from view without exactly one key-preserved table Any attempt to insert a row or modify a row using the view with a read-only constraint results in an Oracle server error: 01733: virtual column not allowed here. Oracle Database 10g: SQL Fundamentals I 10-19 10-19 Copyright © 2004, Oracle. All rights reserved. Removing a View You can remove a view without losing data because a view is based on underlying tables in the database. DROP VIEW view; DROP VIEW empvu80; View dropped. Removing a View You use the DROP VIEW statement to remove a view. The statement removes the view definition from the database. Dropping views has no effect on the tables on which the view was based. Views or other applications based on deleted views become invalid. Only the creator or a user with the DROP ANY VIEW privilege can remove a view. In the syntax: view is the name of the view Oracle Database 10g: SQL Fundamentals I 10-20 10-20 Copyright © 2004, Oracle. All rights reserved. Practice 10: Overview of Part 1 This practice covers the following topics: • Creating a simple view • Creating a complex view • Creating a view with a check constraint • Attempting to modify data in the view • Removing views Practice 10: Overview of Part 1 Part 1 of this lesson’s practice provides you with a variety of exercises in creating, using, and removing views. Complete questions 1–6 at the end of this lesson. Oracle Database 10g: SQL Fundamentals I 10-21 10-21 Copyright © 2004, Oracle. All rights reserved. Sequences Logically represents subsets of data from one or more tables View Generates numeric valuesSequence Basic unit of storage; composed of rows Table Gives alternative names to objectsSynonym Improves the performance of some queries Index DescriptionObject Sequences A sequence is a database object that creates integer values. You can create sequences and then use them to generate numbers. Oracle Database 10g: SQL Fundamentals I 10-22 10-22 Copyright © 2004, Oracle. All rights reserved. Sequences A sequence: • Can automatically generate unique numbers • Is a sharable object • Can be used to create a primary key value • Replaces application code • Speeds up the efficiency of accessing sequence values when cached in memory Oracle Database 10g: SQL Fundamentals I 10-23 10-23 Copyright © 2004, Oracle. All rights reserved. CREATE SEQUENCE Statement: Syntax Define a sequence to generate sequential numbers automatically: CREATE SEQUENCE sequence [INCREMENT BY n] [START WITH n] [{MAXVALUE n | NOMAXVALUE}] [{MINVALUE n | NOMINVALUE}] [{CYCLE | NOCYCLE}] [{CACHE n | NOCACHE}]; Creating a Sequence Automatically generate sequential numbers by using the CREATE SEQUENCE statement. In the syntax: sequence is the name of the sequence generator INCREMENT BY n specifies the interval between sequence numbers, where n is an integer (If this clause is omitted, the sequence increments by 1.) START WITH n specifies the first sequence number to be generated (If this clause is omitted, the sequence starts with 1.) MAXVALUE n specifies the maximum value the sequence can generate NOMAXVALUE specifies a maximum value of 10^27 for an ascending sequence and –1 for a descending sequence (This is the default option.) MINVALUE n specifies the minimum sequence value NOMINVALUE specifies a minimum value of 1 for an ascending sequence and –(10^26) for a descending sequence (This is the default option.) Oracle Database 10g: SQL Fundamentals I 10-24 10-24 Copyright © 2004, Oracle. All rights reserved. Creating a Sequence • Create a sequence named DEPT_DEPTID_SEQ to be used for the primary key of the DEPARTMENTS table. • Do not use the CYCLE option. CREATE SEQUENCE dept_deptid_seq INCREMENT BY 10 START WITH 120 MAXVALUE 9999 NOCACHE NOCYCLE; Sequence created. Creating a Sequence (continued) CYCLE | NOCYCLE specifies whether the sequence continues to generate values after reaching its maximum or minimum value NOCYCLE is the default option.) CACHE n | NOCACHE specifies how many values the Oracle server preallocates and keeps in memory (By default, the Oracle server caches 20 values.) The example in the slide creates a sequence named DEPT_DEPTID_SEQ to be used for the DEPARTMENT_ID column of the DEPARTMENTS table. The sequence starts at 120, does not allow caching, and does not cycle. Do not use the CYCLE option if the sequence is used to generate primary key values, unless you have a reliable mechanism that purges old rows faster than the sequence cycles. For more information, see “CREATE SEQUENCE” in the Oracle SQL Reference. Note: The sequence is not tied to a table. Generally, you should name the sequence after its intended use. However, the sequence can be used anywhere, regardless of its name. Oracle Database 10g: SQL Fundamentals I 10-25 10-25 Copyright © 2004, Oracle. All rights reserved. NEXTVAL and CURRVAL Pseudocolumns • NEXTVAL returns the next available sequence value. It returns a unique value every time it is referenced, even for different users. • CURRVAL obtains the current sequence value. • NEXTVAL must be issued for that sequence before CURRVAL contains a value. NEXTVAL and CURRVAL Pseudocolumns After you create your sequence, it generates sequential numbers for use in your tables. Reference the sequence values by using the NEXTVAL and CURRVAL pseudocolumns. The NEXTVAL pseudocolumn is used to extract successive sequence numbers from a specified sequence. You must qualify NEXTVAL with the sequence name. When you reference sequence.NEXTVAL, a new sequence number is generated and the current sequence number is placed in CURRVAL. The CURRVAL pseudocolumn is used to refer to a sequence number that the current user has just generated. NEXTVAL must be used to generate a sequence number in the current user’s session before CURRVAL can be referenced. You must qualify CURRVAL with the sequence name. When you reference sequence.CURRVAL, the last value returned to that user’s process is displayed. Oracle Database 10g: SQL Fundamentals I 10-26 NEXTVAL and CURRVAL Pseudocolumns (continued) Rules for Using NEXTVAL and CURRVAL You can use NEXTVAL and CURRVAL in the following contexts: • The SELECT list of a SELECT statement that is not part of a subquery • The SELECT list of a subquery in an INSERT statement • The VALUES clause of an INSERT statement • The SET clause of an UPDATE statement You cannot use NEXTVAL and CURRVAL in the following contexts: • The SELECT list of a view • A SELECT statement with the DISTINCT keyword • A SELECT statement with GROUP BY, HAVING, or ORDER BY clauses • A subquery in a SELECT, DELETE, or UPDATE statement • The DEFAULT expression in a CREATE TABLE or ALTER TABLE statement For more information, see “Pseudocolumns” and “CREATE SEQUENCE” in the Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 10-27 10-27 Copyright © 2004, Oracle. All rights reserved. Using a Sequence • Insert a new department named “Support” in location ID 2500: • View the current value for the DEPT_DEPTID_SEQ sequence: INSERT INTO departments(department_id, department_name, location_id) VALUES (dept_deptid_seq.NEXTVAL, 'Support', 2500); 1 row created. SELECT dept_deptid_seq.CURRVAL FROM dual; Using a Sequence The example in the slide inserts a new department in the DEPARTMENTS table. It uses the DEPT_DEPTID_SEQ sequence to generate a new department number as follows. You can view the current value of the sequence: SELECT dept_deptid_seq.CURRVAL FROM dual; Suppose that you now want to hire employees to staff the new department. The INSERT statement to be executed for all new employees can include the following code: INSERT INTO employees (employee_id, department_id, ...) VALUES (employees_seq.NEXTVAL, dept_deptid_seq .CURRVAL, ...); Note: The preceding example assumes that a sequence called EMPLOYEE_SEQ has already been created to generate new employee numbers. Oracle Database 10g: SQL Fundamentals I 10-28 10-28 Copyright © 2004, Oracle. All rights reserved. Caching Sequence Values • Caching sequence values in memory gives faster access to those values. • Gaps in sequence values can occur when: – A rollback occurs – The system crashes – A sequence is used in another table Caching Sequence Values You can cache sequences in memory to provide faster access to those sequence values. The cache is populated the first time you refer to the sequence. Each request for the next sequence value is retrieved from the cached sequence. After the last sequence value is used, the next request for the sequence pulls another cache of sequences into memory. Gaps in the Sequence Although sequence generators issue sequential numbers without gaps, this action occurs independent of a commit or rollback. Therefore, if you roll back a statement containing a sequence, the number is lost. Another event that can cause gaps in the sequence is a system crash. If the sequence caches values in memory, then those values are lost if the system crashes. Because sequences are not tied directly to tables, the same sequence can be used for multiple tables. If you do so, each table can contain gaps in the sequential numbers. Oracle Database 10g: SQL Fundamentals I 10-29 10-29 Copyright © 2004, Oracle. All rights reserved. Modifying a Sequence Change the increment value, maximum value, minimum value, cycle option, or cache option: ALTER SEQUENCE dept_deptid_seq INCREMENT BY 20 MAXVALUE 999999 NOCACHE NOCYCLE; Sequence altered. Modifying a Sequence If you reach the MAXVALUE limit for your sequence, no additional values from the sequence are allocated and you will receive an error indicating that the sequence exceeds the MAXVALUE. To continue to use the sequence, you can modify it by using the ALTER SEQUENCE statement. Syntax ALTER SEQUENCE sequence [INCREMENT BY n] [{MAXVALUE n | NOMAXVALUE}] [{MINVALUE n | NOMINVALUE}] [{CYCLE | NOCYCLE}] [{CACHE n | NOCACHE}]; In the syntax, sequence is the name of the sequence generator. For more information, see “ALTER SEQUENCE” in the Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 10-30 10-30 Copyright © 2004, Oracle. All rights reserved. Guidelines for Modifying a Sequence • You must be the owner or have the ALTER privilege for the sequence. • Only future sequence numbers are affected. • The sequence must be dropped and re-created to restart the sequence at a different number. • Some validation is performed. • To remove a sequence, use the DROP statement: DROP SEQUENCE dept_deptid_seq; Sequence dropped. Guidelines for Modifying a Sequence • You must be the owner or have the ALTER privilege for the sequence to modify it. You must be the owner or have the DROP ANY SEQUENCE privilege to remove it. • Only future sequence numbers are affected by the ALTER SEQUENCE statement. • The START WITH option cannot be changed using ALTER SEQUENCE. The sequence must be dropped and re-created to restart the sequence at a different number. • Some validation is performed. For example, a new MAXVALUE that is less than the current sequence number cannot be imposed. ALTER SEQUENCE dept_deptid_seq INCREMENT BY 20 MAXVALUE 90 NOCACHE NOCYCLE; ALTER SEQUENCE dept_deptid_seq * ERROR at line 1: ORA-04009: MAXVALUE cannot be made to be less than the current value Oracle Database 10g: SQL Fundamentals I 10-31 10-31 Copyright © 2004, Oracle. All rights reserved. Indexes Logically represents subsets of data from one or more tables View Generates numeric valuesSequence Basic unit of storage; composed of rows Table Gives alternative names to objectsSynonym Improves the performance of some queries Index DescriptionObject Indexes Indexes are database objects that you can create to improve the performance of some queries. Indexes can also be created automatically by the server when you create a primary key or unique constraint. Oracle Database 10g: SQL Fundamentals I 10-32 10-32 Copyright © 2004, Oracle. All rights reserved. Indexes An index: • Is a schema object • Can be used by the Oracle server to speed up the retrieval of rows by using a pointer • Can reduce disk I/O by using a rapid path access method to locate data quickly • Is independent of the table that it indexes • Is used and maintained automatically by the Oracle server Oracle Database 10g: SQL Fundamentals I 10-33 10-33 Copyright © 2004, Oracle. All rights reserved. How Are Indexes Created? • Automatically: A unique index is created automatically when you define a PRIMARY KEY or UNIQUE constraint in a table definition. • Manually: Users can create nonunique indexes on columns to speed up access to the rows. Oracle Database 10g: SQL Fundamentals I 10-34 10-34 Copyright © 2004, Oracle. All rights reserved. Creating an Index • Create an index on one or more columns: • Improve the speed of query access to the LAST_NAME column in the EMPLOYEES table: CREATE INDEX emp_last_name_idx ON employees(last_name); Index created. CREATE INDEX index ON table (column[, column]...); Creating an Index Create an index on one or more columns by issuing the CREATE INDEX statement. In the syntax: index is the name of the index table is the name of the table column is the name of the column in the table to be indexed For more information, see “CREATE INDEX” in the Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 10-35 10-35 Copyright © 2004, Oracle. All rights reserved. Index Creation Guidelines Do not create an index when: The columns are not often used as a condition in the query The table is small or most queries are expected to retrieve more than 2% to 4% of the rows in the table The table is updated frequently A column contains a large number of null values One or more columns are frequently used together in a WHERE clause or a join condition A column contains a wide range of values The indexed columns are referenced as part of an expression The table is large and most queries are expected to retrieve less than 2% to 4% of the rows in the table Create an index when: Oracle Database 10g: SQL Fundamentals I 10-36 10-36 Copyright © 2004, Oracle. All rights reserved. Removing an Index • Remove an index from the data dictionary by using the DROP INDEX command: • Remove the UPPER_LAST_NAME_IDX index from the data dictionary: • To drop an index, you must be the owner of the index or have the DROP ANY INDEX privilege. DROP INDEX emp_last_name_idx; Index dropped. DROP INDEX index; Removing an Index You cannot modify indexes. To change an index, you must drop it and then re-create it. Remove an index definition from the data dictionary by issuing the DROP INDEX statement. To drop an index, you must be the owner of the index or have the DROP ANY INDEX privilege. In the syntax, index is the name of the index. Note: If you drop a table, indexes and constraints are automatically dropped but views and sequences remain. Oracle Database 10g: SQL Fundamentals I 10-37 10-37 Copyright © 2004, Oracle. All rights reserved. Synonyms Logically represents subsets of data from one or more tables View Generates numeric valuesSequence Basic unit of storage; composed of rows Table Gives alternative names to objectsSynonym Improves the performance of some queries Index DescriptionObject Synonyms Synonyms are database objects that enable you to call a table by another name. You can create synonyms to give an alternate name to a table. Oracle Database 10g: SQL Fundamentals I 10-38 10-38 Copyright © 2004, Oracle. All rights reserved. Synonyms Simplify access to objects by creating a synonym (another name for an object). With synonyms, you can: • Create an easier reference to a table that is owned by another user • Shorten lengthy object names CREATE [PUBLIC] SYNONYM synonym FOR object; Creating a Synonym for an Object To refer to a table that is owned by another user, you need to prefix the table name with the name of the user who created it, followed by a period. Creating a synonym eliminates the need to qualify the object name with the schema and provides you with an alternative name for a table, view, sequence, procedure, or other objects. This method can be especially useful with lengthy object names, such as views. In the syntax: PUBLIC creates a synonym that is accessible to all users synonym is the name of the synonym to be created object identifies the object for which the synonym is created Guidelines • The object cannot be contained in a package. • A private synonym name must be distinct from all other objects that are owned by the same user. For more information, see “CREATE SYNONYM” in the Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 10-39 10-39 Copyright © 2004, Oracle. All rights reserved. Creating and Removing Synonyms • Create a shortened name for the DEPT_SUM_VU view: • Drop a synonym: CREATE SYNONYM d_sum FOR dept_sum_vu; Synonym Created. DROP SYNONYM d_sum; Synonym dropped. Creating a Synonym The slide example creates a synonym for the DEPT_SUM_VU view for quicker reference. The database administrator can create a public synonym that is accessible to all users. The following example creates a public synonym named DEPT for Alice’s DEPARTMENTS table: CREATE PUBLIC SYNONYM dept FOR alice.departments; Synonym created. Removing a Synonym To remove a synonym, use the DROP SYNONYM statement. Only the database administrator can drop a public synonym. DROP PUBLIC SYNONYM dept; Synonym dropped. For more information, see “DROP SYNONYM” in the Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I 10-40 10-40 Copyright © 2004, Oracle. All rights reserved. Summary In this lesson, you should have learned how to: • Create, use, and remove views • Automatically generate sequence numbers by using a sequence generator • Create indexes to improve query retrieval speed • Use synonyms to provide alternative names for objects Summary In this lesson, you should have learned about database objects such as views, sequences, indexes, and synonyms. Oracle Database 10g: SQL Fundamentals I 10-41 10-41 Copyright © 2004, Oracle. All rights reserved. Practice 10: Overview of Part 2 This practice covers the following topics: • Creating sequences • Using sequences • Creating nonunique indexes • Creating synonyms Practice 10: Overview of Part 2 Part 2 of this lesson’s practice provides you with a variety of exercises in creating and using a sequence, an index, and a synonym. Complete questions 7–10 at the end of this lesson. Oracle Database 10g: SQL Fundamentals I 10-42 Practice 10 Part 1 1. The staff in the HR department wants to hide some of the data in the EMPLOYEES table. They want a view called EMPLOYEES_VU based on the employee numbers, employee names, and department numbers from the EMPLOYEES table. They want the heading for the employee name to be EMPLOYEE. 2. Confirm that the view works. Display the contents of the EMPLOYEES_VU view. 3. Using your EMPLOYEES_VU view, write a query for the HR department to display all employee names and department numbers. … … Oracle Database 10g: SQL Fundamentals I 10-43 Practice 10 4. Department 50 needs access to its employee data. Create a view named DEPT50 that contains the employee numbers, employee last names, and department numbers for all employees in department 50. You have been asked to label the view columns EMPNO, EMPLOYEE, and DEPTNO. For security purposes, do not allow an employee to be reassigned to another department through the view. 5. Display the structure and contents of the DEPT50 view. 6. Test your view. Attempt to reassign Matos to department 80. Oracle Database 10g: SQL Fundamentals I 10-44 Practice 10 Part 2 7. You need a sequence that can be used with the primary key column of the DEPT table. The sequence should start at 200 and have a maximum value of 1,000. Have your sequence increment by 10. Name the sequence DEPT_ID_SEQ. 8. To test your sequence, write a script to insert two rows in the DEPT table. Name your script lab_10_08.sql. Be sure to use the sequence that you created for the ID column. Add two departments: Education and Administration. Confirm your additions. Run the commands in your script. 9. Create a nonunique index on the NAME column in the DEPT table. 10. Create a synonym for your EMPLOYEES table. Call it EMP. Copyright © 2004, Oracle. All rights reserved. Managing Objects with Data Dictionary Views Oracle Database 10g: SQL Fundamentals I 11-2 11-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Use the data dictionary views to research data on your objects • Query various data dictionary views Objectives In this lesson, you are introduced to the data dictionary views. You will learn that the dictionary views can be used to retrieve metadata and create reports about your schema objects. Oracle Database 10g: SQL Fundamentals I 11-3 11-3 Copyright © 2004, Oracle. All rights reserved. The Data Dictionary Oracle Database 10g: SQL Fundamentals I 11-4 11-4 Copyright © 2004, Oracle. All rights reserved. Data Dictionary Structure Oracle Database 10g: SQL Fundamentals I 11-5 11-5 Copyright © 2004, Oracle. All rights reserved. Data Dictionary Structure View naming convention: Database administrator’s view (what is in everyone’s schemas) DBA Performance-related dataV$ User’s view (what is in your schema; what you own) USER Expanded user’s view (what you can access) ALL PurposeView Prefix Data Dictionary Structure (continued) The data dictionary consists of sets of views. In many cases, a set consists of three views containing similar information and distinguished from each other by their prefixes. For example, there is a view named USER_OBJECTS, another named ALL_OBJECTS, and a third named DBA_OBJECTS. These three views contain similar information about objects in the database, except that the scope is different. USER_OBJECTS contains information about objects that you own or created. ALL_OBJECTS contains information about all objects to which you have access. DBA_OBJECTS contains information on all objects that are owned by all users. For views that are prefixed with ALL or DBA, there is usually an additional column in the view named OWNER to identify who owns the object. There is also a set of views that is prefixed with v$. These views are dynamic in nature and hold information about performance. Dynamic performance tables are not true tables, and they should not be accessed by most users. However, database administrators can query and create views on the tables and grant access to those views to other users. This course does not go into details about these views. Oracle Database 10g: SQL Fundamentals I 11-6 11-6 Copyright © 2004, Oracle. All rights reserved. How to Use the Dictionary Views Start with DICTIONARY. It contains the names and descriptions of the dictionary tables and views. DESCRIBE DICTIONARY SELECT * FROM dictionary WHERE table_name = 'USER_OBJECTS'; How to Use the Dictionary Views To familiarize yourself with the dictionary views, you can use the dictionary view named DICTIONARY. It contains the name and short description of each dictionary view to which you have access. You can write queries to search for information on a particular view name, or you can search the COMMENTS column for a word or phrase. In the example shown, the DICTIONARY view is described. It has two columns. The SELECT statement retrieves information about the dictionary view named USER_OBJECTS. The USER_OBJECTS view contains information about all the objects that you own. You can write queries to search the COMMENTS column for a word or phrase. For example, the following query returns the names of all views that you are permitted to access in which the COMMENTS column contains the word columns: SELECT table_name FROM dictionary WHERE LOWER(comments) LIKE '%columns'; Note: The names in the data dictionary are uppercase. Oracle Database 10g: SQL Fundamentals I 11-7 11-7 Copyright © 2004, Oracle. All rights reserved. USER_OBJECTS and ALL_OBJECTS Views USER_OBJECTS: • Query USER_OBJECTS to see all of the objects that are owned by you • Is a useful way to obtain a listing of all object names and types in your schema, plus the following information: – Date created – Date of last modification – Status (valid or invalid) ALL_OBJECTS: • Query ALL_OBJECTS to see all objects to which you have access USER_OBJECTS View You can query the USER_OBJECTS view to see the names and types of all the objects in your schema. There are several columns in this view: • OBJECT_NAME: Name of the object • OBJECT_ID: Dictionary object number of the object • OBJECT_TYPE: Type of object (such as TABLE, VIEW, INDEX, SEQUENCE) • CREATED: Timestamp for the creation of the object • LAST_DDL_TIME: Timestamp for the last modification of the object resulting from a DDL command • STATUS: Status of the object (VALID, INVALID, or N/A) • GENERATED: Was the name of this object system-generated? (Y|N) Note: This is not a complete listing of the columns. For a complete listing, see “USER_OBJECTS” in the Oracle Database Reference. You can also query the ALL_OBJECTS view to see a listing of all objects to which you have access. Oracle Database 10g: SQL Fundamentals I 11-8 11-8 Copyright © 2004, Oracle. All rights reserved. USER_OBJECTS View SELECT object_name, object_type, created, status FROM user_objects ORDER BY object_type; … USER_OBJECTS View (continued) The example shows the names, types, dates of creation, and status of all objects that are owned by this user. The OBJECT_TYPE column holds the values of either TABLE, VIEW, SEQUENCE, INDEX, PROCEDURE, FUNCTION, PACKAGE, or TRIGGER. The STATUS column holds a value of VALID, INVALID, or N/A. While tables are always valid, the views, procedures, functions, packages, and triggers may be invalid. The CAT View For a simplified query and output, you can query the CAT view. This view contains only two columns: TABLE_NAME and TABLE_TYPE. It provides the names of all your INDEX, TABLE, CLUSTER, VIEW, SYNONYM, SEQUENCE, or UNDEFINED objects. Oracle Database 10g: SQL Fundamentals I 11-9 11-9 Copyright © 2004, Oracle. All rights reserved. Table Information USER_TABLES: DESCRIBE user_tables SELECT table_name FROM user_tables; … USER_TABLES View You can use the USER_TABLES view to obtain the names of all of your tables. The USER_TABLES view contains information about your tables. In addition to providing the table name, it contains detailed information on the storage. The TABS view is a synonym of the USER_TABLES view. You can query it to see a listing of tables that you own: SELECT table_name FROM tabs; Note: For a complete listing of the columns in the USER_TABLES view, see “USER_TABLES” in the Oracle Database Reference. You can also query the ALL_TABLES view to see a listing of all tables to which you have access. Oracle Database 10g: SQL Fundamentals I 11-10 11-10 Copyright © 2004, Oracle. All rights reserved. Column Information USER_TAB_COLUMNS: DESCRIBE user_tab_columns … Column Information You can query the USER_TAB_COLUMNS view to find detailed information about the columns in your tables. While the USER_TABLES view provides information on your table names and storage, detailed column information is found in the USER_TAB_COLUMNS view. This view contains information such as: • Column names • Column data types • Length of data types • Precision and scale for NUMBER columns • Whether nulls are allowed (Is there a NOT NULL constraint on the column?) • Default value Note: For a complete listing and description of the columns in the USER_TAB_COLUMNS view, see “USER_TAB_COLUMNS” in the Oracle Database Reference. Oracle Database 10g: SQL Fundamentals I 11-11 11-11 Copyright © 2004, Oracle. All rights reserved. Column Information SELECT column_name, data_type, data_length, data_precision, data_scale, nullable FROM user_tab_columns WHERE table_name = 'EMPLOYEES'; Column Information (continued) By querying the USER_TAB_COLUMNS table, you can find details about your columns such as the names, data types, data type lengths, null constraints, and default value for a column. The example shown displays the columns, data types, data lengths, and null constraints for the EMPLOYEES table. Note that this information is similar to the output from the iSQL*Plus DESCRIBE command. Oracle Database 10g: SQL Fundamentals I 11-12 11-12 Copyright © 2004, Oracle. All rights reserved. Constraint Information • USER_CONSTRAINTS describes the constraint definitions on your tables. • USER_CONS_COLUMNS describes columns that are owned by you and that are specified in constraints. DESCRIBE user_constraints … Constraint Information You can find out the names of your constraints, the type of constraint, the table name to which the constraint applies, the condition for check constraints, foreign key constraint information, deletion rule for foreign key constraints, the status, and many other types of information about your constraints. Note: For a complete listing and description of the columns in the USER_CONSTRAINTS view, see “USER_CONSTRAINTS” in the Oracle Database Reference. Oracle Database 10g: SQL Fundamentals I 11-13 11-13 Copyright © 2004, Oracle. All rights reserved. Constraint Information SELECT constraint_name, constraint_type, search_condition, r_constraint_name, delete_rule, status FROM user_constraints WHERE table_name = 'EMPLOYEES'; USER_CONSTRAINTS: Example In the example shown, the USER_CONSTRAINTS view is queried to find the names, types, check conditions, name of the unique constraint that the foreign key references, deletion rule for a foreign key, and status for constraints on the EMPLOYEES table. The CONSTRAINT_TYPE can be: • C (check constraint on a table) • P (primary key) • U (unique key) • R (referential integrity) • V (with check option, on a view) • O (with read-only, on a view) The DELETE_RULE can be: • CASCADE: If the parent record is deleted, the child records are deleted too. • NO ACTION: A parent record can be deleted only if no child records exist. The STATUS can be: • ENABLED: Constraint is active. • DISABLED: Constraint is made not active. Oracle Database 10g: SQL Fundamentals I 11-14 11-14 Copyright © 2004, Oracle. All rights reserved. Constraint Information DESCRIBE user_cons_columns SELECT constraint_name, column_name FROM user_cons_columns WHERE table_name = 'EMPLOYEES'; … Querying USER_CONS_COLUMNS To find the names of the columns to which a constraint applies, query the USER_CONS_COLUMNS dictionary view. This view tells you the name of the owner of a constraint, the name of the constraint, the table that the constraint is on, the names of the columns with the constraint, and the original position of column or attribute in the definition of the object. Note: A constraint may apply to more than one column. You can also write a join between the USER_CONSTRAINTS and USER_CONS_COLUMNS to create customized output from both tables. Oracle Database 10g: SQL Fundamentals I 11-15 11-15 Copyright © 2004, Oracle. All rights reserved. View Information DESCRIBE user_views SELECT DISTINCT view_name FROM user_views; SELECT text FROM user_views WHERE view_name = 'EMP_DETAILS_VIEW'; 1 2 3 Views in the Data Dictionary After your view is created, you can query the data dictionary view called USER_VIEWS to see the name of the view and the view definition. The text of the SELECT statement that constitutes your view is stored in a LONG column. The LENGTH column is the number of characters in the SELECT statement. By default, when you select from a LONG column, only the first 80 characters of the column’s value are displayed. To see more than 80 characters, use the iSQL*Plus command SET LONG: SET LONG 1000 In the examples in the slide: 1. The USER_VIEWS columns are displayed. Note that this is a partial listing. 2. The names of your views are retrieved. 3. The SELECT statement for the EMP_DETAILS_VIEW is displayed from the dictionary. Data Access Using Views When you access data using a view, the Oracle server performs the following operations: • It retrieves the view definition from the data dictionary table USER_VIEWS. • It checks access privileges for the view base table. • It converts the view query into an equivalent operation on the underlying base table or tables. In other words, data is retrieved from, or an update is made to, the base tables. Oracle Database 10g: SQL Fundamentals I 11-16 11-16 Copyright © 2004, Oracle. All rights reserved. Sequence Information DESCRIBE user_sequences USER_SEQUENCES View The USER_SEQUENCES view describes all sequences that are owned by you. When you create the sequence, you specify criteria that are stored in the USER_SEQUENCES view. The columns in this view are: • SEQUENCE_NAME: Name of the sequence • MIN_VALUE: Minimum value of the sequence • MAX_VALUE: Maximum value of the sequence • INCREMENT_BY: Value by which sequence is incremented • CYCLE_FLAG: Does sequence wrap around on reaching limit? • ORDER_FLAG: Are sequence numbers generated in order? • CACHE_SIZE: Number of sequence numbers to cache • LAST_NUMBER: Last sequence number written to disk. If a sequence uses caching, the number written to disk is the last number placed in the sequence cache. This number is likely to be greater than the last sequence number that was used. Oracle Database 10g: SQL Fundamentals I 11-17 11-17 Copyright © 2004, Oracle. All rights reserved. Sequence Information • Verify your sequence values in the USER_SEQUENCES data dictionary table. • The LAST_NUMBER column displays the next available sequence number if NOCACHE is specified. SELECT sequence_name, min_value, max_value, increment_by, last_number FROM user_sequences; Confirming Sequences After creating your sequence, it is documented in the data dictionary. Because a sequence is a database object, you can identify it in the USER_OBJECTS data dictionary table. You can also confirm the settings of the sequence by selecting from the USER_SEQUENCES data dictionary view. Viewing the Next Available Sequence Value Without Incrementing It If the sequence was created with NOCACHE, it is possible to view the next available sequence value without incrementing it by querying the USER_SEQUENCES table. Oracle Database 10g: SQL Fundamentals I 11-18 11-18 Copyright © 2004, Oracle. All rights reserved. Synonym Information DESCRIBE user_synonyms SELECT * FROM user_synonyms; USER_SYNONYMS View The USER_SYNONYMS dictionary view describes private synonyms (synonyms that are owned by you). You can query this view to find your synonyms. You can query ALL_SYNONYMS to find out the name of all of the synonyms that are available to you and the objects on which these synonyms apply. The columns in this view are: • SYNONYM_NAME: Name of the synonym • TABLE_OWNER: Owner of the object that is referenced by the synonym • TABLE_NAME: Name of the table or view that is referenced by the synonym • DB_LINK: Name of the database link reference (if any) Oracle Database 10g: SQL Fundamentals I 11-19 11-19 Copyright © 2004, Oracle. All rights reserved. Adding Comments to a Table • You can add comments to a table or column by using the COMMENT statement: • Comments can be viewed through the data dictionary views: – ALL_COL_COMMENTS – USER_COL_COMMENTS – ALL_TAB_COMMENTS – USER_TAB_COMMENTS COMMENT ON TABLE employees IS 'Employee Information'; Comment created. Adding Comments to a Table You can add a comment of up to 4,000 bytes about a column, table, view, or snapshot by using the COMMENT statement. The comment is stored in the data dictionary and can be viewed in one of the following data dictionary views in the COMMENTS column: • ALL_COL_COMMENTS • USER_COL_COMMENTS • ALL_TAB_COMMENTS • USER_TAB_COMMENTS Syntax COMMENT ON TABLE table | COLUMN table.column IS 'text'; In the syntax: table is the name of the table column is the name of the column in a table text is the text of the comment You can drop a comment from the database by setting it to empty string (''): COMMENT ON TABLE employees IS ' '; Oracle Database 10g: SQL Fundamentals I 11-20 11-20 Copyright © 2004, Oracle. All rights reserved. Summary In this lesson, you should have learned how to find information about your objects through the following dictionary views: • DICTIONARY • USER_OBJECTS • USER_TABLES • USER_TAB_COLUMNS • USER_CONSTRAINTS • USER_CONS_COLUMNS • USER_VIEWS • USER_SEQUENCES • USER_TAB_SYNONYMS Summary In this lesson, you learned about some of the dictionary views that are available to you. You can use these dictionary views to find information about your tables, constraints, views, sequences, and synonyms. Oracle Database 10g: SQL Fundamentals I 11-21 11-21 Copyright © 2004, Oracle. All rights reserved. Practice 11: Overview This practice covers the following topics: • Querying the dictionary views for table and column information • Querying the dictionary views for constraint information • Querying the dictionary views for view information • Querying the dictionary views for sequence information • Querying the dictionary views for synonym information • Adding a comment to a table and querying the dictionary views for comment information Practice 11: Overview In this practice, you query the dictionary views to find information about objects in your schema. Oracle Database 10g: SQL Fundamentals I 11-22 Practice 11 1. For a specified table, create a script that reports the column names, data types, and data types’ lengths, as well as whether nulls are allowed. Prompt the user to enter the table name. Give appropriate aliases to the columns DATA_PRECISION and DATA_SCALE. Save this script in a file named lab_11_01.sql. For example, if the user enters DEPARTMENTS, the following output results: 2. Create a script that reports the column name, constraint name, constraint type, search condition, and status for a specified table. You must join the USER_CONSTRAINTS and USER_CONS_COLUMNS tables to obtain all of this information. Prompt the user to enter the table name. Save the script in a file named lab_11_02.sql. For example, if the user enters DEPARTMENTS, the following output results: 3. Add a comment to the DEPARTMENTS table. Then query the USER_TAB_COMMENTS view to verify that the comment is present. 4. Find the names of all synonyms that are in your schema. Oracle Database 10g: SQL Fundamentals I 11-23 Practice 11 5. You need to determine the names and definitions of all of the views in your schema. Create a report that retrieves view information: the view name and text from the USER_VIEWS data dictionary view. Note: Another view already exists. The EMP_DETAILS_VIEW was created as part of your schema. Also, if you completed practice 10, you will see the DEPT50 view. Note: To see more contents of a LONG column, use the iSQL*Plus command SET LONG n, where n is the value of the number of characters of the LONG column that you want to see. 6. Find the names of your sequences. Write a query in a script to display the following information about your sequences: sequence name, maximum value, increment size, and last number. Name the script lab_11_06.sql. Run the statement in your script. Table Descriptions and Data B Oracle Database 10g: SQL Fundamentals I B-2 Human Resources (HR) Data Set JOB_GRADES GRADE_LEVEL LOWEST_SAL HIGHEST_SAL Oracle Database 10g: SQL Fundamentals I B-3 Human Resources (HR) Data Set The Human Resources (HR) schema is part of the Oracle Common Schema that can be installed in an Oracle database. The practices in this course use the data from the HR schema. Table Descriptions REGIONS contains rows representing a region (such as Americas, Asia, and so on). COUNTRIES contains rows for countries, each of which are associated with a region. LOCATIONS contains the addresses of specific offices, warehouses, and/or production sites of a company in a particular country. DEPARTMENTS shows details of the departments in which employees work. Each department can have a relationship representing the department manager in the EMPLOYEES table. EMPLOYEES contains details about each employee who works for a department. Some employees may not be assigned to any department. JOBS contains the job types that can be held by each employee. JOB_HISTORY contains the job history of the employees. If an employee changes departments within the job or changes jobs within the department, a new row is inserted in this table with the old job information of the employee. JOB_GRADES identifies a salary range per job grade. The salary ranges do not overlap. Oracle Database 10g: SQL Fundamentals I B-4 COUNTRIES Table DESCRIBE countries SELECT * FROM countries; Oracle Database 10g: SQL Fundamentals I B-5 DEPARTMENTS Table DESCRIBE departments SELECT * FROM departments; Oracle Database 10g: SQL Fundamentals I B-6 EMPLOYEES Table DESCRIBE employees SELECT * FROM employees; Oracle Database 10g: SQL Fundamentals I B-7 EMPLOYEES Table (continued) Oracle Database 10g: SQL Fundamentals I B-8 JOBS Table DESCRIBE jobs SELECT * FROM jobs; Oracle Database 10g: SQL Fundamentals I B-9 JOB_GRADES Table DESCRIBE job_grades SELECT * FROM job_grades; Oracle Database 10g: SQL Fundamentals I B-10 JOB_HISTORY Table DESCRIBE job_history SELECT * FROM job_history; Oracle Database 10g: SQL Fundamentals I B-11 LOCATIONS Table DESCRIBE locations SELECT * FROM locations; Oracle Database 10g: SQL Fundamentals I B-12 REGIONS Table DESCRIBE regions SELECT * FROM regions; Copyright © 2004, Oracle. All rights reserved. Oracle Join Syntax Oracle Database 10g: SQL Fundamentals I C-2 C-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this lesson, you should be able to do the following: • Write SELECT statements to access data from more than one table using equijoins and non- equijoins • Use outer joins to view data that generally does not meet a join condition • Join a table to itself by using a self-join Objectives This lesson explains how to obtain data from more than one table. A join is used to view information from multiple tables. Hence, you can join tables together to view information from more than one table. Note: Information on joins is found in “SQL Queries and Subqueries: Joins” in Oracle SQL Reference. Oracle Database 10g: SQL Fundamentals I C-3 C-3 Copyright © 2004, Oracle. All rights reserved. Obtaining Data from Multiple Tables EMPLOYEES DEPARTMENTS … … Data from Multiple Tables Sometimes you need to use data from more than one table. In the slide example, the report displays data from two separate tables: • Employee IDs exist in the EMPLOYEES table. • Department IDs exist in both the EMPLOYEES and DEPARTMENTS tables. • Department names exist in the DEPARTMENTS table. To produce the report, you need to link the EMPLOYEES and DEPARTMENTS tables and access data from both of them. Oracle Database 10g: SQL Fundamentals I C-4 C-4 Copyright © 2004, Oracle. All rights reserved. Cartesian Products • A Cartesian product is formed when: – A join condition is omitted – A join condition is invalid – All rows in the first table are joined to all rows in the second table • To avoid a Cartesian product, always include a valid join condition in a WHERE clause. Cartesian Products When a join condition is invalid or omitted completely, the result is a Cartesian product, in which all combinations of rows are displayed. All rows in the first table are joined to all rows in the second table. A Cartesian product tends to generate a large number of rows, and the result is rarely useful. You should always include a valid join condition unless you have a specific need to combine all rows from all tables. Cartesian products are useful for some tests when you need to generate a large number of rows to simulate a reasonable amount of data. Oracle Database 10g: SQL Fundamentals I C-5 C-5 Copyright © 2004, Oracle. All rights reserved. Generating a Cartesian Product Cartesian product: 20 x 8 = 160 rows EMPLOYEES (20 rows) DEPARTMENTS (8 rows) Oracle Database 10g: SQL Fundamentals I C-6 C-6 Copyright © 2004, Oracle. All rights reserved. • Equijoin • Non-equijoin • Outer join • Self-join Types of Joins • Cross join • Natural join • Using clause • Full (or two-sided) outer join • Arbitrary join condition for outer join SQL:1999–compliant joinsOracle-proprietary joins (8i and earlier releases) Types of Joins Prior to the the release of Oracle9i Database, the join syntax was proprietary. Note: The SQL:1999–compliant join syntax does not offer any performance benefits over the Oracle-proprietary join syntax that existed in prior releases. For detailed information about the SQL:1999–compliant join syntax, see Lesson 5. Oracle Database 10g: SQL Fundamentals I C-7 C-7 Copyright © 2004, Oracle. All rights reserved. Joining Tables Using Oracle Syntax Use a join to query data from more than one table: • Write the join condition in the WHERE clause. • Prefix the column name with the table name when the same column name appears in more than one table. SELECT table1.column, table2.column FROM table1, table2 WHERE table1.column1 = table2.column2; Defining Joins When data from more than one table in the database is required, a join condition is used. Rows in one table can be joined to rows in another table according to common values that exist in corresponding columns (that is, usually primary and foreign key columns). To display data from two or more related tables, write a simple join condition in the WHERE clause. In the syntax: table1.column denotes the table and column from which data is retrieved table1.column1 = is the condition that joins (or relates) the tables together table2.column2 Guidelines • When writing a SELECT statement that joins tables, precede the column name with the table name for clarity and to enhance database access. • If the same column name appears in more than one table, the column name must be prefixed with the table name. • To join n tables together, you need a minimum of n-1 join conditions. For example, to join four tables, a minimum of three joins is required. This rule may not apply if your table has a concatenated primary key, in which case more than one column is required to uniquely identify each row. Oracle Database 10g: SQL Fundamentals I C-8 C-8 Copyright © 2004, Oracle. All rights reserved. Equijoins EMPLOYEES DEPARTMENTS Foreign key Primary key … … Equijoins To determine an employee’s department name, you compare the value in the DEPARTMENT_ID column in the EMPLOYEES table with the DEPARTMENT_ID values in the DEPARTMENTS table. The relationship between the EMPLOYEES and DEPARTMENTS tables is an equijoin—that is, values in the DEPARTMENT_ID column in both tables must be equal. Frequently, this type of join involves primary and foreign key complements. Note: Equijoins are also called simple joins or inner joins. Oracle Database 10g: SQL Fundamentals I C-9 C-9 Copyright © 2004, Oracle. All rights reserved. SELECT employees.employee_id, employees.last_name, employees.department_id, departments.department_id, departments.location_id FROM employees, departments WHERE employees.department_id = departments.department_id; Oracle Database 10g: SQL Fundamentals I C-10 C-10 Copyright © 2004, Oracle. All rights reserved. Additional Search Conditions Using the AND Operator EMPLOYEES DEPARTMENTS … … Additional Search Conditions In addition to the join, you may have criteria for your WHERE clause to restrict the rows under consideration for one or more tables in the join. For example, to display employee Matos’s department number and department name, you need an additional condition in the WHERE clause. SELECT last_name, employees.department_id, department_name FROM employees, departments WHERE employees.department_id = departments.department_id AND last_name = 'Matos'; Oracle Database 10g: SQL Fundamentals I C-11 C-11 Copyright © 2004, Oracle. All rights reserved. Qualifying Ambiguous Column Names • Use table prefixes to qualify column names that are in multiple tables. • Use table prefixes to improve performance. • Use column aliases to distinguish columns that have identical names but reside in different tables. Qualifying Ambiguous Column Names You need to qualify the names of the columns in the WHERE clause with the table name to avoid ambiguity. Without the table prefixes, the DEPARTMENT_ID column could be from either the DEPARTMENTS table or the EMPLOYEES table. It is necessary to add the table prefix to execute your query. If there are no common column names between the two tables, there is no need to qualify the columns. However, using the table prefix improves performance, because you tell the Oracle server exactly where to find the columns. The requirement to qualify ambiguous column names is also applicable to columns that may be ambiguous in other clauses, such as the SELECT clause or the ORDER BY clause. Oracle Database 10g: SQL Fundamentals I C-12 C-12 Copyright © 2004, Oracle. All rights reserved. SELECT e.employee_id, e.last_name, e.department_id, d.department_id, d.location_id FROM employees e , departments d WHERE e.department_id = d.department_id; Using Table Aliases • Use table aliases to simplify queries. • Use table prefixes to improve performance. Using Table Aliases Qualifying column names with table names can be very time consuming, particularly if table names are lengthy. You can use table aliases instead of table names. Just as a column alias gives a column another name, a table alias gives a table another name. Table aliases help to keep SQL code smaller, therefore using less memory. Notice how table aliases are identified in the FROM clause in the example. The table name is specified in full, followed by a space and then the table alias. The EMPLOYEES table has been given an alias of e, and the DEPARTMENTS table has an alias of d. Guidelines • Table aliases can be up to 30 characters in length, but shorter aliases are better than longer ones. • If a table alias is used for a particular table name in the FROM clause, then that table alias must be substituted for the table name throughout the SELECT statement. • Table aliases should be meaningful. • The table alias is valid for only the current SELECT statement. Oracle Database 10g: SQL Fundamentals I C-13 C-13 Copyright © 2004, Oracle. All rights reserved. Joining More Than Two Tables EMPLOYEES LOCATIONSDEPARTMENTS Oracle Database 10g: SQL Fundamentals I C-14 C-14 Copyright © 2004, Oracle. All rights reserved. Non-Equijoins EMPLOYEES JOB_GRADES Salary in the EMPLOYEES table must be between lowest salary and highest salary in the JOB_GRADES table. Oracle Database 10g: SQL Fundamentals I C-15 C-15 Copyright © 2004, Oracle. All rights reserved. Retrieving Records with Non-Equijoins SELECT e.last_name, e.salary, j.grade_level FROM employees e, job_grades j WHERE e.salary BETWEEN j.lowest_sal AND j.highest_sal; Oracle Database 10g: SQL Fundamentals I C-16 C-16 Copyright © 2004, Oracle. All rights reserved. Outer Joins EMPLOYEESDEPARTMENTS There are no employees in department 190. Oracle Database 10g: SQL Fundamentals I C-17 C-17 Copyright © 2004, Oracle. All rights reserved. Outer Joins Syntax • You use an outer join to see rows that do not meet the join condition. • The outer join operator is the plus sign (+). SELECT table1.column, table2.column FROM table1, table2 WHERE table1.column(+) = table2.column; SELECT table1.column, table2.column FROM table1, table2 WHERE table1.column = table2.column(+); Using Outer Joins to Return Records with No Direct Match The missing rows can be returned if an outer join operator is used in the join condition. The operator is a plus sign enclosed in parentheses (+), and it is placed on the “side” of the join that is deficient in information. This operator has the effect of creating one or more null rows, to which one or more rows from the nondeficient table can be joined. In the syntax: table1.column = is the condition that joins (or relates) the tables together table2.column (+) is the outer join symbol, which can be placed on either side of the WHERE clause condition, but not on both sides. (Place the outer join symbol following the name of the column in the table without the matching rows.) Oracle Database 10g: SQL Fundamentals I C-18 C-18 Copyright © 2004, Oracle. All rights reserved. SELECT e.last_name, e.department_id, d.department_name FROM employees e, departments d WHERE e.department_id(+) = d.department_id ; Oracle Database 10g: SQL Fundamentals I C-19 C-19 Copyright © 2004, Oracle. All rights reserved. Self-Joins EMPLOYEES (WORKER) EMPLOYEES (MANAGER) MANAGER_ID in the WORKER table is equal to EMPLOYEE_ID in the MANAGER table. … … Joining a Table to Itself Sometimes you need to join a table to itself. To find the name of each employee’s manager, you need to join the EMPLOYEES table to itself; this type of join is called a self-join. For example, to find the name of Lorentz’s manager, you need to do the following: • Find Lorentz in the EMPLOYEES table by looking at the LAST_NAME column. • Find the manager number for Lorentz by looking at the MANAGER_ID column. Lorentz’s manager number is 103. • Find the name of the manager who has EMPLOYEE_ID 103 by looking at the LAST_NAME column. Hunold’s employee number is 103, so Hunold is Lorentz’s manager. In this process, you look in the table twice. The first time you look in the table to find Lorentz in the LAST_NAME column and the MANAGER_ID value of 103. The second time you look in the EMPLOYEE_ID column to find 103 and the LAST_NAME column to find Hunold. Oracle Database 10g: SQL Fundamentals I C-20 C-20 Copyright © 2004, Oracle. All rights reserved. Joining a Table to Itself SELECT worker.last_name || ' works for ' || manager.last_name FROM employees worker, employees manager WHERE worker.manager_id = manager.employee_id ; Oracle Database 10g: SQL Fundamentals I C-21 C-21 Copyright © 2004, Oracle. All rights reserved. Summary In this appendix, you should have learned how to use joins to display data from multiple tables by using Oracle-proprietary syntax for versions 8i and earlier. Summary There are multiple ways to join tables. Types of Joins • Cartesian products • Equijoins • Non-equijoins • Outer joins • Self-joins Cartesian Products A Cartesian product results in a display of all combinations of rows. This is done by omitting the WHERE clause. Table Aliases • Table aliases speed up database access. • Table aliases can help to keep SQL code smaller by conserving memory. Oracle Database 10g: SQL Fundamentals I C-22 C-22 Copyright © 2004, Oracle. All rights reserved. Practice C: Overview This practice covers writing queries to join tables using Oracle syntax. Practice C: Overview This practice is designed to give you a variety of exercises that join tables using the Oracle syntax that we covered in this appendix. Oracle Database 10g: SQL Fundamentals I C-23 Practice C 1. Write a query for the HR department to produce the addresses of all the departments. Use the LOCATIONS and COUNTRIES tables. Show the location ID, street address, city, state or province, and country in the output. 2. The HR department needs a report of all employees. Write a query to display the last name, department number, and department name for all employees. … Oracle Database 10g: SQL Fundamentals I C-24 Practice C (continued) 3. The HR department needs a report of employees in Toronto. Display the last name, job, department number, and department name for all employees who work in Toronto. 4. Create a report to display the employee last name and employee number along with the employee’s manager’s last name and manager number. Label the columns Employee, Emp#, Manager, and Mgr#, respectively. Place your SQL statement in a text file named lab_c_04.sql. Oracle Database 10g: SQL Fundamentals I C-25 Practice C (continued) 5. Modify lab_c_04.sql to display all employees including King, who has no manager. Order the results by the employee number. Place your SQL statement in a text file named lab_c_05.sql. Run the query in lab_c_05.sql. 6. Create a report for the HR department that displays employee last names, department numbers, and all the employees who work in the same department as a given employee. Give each column an appropriate label. Save the script to a file named lab_c_06.sql. Oracle Database 10g: SQL Fundamentals I C-26 Practice C (continued) 7. The HR department needs a report on job grades and salaries. To familiarize yourself with the JOB_GRADES table, first show the structure of the JOB_GRADES table. Second, create a query that displays the last name, job, department name, salary, and grade for all employees. If you want an extra challenge, complete the following exercises: 8. The HR department wants to determine the names of all employees hired after Davies. Create a query to display the name and hire date of any employee hired after employee Davies. Oracle Database 10g: SQL Fundamentals I C-27 Practice C (continued) 9. The HR department needs to find the name and hire date for all employees who were hired before their managers, along with their manager’s name and hire date. Label the columns Employee, Emp Hired, Manager, and Mgr Hired, respectively. Save the script to a file named lab_c_09.sql. Copyright © 2004, Oracle. All rights reserved. Using SQL*Plus Oracle Database 10g: SQL Fundamentals I D-2 D-2 Copyright © 2004, Oracle. All rights reserved. Objectives After completing this appendix, you should be able to do the following: • Log in to SQL*Plus • Edit SQL commands • Format output using SQL*Plus commands • Interact with script files Objectives You might want to create SELECT statements that can be used again and again. This appendix also covers the use of SQL*Plus commands to execute SQL statements. You learn how to format output using SQL*Plus commands, edit SQL commands, and save scripts in SQL*Plus. Oracle Database 10g: SQL Fundamentals I D-3 D-3 Copyright © 2004, Oracle. All rights reserved. SQL and SQL*Plus Interaction Buffer Server SQL statements Query results SQL scripts Oracle Database 10g: SQL Fundamentals I D-4 D-4 Copyright © 2004, Oracle. All rights reserved. SQL Statements Versus SQL*Plus Commands SQL statements SQL • A language • ANSI-standard • Keywords cannot be abbreviated • Statements manipulate data and table definitions in the database SQL*Plus • An environment • Oracle-proprietary • Keywords can be abbreviated • Commands do not allow manipulation of values in the database SQL buffer SQL*Plus commands SQL*Plus buffer SQL and SQL*Plus (continued) The following table compares SQL and SQL*Plus: SQL SQL*Plus Is a language for communicating with the Oracle server to access data Recognizes SQL statements and sends them to the server Is based on American National Standards Institute (ANSI)–standard SQL Is the Oracle-proprietary interface for executing SQL statements Manipulates data and table definitions in the database Does not allow manipulation of values in the database Is entered into the SQL buffer on one or more lines Is entered one line at a time, not stored in the SQL buffer Does not have a continuation character Uses a dash (–) as a continuation character if the command is longer than one line Cannot be abbreviated Can be abbreviated Uses a termination character to execute commands immediately Does not require termination characters; executes commands immediately Uses functions to perform some formatting Uses commands to format data Oracle Database 10g: SQL Fundamentals I D-5 D-5 Copyright © 2004, Oracle. All rights reserved. Overview of SQL*Plus • Log in to SQL*Plus. • Describe the table structure. • Edit your SQL statement. • Execute SQL from SQL*Plus. • Save SQL statements to files and append SQL statements to files. • Execute saved files. • Load commands from file to buffer to edit. SQL*Plus SQL*Plus is an environment in which you can do the following: • Execute SQL statements to retrieve, modify, add, and remove data from the database • Format, perform calculations on, store, and print query results in the form of reports • Create script files to store SQL statements for repeated use in the future SQL*Plus commands can be divided into the following main categories: Category Purpose Environment Affect the general behavior of SQL statements for the session Format Format query results File manipulation Save, load, and run script files Execution Send SQL statements from the SQL buffer to the Oracle server Edit Modify SQL statements in the buffer Interaction Create and pass variables to SQL statements, print variable values, and print messages to the screen Miscellaneous Connect to the database, manipulate the SQL*Plus environment, and display column definitions Oracle Database 10g: SQL Fundamentals I D-6 D-6 Copyright © 2004, Oracle. All rights reserved. sqlplus [username[/password [@database]]] Logging In to SQL*Plus • From a Windows environment: • From a command line: Logging In to SQL*Plus How you invoke SQL*Plus depends on which type of operating system or Windows environment you are running. To log in from a Windows environment: 1. Select Start > Programs > Oracle > Application Development > SQL*Plus. 2. Enter the username, password, and database name. To log in from a command-line environment: 1. Log on to your machine. 2. Enter the SQL*Plus command shown in the slide. In the syntax: username Your database username password Your database password (Your password is visible if you enter it here.) @database The database connect string Note: To ensure the integrity of your password, do not enter it at the operating system prompt. Instead, enter only your username. Enter your password at the password prompt. After you log in to SQL*Plus, you see the following message (if you are using SQL*Plus version 9i): SQL*Plus: Release 9.0.1.0.0 - Development on Tue Jan 9 08:44:28 2001 (c) Copyright 2000 Oracle Corporation. All rights reserved. Oracle Database 10g: SQL Fundamentals I D-7 D-7 Copyright © 2004, Oracle. All rights reserved. Displaying Table Structure Use the SQL*Plus DESCRIBE command to display the structure of a table: DESC[RIBE] tablename Displaying Table Structure In SQL*Plus, you can display the structure of a table using the DESCRIBE command. The result of the command is a display of column names and data types as well as an indication if a column must contain data. In the syntax: tablename The name of any existing table, view, or synonym that is accessible to the user To describe the JOB_GRADES table, use this command: SQL> DESCRIBE job_grades Name Null? Type ---------------------------------- -------- ----------- GRADE_LEVEL VARCHAR2(3) LOWEST_SAL NUMBER HIGHEST_SAL NUMBER Oracle Database 10g: SQL Fundamentals I D-8 D-8 Copyright © 2004, Oracle. All rights reserved. Name Null? Type ----------------------- -------- ------------ DEPARTMENT_ID NOT NULL NUMBER(4) DEPARTMENT_NAME NOT NULL VARCHAR2(30) MANAGER_ID NUMBER(6) LOCATION_ID NUMBER(4) Displaying Table Structure SQL> DESCRIBE departments Displaying Table Structure (continued) The example in the slide displays the information about the structure of the DEPARTMENTS table. In the result: Null? Specifies whether a column must contain data (NOT NULL indicates that a column must contain data.) Type Displays the data type for a column The following table describes the data types: Data Type Description NUMBER(p,s) Number value that has a maximum number of digits p, which is the number of digits to the right of the decimal point s VARCHAR2(s) Variable-length character value of maximum size s DATE Date and time value between January 1, 4712 B.C., and December 31, 9999 A.D. CHAR(s) Fixed-length character value of size s Oracle Database 10g: SQL Fundamentals I D-9 D-9 Copyright © 2004, Oracle. All rights reserved. SQL*Plus Editing Commands • A[PPEND] text • C[HANGE] / old / new • C[HANGE] / text / • CL[EAR] BUFF[ER] • DEL • DEL n • DEL m n SQL*Plus Editing Commands SQL*Plus commands are entered one line at a time and are not stored in the SQL buffer. Guidelines • If you press [Enter] before completing a command, SQL*Plus prompts you with a line number. • You terminate the SQL buffer either by entering one of the terminator characters (semicolon or slash) or by pressing [Enter] twice. The SQL prompt then appears. Command Description A[PPEND] text Adds text to the end of the current line C[HANGE] / old / new Changes old text to new in the current line C[HANGE] / text / Deletes text from the current line CL[EAR] BUFF[ER] Deletes all lines from the SQL buffer DEL Deletes current line DEL n Deletes line n DEL m n Deletes lines m to n inclusive Oracle Database 10g: SQL Fundamentals I D-10 D-10 Copyright © 2004, Oracle. All rights reserved. SQL*Plus Editing Commands • I[NPUT] • I[NPUT] text • L[IST] • L[IST] n • L[IST] m n • R[UN] • n • n text • 0 text SQL*Plus Editing Commands (continued) Note: You can enter only one SQL*Plus command for each SQL prompt. SQL*Plus commands are not stored in the buffer. To continue a SQL*Plus command on the next line, end the first line with a hyphen (-). Command Description I[NPUT] Inserts an indefinite number of lines I[NPUT] text Inserts a line consisting of text L[IST] Lists all lines in the SQL buffer L[IST] n Lists one line (specified by n) L[IST] m n Lists a range of lines (m to n) inclusive R[UN] Displays and runs the current SQL statement in the buffer n Specifies the line to make the current line n text Replaces line n with text 0 text Inserts a line before line 1 Oracle Database 10g: SQL Fundamentals I D-11 D-11 Copyright © 2004, Oracle. All rights reserved. SQL> 1 SQL> L SQL> LIST 1 SELECT last_name 2* FROM employees 1* SELECT last_name SQL> A , job_id 1* SELECT last_name, job_id 1 SELECT last_name, job_id 2* FROM employees Using LIST, n, and APPEND Using LIST, n, and APPEND • Use the L[IST] command to display the contents of the SQL buffer. The asterisk (*) beside line 2 in the buffer indicates that line 2 is the current line. Any edits that you made apply to the current line. • Change the number of the current line by entering the number (n) of the line that you want to edit. The new current line is displayed. • Use the A[PPEND] command to add text to the current line. The newly edited line is displayed. Verify the new contents of the buffer by using the LIST command. Note: Many SQL*Plus commands, including LIST and APPEND, can be abbreviated to just their first letter. LIST can be abbreviated to L; APPEND can be abbreviated to A. Oracle Database 10g: SQL Fundamentals I D-12 D-12 Copyright © 2004, Oracle. All rights reserved. Using the CHANGE Command SQL> L 1* SELECT * from employees SQL> c/employees/departments 1* SELECT * from departments SQL> L 1* SELECT * from departments Using the CHANGE Command • Use L[IST] to display the contents of the buffer. • Use the C[HANGE] command to alter the contents of the current line in the SQL buffer. In this case, replace the employees table with the departments table. The new current line is displayed. • Use the L[IST] command to verify the new contents of the buffer. Oracle Database 10g: SQL Fundamentals I D-13 D-13 Copyright © 2004, Oracle. All rights reserved. SQL*Plus File Commands • SAVE filename • GET filename • START filename • @ filename • EDIT filename • SPOOL filename • EXIT SQL*Plus File Commands SQL statements communicate with the Oracle server. SQL*Plus commands control the environment, format query results, and manage files. You can use the commands described in the following table: Command Description SAV[E] filename [.ext] [REP[LACE]APP[END]] Saves current contents of SQL buffer to a file. Use APPEND to add to an existing file; use REPLACE to overwrite an existing file. The default extension is .sql. GET filename [.ext] Writes the contents of a previously saved file to the SQL buffer. The default extension for the file name is .sql. STA[RT] filename [.ext] Runs a previously saved command file @ filename Runs a previously saved command file (same as START) ED[IT] Invokes the editor and saves the buffer contents to a file named afiedt.buf ED[IT] [filename[.ext]] Invokes the editor to edit the contents of a saved file SPO[OL] filename[.ext]| OFF|OUT] Stores query results in a file. OFF closes the spool file. OUT closes the spool file and sends the file results to the printer. EXIT Quits SQL*Plus Oracle Database 10g: SQL Fundamentals I D-14 D-14 Copyright © 2004, Oracle. All rights reserved. Created file my_query SQL> START my_query SQL> L 1 SELECT last_name, manager_id, department_id 2* FROM employees SQL> SAVE my_query Using the SAVE and START Commands LAST_NAME MANAGER_ID DEPARTMENT_ID ------------------------- ---------- ------------- King 90 Kochhar 100 90 ... 20 rows selected. SAVE Use the SAVE command to store the current contents of the buffer in a file. In this way, you can store frequently used scripts for use in the future. START Use the START command to run a script in SQL*Plus. EDIT Use the EDIT command to edit an existing script. This opens an editor with the script file in it. When you have made the changes, quit the editor to return to the SQL*Plus command line. Oracle Database 10g: SQL Fundamentals I D-15 D-15 Copyright © 2004, Oracle. All rights reserved. Summary • Execute SQL statements • Edit SQL statements • Format output • Interact with script files In this appendix, you should have learned how to use SQL*Plus as an environment to do the following: Summary SQL*Plus is an execution environment that you can use to send SQL commands to the database server and to edit and save SQL commands. You can execute commands from the SQL prompt or from a script file. Table Descriptions and Data Additional Practices Oracle Database 10g: SQL Fundamentals I AP Tables-2 COUNTRIES Table DESCRIBE countries SELECT * FROM countries; Oracle Database 10g: SQL Fundamentals I AP Tables-3 DEPARTMENTS Table DESCRIBE departments SELECT * FROM departments; Oracle Database 10g: SQL Fundamentals I AP Tables-4 EMPLOYEES Table DESCRIBE employees SELECT * FROM employees; Oracle Database 10g: SQL Fundamentals I AP Tables-5 EMPLOYEES Table (continued) Oracle Database 10g: SQL Fundamentals I AP Tables-6 JOBS Table DESCRIBE jobs SELECT * FROM jobs; Oracle Database 10g: SQL Fundamentals I AP Tables-7 JOB_GRADES Table DESCRIBE job_grades SELECT * FROM job_grades; Oracle Database 10g: SQL Fundamentals I AP Tables-8 JOB_HISTORY Table DESCRIBE job_history SELECT * FROM job_history; Oracle Database 10g: SQL Fundamentals I AP Tables-9 LOCATIONS Table DESCRIBE locations SELECT * FROM locations; Oracle Database 10g: SQL Fundamentals I AP Tables-10 REGIONS Table DESCRIBE regions SELECT * FROM regions; Note: A bolded number or letter refers to an entire lesson or appendix. A Adding Data Through a View 10-15 ADD_MONTHS Function 03-22, 03-23, 03-46, 03-60 Advanced Features of the SELECT Statement 06-02 Alias 01-04, 01-08, 01-14-17, 01-36, 02-04, 02-07, 02-20, 02-21, 02-31 03-46, 04-12, 04-25, 05-08, 05-11, 05-12, 05-20, 05-29, 07-17, 07-21, 09-33, 10-07, 10-09, 10-11, C-11, C-12, C-15, C-20, C-21 ALL Operator 06-16, 07-11, 07-12, 07-18, 07-23 ALL_COL_COMMENTS Dictionary View 11-19 ALL_OBJECTS Dictionary View 11-05, 11-7 ALL_TAB_COMMENTS Dictionary View 11-19 ALTER SEQUENCE Statement 10-29, 10-30 ALTER TABLE Statement 09-34 American National Standards Institute (ANSI) I-11, 1-12, I-25, I-28, I-30, 1-22, 03-26, 03-54, 05-04, 08-27, D-04 Ampersand Substitution 2-27 Double-ampersand (&&) 02-28 ANY Operator 06-15 Arguments (Functions) 03-03, 03-05, 03-15, 03-50 Arithmetic Expressions 01-09, 01-13, 01-16, 02-04 Arithmetic Operators 01-09, 01-10, 03-20, 03-21, 03-60 AS Subquery 09-32, 10-07 Index Oracle Database 10g: SQL Fundamentals I Index-2 A Attributes I-19, I-20, I-23, 11-14 AUTOCOMMIT Command 08-29 AVG Function 04-04, 04-06, 04-07, 04-10, 04-13, 04-14, 04-18, 04-21, 04-23, 04-24, 06-11, 10-12 B BETWEEN Range Condition 02-09 C Caching Sequences 10-28 Calculations 01-09, 01-14, 01-23, 01-37, 03-03, 03-14, 03-20, 03-25, 03-60, 03-61, D-05 Cardinality I-20 Cartesian Product 05-02, 05-26, 05-27, 05-28, 05-29, C-04, C-05, C-21 CASE Expression 03-54, 03-55, 03-56, 03-57, 03-60 Case-manipulation Functions 3-07 CAT View 11-08 Character strings 01-16, 01-17, 01-18, 02-06, 02-15, 03-09, 03-11, 03-35, 03-38 Character-manipulation Functions 03-07, 03-11, 03-12 CHECK Constraint 08-07, 09-28, 10-20, 11-12, 11-13 COALESCE Function 03-06, 03-47, 03-52, 03-53, 03-60, 04-05 Column Alias 01-04, 01-08, 01-14-17, 01-36, 02-04, 02-07, 02-20, 02-21, 02-31, 03-46, 04-12, 04-25, 05-08, 05-11, 07-17, 07-21, 09-33, 10-07, 10-09, 10-11, C-11, COMMENT Statement 11-19 COMMENTS Column 11-06, 11-19 Index Oracle Database 10g: SQL Fundamentals I Index-3 C COMMIT Statement 08-02, 08-24, 08-25, 08-26, 08-27, 08-29, 08-31, 08-32, 08-33, 08-35, 08-36, 08-37, 08-38, 08-39, 09-08, 09-35, 10-28, 10-35 Composite Unique Key 09-22, 09-23 CONCAT Function 01-16, 01-18, 03-07, 03-08, 03-11, 03-12, 03-38, 03-46, 03-60, 03-61, C-07 Concatenation Operator 01-16 Conditional Processing 03-54 CONSTRAINT_TYPE 09-19, 11-13 CONSTRAINTS 9, 01-12, 08-07, 08-17, 08-21, 10-16, 10-36, 11-11, 11-12, 11-13, 11-14, 11-20 CHECK Constraint 08-07, 09-28, 10-20, 11-12, 11-13 Defining 09-19, 09-20 NOT NULL Constraint 01-26, 09-19, 09-21, 09-22, 11-10 PRIMARY KEY Constraint 09-20, 09-24 Read-only Constraint 10-18 REFERENCES 01-25, 01-32, 01-34, 01-35, 09-25, 09-26, 09-27, 09-28, 09-29, 11-13 Referential Integrity Constraint 08-21, 09-25 UNIQUE Constraint 09-22, 09-23 UNIQUE Key Integrity Constraint 09-22 Conversion Functions 03-02, 03-04, 03-06, 03-09, 03-26, 03-27, 03-28, 03-29, 03-30, 03-31, 03-48, 03-50, 03-60, 07-19, 08-06 COUNT Function 04-08 CREATE INDEX Statement 10-34 CREATE PUBLIC SYNONYM Statement 10-39 Create Script Files 01-23, D-05 CREATE SEQUENCE Statement 10-23 CREATE SYNONYM Statement 10-37, 10-38, 10-39 CREATE TABLE Statement 09-05, 09-32, 09-36, 09-37 Index Oracle Database 10g: SQL Fundamentals I Index-4 C Cross Joins 05-04, 05-05, 05-28, 05-29, C-06 CURRVAL 09-07, 09-28, 10-25, 10-27 CYCLE Option (with Sequences) 10-24, 10-29 D Data Control Language (DCL) Statements 09-05 Data Definition Language (DDL) Statements 09-02, 09-05 Data from More Than One Table 05-02, 05-03, 05-05, 05-30, C-02, C-03, C-07 Data manipulation Language (DML) Statements 8 09-02, 10-06, 10-07, 10-13, 10-14, 10-15, 10-16, 10-17, 10-18, 10-35, I-28 Data Structures 09-03 Data Types 01-09, 01-26, 01-27, 03-03, 03-25, 03-26, 03-48, 03-50, 03-60, 03-61, 04-05, 04-07, 05-06, 05-08, 08-07, 08-11, 09-02, 09-09, 09-11, 09-12, 09-14, 09-36, 11-10, 11-11, D-07, D-08 Data Warehouse Applications I-09 Database 01-02, 01-03, 01-21, 01-22, 01-23, 01-34, 01-36, 02-02, 02-06, 03-10, 03-17, 03-19, 03-20, 03-26, 04-13, 04-16, 05-29, 06-07, 08-03, 08-11, 08-13, 08-18, 08-24, 08-25, 08-31, 08-32, 08-37, 08-38, 08-39, 09-02, 09-03, 09-04, 09-05, 09-06, 09-18, 09-33, 09-34, 09-35, 09-36, 09-37, 10-03, 10-05, 10-15, 10-16, 10-19, 10-21, 10-22, 10-24, 10-29, 10-31, 10-32, 10-34, 10-37, 10-38, 10-39, 10-40, 10-41, 11-03, 11-04, 11-05, 11-07, 11-09, 11-10, 11-12, 11-17, 11-18, 11-19, C-06, C-07, C-09, C-21, D-03, D-04, D-05, D-06, D-15, I-02, I-03, I-04, I-05, I-06, I-06, I-08, I-09, I-10, I-11, I-13, I-14, I-15, I-16, I-23 Database Structures 09-05, 09-08 Index Oracle Database 10g: SQL Fundamentals I Index-5 D Date 01-08, 01-09, 01-17, 01-28, 02-06, 02-07, 02-10, 02-11, 02-20, 02-21, 02-23, 02-26, 03-02, 03-03, 03-04, 03-06, 03-14, 03-15, 03-17, 03-19, 03-20, 03-21, 03-22, 03-23, 03-24, 03-25, 03-27, 03-29, 03-29, 03-30, 03-31, 03-32, 03-33, 03-35, 03-37, 03-41, 03-42, 03-43, 03-44, 03-46, 03-48, 03-60, 03-61, 04-05, 04-07, 04-24, 07-04, 07-19, 08-02, 08-03, 08-06, 08-08, 08-09, 08-09, 08-12, 08-13, 08-14, 08-15, 08-16, 08-22, 08-23, 08-27, 08-28, 08-32, 08-33, 08-37, 08-38, 08-39, 08-40, 09-07, 09-08, 09-11, 09-12, 09-14, 09-17, 09-23, 09-26, 09-27, 09-28, 09-29, 09-30, 09-33, 10-06, 10-07, 10-16, 10-35, 11-04, 11-07, 11-08, 11-15 DATE Data Type 03-06, 03-22, 03-25, 03-61, 04-07, 09-12 Default Date Display 02-06, 03-17 Datetime Data Type 09-11, 09-12, 09-14 DBA_OBJECTS Dictionary View 11-05 DBMS I-02, I-13, I-14, I-21, I-23, I-26, I-27 DCL Statement 08-24, 08-25, 08-29 DDL Statement 08-21, 08-24, 08-25, 08-29, 08-36, 09-01, 09-02, 09-05, 09-08, 09-35, 11-07, I-28 DECODE Function 03-06, 03-54, 03-56, 03-57, 03-58, 03-59, 03-60, 11-04 Default Date Display 02-06, 03-17 DEFAULT Option 09-07, 10-23, 10-24 Default Sort Order 02-21, 04-16 Index Oracle Database 10g: SQL Fundamentals I Index-6 D DELETE Statement 08-18, 08-19, 08-20, 08-21, 08-37, 08-39 DESC Keyword 02-21 DESCRIBE Command 01-26, 08-07, 09-08, 09-33, 10-08, 10-12, 11-11, D-07 Dictionary Views 11, 09-05, 09-18, 10-04, 10-36 ALL_COL_COMMENTS 11-19 ALL_OBJECTS 11-05, 11-7 ALL_TAB_COMMENTS 11-19 CAT 11-08 DBA_OBJECTS 11-05 USER_COL_COMMENTS Dictionary View 11-19 USER_CONS_COLUMNS Dictionary View 11-12, 11-14, 11-20 USER_CONSTRAINTS Dictionary View 11-12, 11-13, 11-14, 11-20 USER_OBJECTS Dictionary View 11-03, 11-05, 11-06, 11-07, 11-08, 11-17, 11-20 USER_SEQUENCES Dictionary View 11-16, 11-17, 11-20 USER_SYNONYMS Dictionary View 11-18 USER_TAB_COLUMNS Dictionary View 11-03, 11-10, 11-11, 11-20 USER_TAB_COMMENTS Dictionary View 11-19 USER_TABLES Dictionary View 11-09, 11-10 USER_VIEWS Dictionary View 11-15, 11-20 DISTINCT Keyword 01-20, 04-09, 07-11, 10-13, 10-14, 10-15 DML Operations on Data Through a View 10-13 DROP ANY INDEX Privilege 10-36 DROP ANY VIEW Privilege 10-19 Index Oracle Database 10g: SQL Fundamentals I Index-7 D DROP INDEX Statement 10-36 DROP SYNONYM Statement 10-39 DROP TABLE Statement 09-35, 09-36 DROP VIEW Statement 10-19 DUAL Table 03-14, 03-19 Duplicate Rows 01-20, 04-08, 07-08, 07-11, 07-12, 07-18, 07-23 E Embedding a Subquery Within the CREATE VIEW Statement 10-07 Entity Relationship I-17, I-19, I-20 Equijoins 05-09, 05-19, 05-20, 05-29, C-08, C-09, C-14, C-15, C-21 ESCAPE Ooption 02-12 Execute Button (iSQL*Plus) 01-07, 01-25, 01-33 Execute SQL 01-02, 01-23, 01-36, D-02, D-05, D-15 Explicit Data Type Conversion 03-26, 03-29, 03-30, 03-31 F Foreign Key 05-09, 08-07, 09-17, 09-25, 09-26, 09-27, 09-31, 10-33, 11-12, 11-13, C-7, C-8, I-21 Format Model 03-22, 03-24, 03-32, 03-33, 03-35, 03-37, 03-40, 03-41, 03-42 FROM Clause 01-04, 01-09, 02-04, 03-14, 04-13, 04-16, 05-12, 06-04, C-09. C-12, C-20 FULL OUTER Join 05-05, 05-22, 05-25 Index Oracle Database 10g: SQL Fundamentals I Index-8 F Functions 3, 4 02-04, 04-01, 04-03, 04-04, 04-05, 04-06, 04-07, 04-10, 04-11, 04-12, 04-13, 04-17, 04-18, 04-20, 04-23, 04-24, 04-25, 06-10, 06-19, 07-19, 08-08, 09-07, 09-28, 10-06, 10-12, 10-13, 10-14, 10-15, 11-03, 11-08, I-03, I-07, I-10 ADD_MONTHS Function 03-22, 03-23, 03-46, 03-60 AVG Function 04-04, 04-06, 04-07, 04-10, 04-13, 04-14, 04-18, 04-21, 04-23, 04-24, 06-11, 10-12 Case-manipulation Functions 03-07 Character-manipulation Functions 03-07, 03-11, 03-12 COALESCE Function 03-06, 03-47, 03-52, 03-53, 03-60, 04-05 CONCAT Function 01-16, 01-18, 03-07, 03-08, 03-11, 03-12, 03-38, 03-46, 03-60, 03-61, C-07 Conversion Functions 03-02, 03-04, 03-06, 03-09, 03-26, 03-27, 03-28, 03-29, 03-30, 03-31, 03-48, 03-50, 03-60, 07-19, 08-06 COUNT Function 04-08 DECODE Function 03-06, 03-54, 03-56, 03-57, 03-58, 03-59, 03-60, 11-04 Group Functions in a Subquery 06-10 INITCAP Function 03-07, 03-08, 03-09, 03-10, 03-60 INSTR Function 03-07, 03-08, 03-11, 03-12, 03-60 LAST_DAY Function 03-22, 03-23, 03-60 LENGTH Function 03-07, 03-08, 03-11, 03-12, 03-51, 03-60 LOWER Function 03-02, 03-07, 03-08, 03-09, 03-10, 03-10, 03-37, 03-60 LPAD Function 03-07, 03-08, 03-11 MAX Function 04-03, 04-04, 04-06, 04-07, 04-19, 04-21, 04-23, 04-24 MIN Function 04-04, 04-06, 04-07, 04-12, 04-16, 04-24 Index Oracle Database 10g: SQL Fundamentals I Index-9 F MOD Function 03-16 MONTHS_BETWEEN Function 03-06, 03-22, 03-23, 03-60 NEXT_DAY Function 03-22, 03-23, 03-46, 03-60 NULLIF Function 03-06, 03-47, 03-51, 03-60 NVL Function 03-06, 03-47, 03-48, 03-49, 03-50, 03-52, 03-60, 04-05, 04-10 NVL2 Function 03-06, 03-47, 03-50, 03-60, 04-05 ROUND Function 03-13, 03-14, 03-15, 03-22, 03-24, 03-40, 03-60, 11-16 ROUND and TRUNC Functions 03-24 STDDEV Function 04-04, 04-07, 04-24 SUBSTR Function 03-07, 03-08, 03-11, 03-12, 03-46, 03-60 SUM Function 04-02, 04-04, 04-06, 04-07, 04-12, 04-16, 04-22, 04-24 SYSDATE Function 03-19, 03-21, 03-23, 03-24, 03-60, 08-08, 08-08, 09-07, 09-28 TO_CHAR Function 03-32, 03-37, 03-38, 03-40 TO_NUMBER or TO_DATE Functions 03-41 TRIM Function 03-07, 03-08, 03-11 TRUNC Function 03-13, 03-15, 03-22, 03-24, 03-59, 03-60, 08-21 UPPER Function 03-02, 03-07, 03-08, 03-09, 03-10, 03-46, 03-60 Function Arguments 03-03, 03-05, 03-15, 03-50 fx Modifier 03-41, 03-42 Index Oracle Database 10g: SQL Fundamentals I Index-10 G Generate Unique Numbers 10-03, 10-22 GROUP BY Clause 04-02, 04-11, 04-12, 04-13, 04-14, 04-16, 04-17, 04-20, 04-21, 04-24, 06-12, 10-13, 10-14, 10-15 GROUP BY Column 04-14, 04-16 Group Functions in a Subquery 06-10 Group Functions 03-04, 04-01, 04-02, 04-03, 04-04, 04-05, 04-06, 04-07, 04-10, 04-11, 04-12, 04-13, 04-17, 04-18, 04-20, 04-23, 04-24, 04-25, 06-10, 06-19, 10-12, 10-13, 10-14, 10-15 Nested Group Functions 04-23 Null Values 04-05, 04-10 H Hash Signs 03-40 HAVING Clause 04-02, 04-18, 04-19, 04-20, 04-21, 04-22, 04-24, 04-25, 06-04, 06-11, 06-19 I IF-THEN-ELSE Logic 03-54, 03-55, 03-57, 03-60 Implicit Data Type Conversion 03-26, 03-27, 03-28 IN Condition 02-07, 02-10, 05-02, 05-04, 05-13, 05-18, 05-19, 05-21, 05-22, 05-26, 05-27, 10-35, C-02, C-04, C-05, C-06, C-07, C-13, C-14, C-16, C-17 Index 10 , 11-03, 11-07, 11-08 Types of Indexes 10-33 When to Create an Index 10-35 iSQL*Plus 01-02, 01-07, 01-08, 01-14, 01-20, 01-21, 01-22, 01-23, 01-24, 01-25, 01-26, 01-28, 01-30, 01-32, 01-33, 01-34, 01-35, 01-36, 01-37, 02-02, 02-22, 02-23, 02-24, 02-25, 02-26, 02-28, 02-29, 02-30, 02-31, 03-32, 07-21, 08-07, 08-25, 08-29, 09-33, 10-08, 10-12, 11-11, 11-15, I-02 Execute Button (iSQL*Plus) 01-07, 01-25, 01-33 Features of iSQL*Plus 01-21 Load Button 01-31, 01-32 Index Oracle Database 10g: SQL Fundamentals I Index-11 I Load Script 01-25, 01-30 SET VERIFY ON 02-30 Single Ampersand (&) Substitution 02-23 INITCAP Function 03-07, 03-08, 03-09, 03-10, 03-60 Inner Query or Inner Select 06-03, 06-04, 06-05, 06-07, 06-09, 06-13, 06-14, 06-17, 06-20 INSERT Statement 08-05, 08-11, 08-22, 08-23, 09-08, 09-19, 10-27 INSTR Function 03-07, 03-08, 03-11, 03-12, 03-60 Integrity Constraint 08-07, 08-21, 09-17, 09-19, 09-22, 09-25, 09-30, 09-31, 09-32, 10-16, 11-03 International Standards Organization (ISO) I-28 INTERSECT Operator 07-03, 07-13, 07-14, 07-23 INTERVAL YEAR TO MONTH 09-14 IS NOT NULL Condition 02-13 IS NULL Condition 02-13 J Java I-04, I-07, I-10, I-27 Joining Tables 6, C Cross Joins 05-04, 05-05, 05-28, 05-29, C-06 Equijoins 05-09, 05-19, 05-20, 05-29, C-08, C-09, C-14, C-15, C-21 FULL OUTER Join 05-05, 05-22, 05-25 LEFT OUTER Join 05-22, 05-23 Three-way Join 05-18 Index Oracle Database 10g: SQL Fundamentals I Index-12 K Keywords 01-04, 01-05, 01-07, 01-14, 01-15, 01-16, 01-20, 01-22, 02-21, 04-09, 05-06, 07-11, 08-07, 09-26, 09-27, 10-13, 10-14, 10-15, I-04 L LAST_DAY Function 03-22, 03-23, 03-60 LEFT OUTER Join 05-22, 05-23 LENGTH Function 03-07, 03-08, 03-11, 03-12, 03-51, 03-60 LIKE Condition 02-11, 02-12 Literal 01-17, 01-18, 01-19, 02-04, 02-11, 02-12, 03-11, 03-35, 03-51, 03-55, 07-20, 09-07 Load Button 01-31, 01-32 Load Script 01-25, 01-30 Logical Condition 02-14 Logical Subsets 10-04 LOWER Function 03-02, 03-07, 03-08, 03-09, 03-10, 03-10, 03-37, 03-60 LPAD Function 03-07, 03-08, 03-11 Index Oracle Database 10g: SQL Fundamentals I Index-13 M MAX Function 04-03, 04-04, 04-06, 04-07, 04-19, 04-21, 04-23, 04-24 MIN Function 04-04, 04-06, 04-07, 04-12, 04-16, 04-24 MINUS Operator 07-15, 07-16, 07-23, 07-24 MOD Function 03-16 Modifier 03-41, 03-42 MONTHS_BETWEEN Function 03-06, 03-22, 03-23, 03-60 Multiple-column Subqueries 06-07 Multiple-row Functions 03-04 Multiple-row Subqueries 06-02, 06-06, 06-07, 06-14, 06-15, 06-16 N Naming 09-04, 09-18, 11-05 NATURAL JOIN Keywords 05-06, C-06 Nested Functions 03-45, 03-61 Nested SELECT 06-04, 06-20 NEXT_DAY Function 03-22, 03-23, 03-46, 03-60 NEXTVAL 09-07, 09-28, 10-25, 10-27 NEXTVAL and CURRVAL Pseudocolumns 10-25 Non-equijoin 05-19, 05-20, 05-29, C-06, C-14, C-15, C-21 Nonunique Index 10-33, 10-41 NOT NULL Constraint 01-26, 09-19, 09-21, 09-22, 11-10 NOT Operator 02-17, 02-31, 06-16 NULL Conditions 02-13, 02-31 Null Value 01-12, 01-13, 01-16, 02-13, 02-21, 03-47, 03-48, 03-49, 03-50, 03-51, 03-57, 04-05, 04-08, 04-09, 04-10, 06-13, 06-17, 07-08, 07-13, 08-07, 09-07, 09-21, 09-24, 10-35 NULLIF Function 03-06, 03-47, 03-51, 03-60 Index Oracle Database 10g: SQL Fundamentals I Index-14 N NUMBER Data Type 03-38, 08-06 Number Functions 03-06, 03-13 NVL Function 03-06, 03-47, 03-48, 03-49, 03-50, 03-52, 03-60, 04-05, 04-10 NVL2 Function 03-06, 03-47, 03-50, 03-60, 04-05 O Object Relational Database Management System I-02, I-09, I-30 Object Relational I-02, I-06, I-09, I-13, I-30 Object-oriented Programming I-09 OLTP I-09 ON clause 05-05, 05-13, 05-14, 05-15, 05-16, 05-17, 05-18, 05-22, 07-12, 10-16 ON DELETE CASCADE 09-27 ON DELETE SET NULL 09-27 Online Transaction Processing I-09 OR REPLACE Option 10-08, 10-11 Oracle Application Server 10g I-05, I-07, I-30 Oracle Database 10g I-03, I-04, I-05, I-06, I-27, I-30 Oracle Enterprise Manager 10g Grid Control I-05, I-08, I-30 Oracle Instance I-27 ORDBMS I-02 Order 02-18, 02-20, 02-21, 02-23, 02-27, 02-28, 02-31, 02-32 ORDER BY Clause 02-20, 02-21, 02-23, 02-31, 02-32, 03-05, 04-14, 04-24, 06-06, 07-17, 07-21, 07-23, C-11 Order of Precedence 01-11, 02-18 Order of Rows 02-20, 07-02, 07-21, I-23 Outer Query 06-03, 06-04, 06-05, 06-09, 06-10, 06-12, 06-13, 06-20 P Placement of the Subquery 06-04, 06-06 PRIMARY KEY Constraint 09-20, 09-24 Projection 01-03 Index Oracle Database 10g: SQL Fundamentals I Index-15 R RDBMS I-02, I-14, I-21, I-23, I-26, I-27 Read Consistency 08-31, 08-37, 08-38 READ ONLY Option 10-17 Read-only Constraint 10-18 REFERENCES 09-25, 09-26, 09-27, 09-28, 09-29, 11-13 Referential Integrity Constraint 08-21, 09-25 Relational Database Management System I-02, I-09, I-14, I-27, I-30 Relational Database I-02, I-03, I-09, I-14, I-15, I-23, I-25, I-27, I-28, I-30 Restrict the Rows 02-02, 02-04, 04-19, C-10 Retrieve Data from a View 10-10 Return a Value 03-03, 03-06, 03-14, 03-22 RIGHT OUTER Join 05-22, 05-24 ROLLBACK Statement 08-02, 08-21, 08-25, 08-26, 08-27, 08-28, 08-29, 08-31, 08-34, 08-35, 08-36, 08-39, 10-28, I-28 ROUND Function 03-13, 03-14, 03-15, 03-22, 03-24, 03-40, 03-60, 11-16 ROUND and TRUNC Functions 03-24 RR Date Format 03-43, 03-44 Rules of Precedence 01-10, 01-11, 02-18, 02-19 Index Oracle Database 10g: SQL Fundamentals I Index-16 S SAVEPOINT Statement 08-02, 08-27, 08-28, 08-32, 08-36, 08-39, I-28 Schema 09-02, 09-05, 09-06, 09-19, 09-36, 10-01, 10-32, 10-38, 11-02, 11-03, 11-04, 11-07, 11-21 SELECT Statement 01-04, 01-06, 01-16, 01-20, 03-14, 04-12, 04-13, 04-14, 04-16, 07-08, 07-15, 07-18, C-09, C-11 SELECT Statement - Advanced Features 06-02 Selection 01-03, 02-03 Sequences 10 Caching Sequences 10-28 CURRVAL 09-07, 09-28, 10-25, 10-27 CYCLE Option 10-24, 10-29 Generate Unique Numbers 10-03, 10-22 NEXTVAL 09-07, 09-28, 10-25, 10-27 NEXTVAL and CURRVAL Pseudocolumns 10-25 Set operators 7 SET VERIFY ON 02-30 Sets of Rows 04-03 SGA I-27 Single Ampersand (&) Substitution 02-23 Single-row Functions 03-04, 03-05, 03-06, 03-45, 03-60, 04-03 Single-row Operator 06-04, 06-06, 06-08, 06-12, 06-14, 06-19 Single-row Subqueries 06-02, 06-06, 06-07, 06-08, 06-09 SOME Operator 06-15 Sorted 07-08, 07-11, 07-18, 07-21, 07-23 Sorting 2 Default Sort Order 02-21, 04-16 DESC Keyword 02-21 SQL: 1999 Compliant 05-04, 05-18, 05-30, C-06 Standards (American National Standards Institute) I-11, 1-12, I-25, I-28, I-30, 1-22, 03-26, 03-54, 05-04, 08-27, D-04 Index Oracle Database 10g: SQL Fundamentals I Index-17 S Statement-level Rollback 08-36 STDDEV Function 04-04, 04-07, 04-24 Structured Query Language 01-02, I-25, I-26 Sub-SELECT 06-04 Subqueries in UPDATE statements 08-16 Subqueries to Delete Rows 08-20 Index Oracle Database 10g: SQL Fundamentals I Index-18 S Subquery 6 AS Keyword 09-32, 10-07 Embedding a Subquery Within the CREATE VIEW Statement 10-07 Group Functions in a Subquery 06-10 Inner Query or Inner Select 06-03, 06-04, 06-05, 06-07, 06-09, 06-13, 06-14, 06-17, 06-20 Nested SELECT 06-04, 06-20 Outer Query 06-03, 06-04, 06-05, 06-09, 06-10, 06-12, 06-13, 06-20 Placement of the Subquery 06-04, 06-06 Single-row Subqueries 06-02, 06-06, 06-07, 06-08, 06-09 Sub-SELECT 06-04 Subqueries in UPDATE statements 08-16 Subqueries to Delete Rows 08-20 Substitution Variables 02-22, 02-23, 02-26, 02-27, 02-30, 02-31, 02-32, 08-10 SUBSTR Function 03-07, 03-08, 03-11, 03-12, 03-46, 03-60 SUM Function 04-02, 04-04, 04-06, 04-07, 04-12, 04-16, 04-22, 04-24 Summary Results for Groups 04-16 Synonym 06-15, 09-03, 09-06, 09-35, 10-02, 10-03, 10-37, 10-38, 10-39, 10-40, 10-41, 11-03, 11-08, 11-18, 11-20, 11-21 SYSDATE Function 03-19, 03-21, 03-23, 03-24, 03-60, 08-08, 08-08, 09-07, 09-28 System Development Life Cycle I-11, I-12, I-17 System Failure 08-24, 08-29 System Global Area I-27 Oracle Database 10g: SQL Fundamentals I Index-19 T Table Alias 05-12, 05-20, 05-29, C-12, C-15, C-20, C-21 Table Prefixes 05-11, 05-12, C-12 Three-way Join 05-18 TO_CHAR Function 03-32, 03-37, 03-38, 03-40 TO_NUMBER or TO_DATE Functions 03-41 Transactions 08-02, 08-24, 08-25, 08-27, 08-36, 08-40, 09-35 TRIM Function 03-07, 03-08, 03-11 TRUNC Function 03-13, 03-15, 03-22, 03-24, 03-59, 03-60, 08-21 Tuple I-23 Types of Indexes 10-33 Index Oracle Database 10g: SQL Fundamentals I Index-20 U UNION ALL Operator 07-11, 07-12, 07-18, 07-23 UNION Clause 07-12 UNION Operator 07-08, 07-09, 07-19, 07-20, 07-21, 07-23, 07-24 UNIQUE Constraint 09-22, 09-23 Unique Identifier I-19, I-20 Unique Index 09-23, 09-24, 10-33, 10-35, 10-41 UNIQUE Key Integrity Constraint 09-22 UPDATE Statement 08-13, 08-14, 08-15 08-16 UPPER Function 03-02, 03-07, 03-08, 03-09, 03-10, 03-46, 03-60 USER_COL_COMMENTS Dictionary View 11-19 USER_CONS_COLUMNS Dictionary View 11-12, 11-14, 11-20 USER_CONSTRAINTS Dictionary View 11-12, 11-13, 11-14, 11-20 USER_OBJECTS Dictionary View 11-03, 11-05, 11-06, 11-07, 11-08, 11-17, 11-20 USER_SEQUENCES Dictionary View 11-16, 11-17, 11-20 USER_SYNONYMS Dictionary View 11-18 USER_TAB_COLUMNS Dictionary View 11-03, 11-10, 11-11, 11-20 USER_TAB_COMMENTS Dictionary View 11-19 USER_TABLES Dictionary View 11-09, 11-10 USER_VIEWS Dictionary View 11-15, 11-20 USING Clause 05-04, 05-08, 05-09, 05-10, 05-11, C-06 Index Oracle Database 10g: SQL Fundamentals I Index-21 V VALUES Clause 08-05, 08-07, 08-11, 08-22 VARIANCE 04-04, 04-07, 04-24 VERIFY Command 02-30 Views 10 Adding Data Through a View 10-15 DML Operations on Data Through a View 10-13 Guidelines for Creating a View 10-08 Views: Simple and Complex 10-06 W WHERE Clause 02-03, 02-04, 02-05, 02-06, 02-07, 02-08, 02-10, 02-14, 02-22, 02-23, 02-26, 02-27, 02-31, 02-32, Wildcard Search 02-11 WITH CHECK OPTION 10-07, 10-08, 10-16, 11-13 X XML I-04, I-06, I-27 Index Oracle Database 10g: SQL Fundamentals I Index-22","libVersion":"0.2.3","langs":""}