{"path":"Subjects/COS3751 - Techniques of Artificial Intelligence/Student Notes/COS3751 Python Solvers.pdf","text":"COS3751 Artificial Intelligence Python Solvers 1 Table of Contents About....................................................................................................................................................3 Prerequisites.........................................................................................................................................4 Search Algorithm..................................................................................................................................5 Breadth First Search.........................................................................................................................5 Depth First Search...........................................................................................................................6 Uniform Cost Search.......................................................................................................................7 Astar.................................................................................................................................................8 Adversarial Search................................................................................................................................9 Alpha Beta Pruning Example 1.......................................................................................................9 Entropy and Gain Solver....................................................................................................................13 1. Convert the table to a csv......................................................................................................13 2. Feed the program the csv path..............................................................................................14 3. Run the program....................................................................................................................14 Entropy and Gain Solver Table...........................................................................................................16 1. Convert the table to a csv......................................................................................................17 2. Feed the program the csv path..............................................................................................17 3. Feed the program the entropy table.......................................................................................18 3. Run the program....................................................................................................................19 2 About The code in this document is based on Peter Norvig’s AIMA code, and has been adapted for COS3751 – Artificial Intelligence. It is meant for learning purposes. The solvers included here are: Search Algorithms: - Breadth First Search - Depth First Search - Uniform Cost Search - Astar Adversarial Search - Alpha/Beta Pruning Machine Learning - Entropy/Gain To be added at a later stage: Logic(CNF) conversion / CSP Solver / IDS / Bidirectional This document comes with a folder called COS3751_Python_Solver, which contains: - COS3751_Python_Solver_Instructions (this document) - COS3751_Python_Solver_Guide (which will be used as reference for all the examples in this document) 3 Prerequisites You need to install the following: 1. Python 3 2. Numpy 3. Prettytable 4. Pandas Once you have everything installed your good to go. 4 In each example you have to provide the programs with some input(ie: you graphs) for them to work. The file you need to edit will be marked in red. Search Algorithm Breadth First Search You add in your graph as seen in the picture below. You also need to specify you start node, and goal node. To Edit: bfs.py Then run it. 5 Depth First Search You add in your graph as seen in the picture below. You also need to specify you start node, and goal node. To Edit: dfs.py Then run it. Note: The dfs.py program expands nodes from left to right, which is not what is expected in COS3751 where they want nodes to be expanded right to left. [to be fixed] 6 Uniform Cost Search You add in your graph as seen in the picture below. You also need to specify you start node, and goal node. To Edit: ucs.py Then run it. 7 Astar Astar requires two changes. 1. Add in your graph You add in your graph as seen in the picture below. You also need to specify you start node, and goal node. To Edit: astar.py 2. Add in your heuristic This is done in search.py line 1315. To Edit: search.py Then run it. 8 Adversarial Search Alpha Beta Pruning Example 1 To understand how to feed the program the right values lets look at the graph below. Page 571 of the COS3751_Python_Solvers_Guide There are two different types of nodes. 1. The MIN/MAX nodes seen ABOVE the yellow line. 2. The Utility nodes seen BELOW the yellow line. (the ones that return the values) 9 To add in this graph, you need to edit the the games.py file – line 361. To Edit: games.py The min/max nodes are added in as succs(line 361) – notice they have their normal values, such as “A”, “B”, “D” and so on. In the first entry for “A” on line 361: it is connected to node B and node C both of which are min/max nodes themselves. We specify this, by writing A=dict(a1=’B’ and a2=’C’) Min/Max node D is connected to a utility node I. We write this as D=dict(d1=’I1’) – line 363 The utility nodes are added in on line 371 as utils. You must include the “1” after each utility node for example I1 = 8, J1 = 5. Also here, you will specify your start node on line 373. 10 To run the program you need to open up alpha_beta.py. To Run: alpha_beta.py 11 Entropy and Gain Solver The entropy and gain solver requires a .csv file to work. As an example, we will look at the textbook 4th Edition Page page 657 – were Norvig shows a table. 1. Convert the table to a csv You can use what ever method you can think, to convert a “table” into a csv. The method I used, was to copy each row by into LibreOffice/Excel and save the file as a csv. The CSV will look like below. 12 2. Feed the program the csv path Once you have your csv, you need to tell the entropy_solver.py where the .csv file is located. To Edit: entropy_solver.py 3. Run the program Continuing with the example from Norvig, he only shows two calculations unfortunately seen on page 680 of the book. To Run: entropy_solver.py 13 You can see the values match against Norvigs calculations: For Patrons column: For Type column: 14 Entropy and Gain Solver Table This second entropy is similar to the first, except this one takes values from a ENTROPY TABLE. Lets look at example. Go to page 578 of the COS3751_Python_Solvers_Guide Keep this in mind, if the questions requires you to use a table – then you must use the second solver(this one). 15 We will be looking at the example from page 576 of the COS3751_Python_Solvers_Guide 1. Convert the table to a csv You can use what ever method you can think, to convert a “table” into a csv. The method I used, was to copy each row by into LibreOffice/Excel and save the file as a csv. The CSV will look like below. 2. Feed the program the csv path Once you have your csv, you need to tell the entropy_solver_table.py where the .csv file is located. To Edit: entropy_solver_table.py 16 3. Feed the program the entropy table You now need to tell the entropy_solver_table.py what the entropy table looks like. See line 21: To Edit: entropy_solver_table.py 17 3. Run the program To run: entropy_solver_table.py Here we will compare the output again Page 577 of the COS3751_Python_Solvers_Guide 18 For the TimeLine Column: For the budget column: 19","libVersion":"0.2.3","langs":""}