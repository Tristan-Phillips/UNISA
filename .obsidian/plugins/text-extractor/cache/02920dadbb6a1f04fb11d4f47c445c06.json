{"path":"UNISA/98906 - BSc Science in Computing/COS3751 - Techniques of Artificial Intelligence/Student Notes/searching.pdf","text":"Formal representations of searching problems by Ken Halland May 6, 2021 It is sometimes tricky to deﬁne an appropriate representation for states and actions for an AI searching problem. These notes are intended to give some guidelines for choosing an appropriate formal notation for solving such a problem by AI techniques. We provide a number of principles or criteria that can be used when deﬁning a state representation and the actions to navigate the search space, and illustrate them by applying them to the Jealous Husbands problem: Three couples (consisting of three husbands and their wives) must cross a river in a boat that can carry a maximum of two people. The only problem is that all the husbands have a jealous disposition. None of them want to leave their wives on a side of the river with some other husband. Explain how the couples can shuttle back and forth to get everyone across the river without a husband ever leaving his wife on a side of the river with another husband. 1 (Source: http://en.wikipedia.com/wiki/missionaries_and_cannibals_problem) 1 Graphical representations If you have a good imagination, you may be able to picture the stages of the problem in your mind to determine the pertinent information that distinguishes one stage from another. If you can’t do this mentally, it can be useful to draw a diagram. Sometimes a graphical representation is quite suﬃcient (and even preferable) to a formal notation. Think of a chess problem like the 8-queens problem: It’s much easier to see the relative position of pieces and determine which piece can “take” which other piece from a graphical representation than from a set of values or a string of characters. Nevertheless, in the end, the graphical representation will have to be translated into some formal notation before it can be provided as input to a computer algorithm which will apply AI techniques to solve the problem. The purpose of this document is to provide guidelines for the formal representation of searching problems, so we don’t go into detail about graphical representations here. 2 What to represent? The ﬁrst step is to decide what to represent. An important principle is to determine the bare minimum of information that is needed to solve the problem. The problem statement may provide irrelevant information, or it may imply certain information that it does not state explicitly. The challenge is to decide which of this is essential. In general, we need to decide what are the states and what are the actions of the problem: 1If you are uncomfortable or oﬀended by the political incorrectness of this scenario, take a look at the website http: //aperiodical.com/2016/11/a-more-equitable-statement-of-the-jealous-husbands-puzzle/ 1 • A state can be thought of as a snapshot of the situation at a particular stage of searching for the solution to a problem. A state is represented by values that uniquely specify the situation it represents. • An action is applied to one state to get to another state. This is called a transition. In other words, a transition changes the values in one state by means of an action to get to another state. But what are the relevant states and actions of the problem? These have to be determined from the infor- mation provided in the statement of the problem. Note ﬁrstly that there is often information (i.e. values, restrictions or actions) mentioned explicitly or implied implicitly in the problem, that are irrelevant or unnecessary for solving the problem. So whatever ideas you come up with about what to represent, you need to check whether you could get by with less. A good place to start is to consider what the steps of the solution will entail if you were to describe them (or state them) in words. Very often, these steps are the actions that need to be represented. The situations between the steps are the states. Expressed in words, the solution to the Jealous Husbands problem should consist of a list of statements like this: • One husband and his wife get into the boat and cross the river. • The husband crosses back to the starting side. • The two remaining wives cross the river. • etc. It may be tempting to identify actions like getting into and out of the boat (as these are implied by the problem statement) but we do not need to represent them because they add nothing to the solution of the problem. We actually only need a single action to cross the river. We could use two actions (one to cross over and one to cross back) but if we record the position of the boat, one action will be suﬃcient. Applying the action will move the boat from wherever it is to the opposite side. The action should include the people involved in crossing, however. We can do this by specifying them as parameters to the cross action. We will not specify the position of the boat in the action, however, since we can represent it in the state. So what information should be represented in a state (apart from the boat)? Simply the people on either side of the river at a particular stage of the solution. 3 Formal notation for states There are various mathematical notations we can use to give a formal deﬁnition of a state, for example: • set notation, i.e. {v1, . . . , vn}, or • ordered tuples, i.e. (v1, . . . , vn), where v1, . . . , vn are values. Note the following diﬀerences between set and ordered tuple notation: • A set may not contain duplicates, e.g. {1, 1, 3} is not a valid set, but (1, 1, 3) is a valid tuple. • The order of values in a set is immaterial, e.g. {1, 3} is the same set as {3, 1}, but (1, 3) and (3, 1) are diﬀerent tuples. 2 • A set may have a variable number of elements, e.g. {}, {1, 3} and {1, . . . , 20} are all valid sets, but when using ordered tuples, the number of values in a tuple (called the arity) is ﬁxed, i.e. all tuples representing the same things must have the same arity. When using set notation, we prefer values to be of the same type, although sometimes it is convenient to deviate from this rule. Ordered tuples, on the other hand, can have values of diﬀerent types, but since they are ordered, the type of values in each position in the tuple is ﬁxed. (BTW: Appendix A of Russell & Norvig describes vector notation, i.e. ⟨v1, . . . , vn⟩, as an alternative to ordered tuples. We prefer to use vector notation when all the values are numeric and there is a possibility of some sort of vector algebra. Otherwise we use ordered tuples. We use square brackets to indicate matrices, normally of 2 dimensions, i.e. m × n values.) Whichever notation we choose, we need to specify the types of values and their domains. Examples of types are integers, boolean values, strings, sets of other values, etc. A domain is a set of all the possible values which may be used. Examples of domains are {1, . . . , 20}, {T, F }, {red, green, blue} and the powerset of {1, 2, 3}, i.e. the set of all subsets of {1, 2, 3}. 4 Principles of state representation As stated above, a state should represent a snapshot of the situation at a certain stage of searching for a solution, and actions are performed to transition from one state to another. A common error is to include information about actions in the state representation, or vice versa. This is discussed further in relation to actions below. Redundant information shouldn’t be included in the representation. The main reason for this is computer memory. When the search space is large, memory requirements become an issue, so we need to store as little information as possible for each state. Also, if you have to write out all the states in the search space, you will want to save yourself the extra time and eﬀort. Additional constraints on the values of a state are often needed. Constraints are the formal representation of the restrictions speciﬁed in the problem statement. A state is said to be legal if it complies with such constraints, and illegal otherwise. Such restrictions need not always be speciﬁed by means of separate constraints. Sometimes they can be enforced by the representation itself, speciﬁcally if ordered tuples are used. For example, if the ordered tuple has an arity of 6, this constrains the number of values that may be used to six. However with set notation, if we want precisely six values, we have to specify a separate constraint to say that the size of the set must be 6. The relation between states and the snapshots of situations they represent should be one-to-one. In other words, the representation of one state should not map to two or more diﬀerent situations. And two or more distinct states shouldn’t map to one situation. However, the notation chosen can sometimes collapse analogous states into one and thus simplify the search space, as illustrated by the example below. There are at least two ways to formally represent the states for the Jealous Husbands problem: Set notation Let each state be represented by a set of people and the boat, i.e. any subset of {Husband1, W if e1, Husband2, W if e2, Husband3, W if e3, Boat}. Note that all these values are strings. A state only indicates the situation on this side of the river (i.e. the starting side). It is redundant to also indicate what is on the other side, since this can be inferred. It also includes the boat, because we need to distinguish between two states which are identical except for where the boat is. The initial state is 3 therefore SI = {Husband1, W if e1, Husband2, W if e2, Husband3, W if e3, Boat} and the ﬁnal (or goal) state is SG = {}. Note that it isn’t necessary to specify how many (or which) people are on the boat while it crosses the river in the state representation. This information will (and must) be speciﬁed by the actions that can be performed to get from one state to the next. We still need to specify the restrictions given in the problem statement, namely that wives may not be left on a side of the river with some other husband, as constraints. • For this side of the river: If W if e1 ∈ S, then Husband1 ∈ S, if W if e2 ∈ S, then Husband2 ∈ S, and if W if e3 ∈ S, then Husband3 ∈ S. • For the other side: If W if e1 /∈ S, then Husband1 /∈ S, if W if e2 /∈ S, then Husband2 /∈ S, and if W if e3 /∈ S, then Husband3 /∈ S. Note that the problem statement does not require that a wife must always be with her husband - she may just not be left with another husband. This means that one or more wives can be on one side of the river without any husbands. Ordered tuples Things are a bit simpler if we represent states by means of ordered tuples: Let every state be represented by a tuple (H, W, B), where H and W are integers such that 0 ≤ H ≤ 3 and 0 ≤ W ≤ 3, and B ∈ {this, other} is a string representing the side of the river where the boat is. Once again, a state only includes information about the number of people on this side of the river, since the situation on the other side can be inferred from it. The initial state is therefore SI = (3, 3, this) and the goal state is SG = (0, 0, other). The following constraint expresses the restriction that there may never be more wives than husbands on this side of the river: If 1 ≤ H, then W ≤ H. For the other side, the constraint is if H ≤ 3, then H ≤ W . (Check this yourself! Remember that H and W always represent the people on this side of the river.) Note that this restriction diﬀers from the original problem statement. The problem requires that no wife may be left with another husband, whereas this constraint only requires the number of wives on either side to be less than or equal to the number of husbands (if there is at least one husband there). For example, the state {W if e1, Husband2, Husband3, W if e3} is illegal when using set notation and its constraints, but the equivalent state using ordered tuples, namely (2, 2, other), isn’t. Later in these notes (where we discuss actions), we explain that there can be advantages to such simpliﬁcations. But to justify it at this stage, note that the state {Husband2, W if e2, Husband3, W if e3} is legal. Its representation in ordered tuple notation is also (2, 2, other). So for an illegal state in set notation whose equivalent in ordered tuple notation is legal, there is a legal state in set notation with the same number of husbands and wives on each side of the river. The ordered tuple notation therefore collapses an illegal and a legal state (in set notation) into a single legal state. It doesn’t allow any states that only have an illegal equivalent in set notation. If you agree with this, you should agree that it is suﬃcient just to count the number of husbands and wives, and not look at the actual individuals involved. 4 Bit strings If you are uncomfortable about this loss of information in the ordered tuple notation, consider using bit strings to represent states, i.e. S = b7b6b5b4b3b2b1 where bi ∈ {0, 1}. In this string, b7 represents the ﬁrst husband and b6 represents his wife, b5 represents the second husband and b4 represents his wife, etc., and b1 represents the boat. If bi = 1 then the entity it represents is on this side of the river, but if it is 0, it is on the other side. The initial state is therefore SI = 1111111 and the goal state is SG = 0000000. Note that these bit strings are equivalent to the ordered tuples (b7, b6, b5, b4, b3, b2, b1). Is this representation closer to the set notation or the ordered tuple representation? Think about it! 5 Formal notation for actions and state transitions Following the notation used in Russell & Norvig, an action is speciﬁed as: Action(v1, . . . , vn) where v1, . . . , vn are values that refer to (or change values in) the state representation. We generally give the action a descriptive name. There are often constraints on the values in an action which are derived from restrictions speciﬁed in the problem. An action is said to be legal if its values comply with the constraints. A state transition is written as: Result(Action(v1, . . . , vn), S) 7→ S′ In normal English, this says that the result of applying the action involving v1, . . . , vn to state S is S′. The 7→ symbol means that the action maps S to one and only one state S′. A legal action A is said to be applicable to a legal state S if A can be applied to S (according to the values involved in A and S), and Result(A, S) maps to a legal state S′. An action in the Jealous Husbands problem is to cross the river, so we will call it Cross. The restriction is that only one or two persons can cross at a time. Once again, we can use diﬀerent notations. In set notation, an action can be speciﬁed as: Cross(P ) where P is a set such that P ⊆ {Husband1, W if e1, Husband2, W if e2, Husband3, W if e3} and 1 ≤ |P | ≤ 2. Here is an example of a state transition from the initial state using this notation: Result(Cross({Husband1, W if e1}), SI ) 7→ {Husband2, W if e2, Husband3, W if e3} Examples of actions which are not applicable to a state are A1 = Cross({Husband1, Husband2}) and A2 = Cross({W if e1}), and the state S = {Husband2, W if e2, Husband3, W if e3}. Although A1, A2 and S are all legal, A1 is not applicable to S because husbands 1 and 2 are not on the same side of the river in S. A2 is also not applicable to S even though wife 1 is on the other side of the river, because the resulting state, namely S′ = {W if e1, Husband2, W if e2, Husband3, W if e3, Boat}, is illegal. For the ordered tuple notation, we can specify an action as: 5 Cross(HB, WB) where HB and WB are non-negative integers such that 1 ≤ HB +WB ≤ 2. Here, HB and WB represent the number of husbands and wives in the boat, respectively. Then a state transition would look like this: Result(Cross(1, 1), SI ) 7→ (2, 2, other) Note ﬁnally that we do not specify the boat in either notation. This is redundant information since we assume that the boat crosses the river in the relevant direction whenever a Cross action is applied. 6 State spaces The state space is a directed graph, where each node is a legal state and each edge between the nodes is a transition from one state to another by performing an applicable action. It is a directed graph (rather than a directed tree) because sometimes there may be diﬀerent ways to get to the same node. In other words, diﬀerent actions may be applied to diﬀerent states to get to the same state. The state space may also contain cycles. There is a solution to the problem if there is a path from the node for the initial state to the node for the goal state. Here is the state space for a simpliﬁed version of the Jealous Husbands problem (where there are only two couples) using the ordered tuple notation: (2, 2, this) (0, 2, other) (1, 1, other) (2, 0, other) (2, 1, this) (1, 1, this) (0, 2, this) (0, 0, other) (2, 0, this) Note that all edges in this graph are bidirectional, because every applicable action can be reversed by applying an opposite (applicable) action. The initial and goal states are indicated by boxes. Acknowlegements: Dr Sihem Belabbes-Varzinczak and Prof Etienne van der Poel made valuable suggestions for the improvement of these notes. Thank you! 6","libVersion":"0.2.3","langs":""}