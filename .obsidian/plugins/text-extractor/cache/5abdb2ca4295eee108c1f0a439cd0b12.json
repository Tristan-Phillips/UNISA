{"path":"Subjects/COS3711 - Advanced Programming/Unsorted/Open Book Exam Files/Virtual Classes/VC06_Ch14_Validation_RegEx.pdf","text":"COS3711 – Advanced Programming Virtual Class: COS3711 - 22 - Y Chapter 14 – Validation, Regular Expressions Lecturer: Dr C Pilkington Tutor: Ron Barnard Validation, Regular Expressions Outcomes ▪ Use input masks to control user input ▪ Know the purpose of validators, and Qt support for validators ▪ Know how to set validators for input widgets in Qt ▪ Know the purpose of regex, and an overview of regex syntax ▪ Understand the relationship between validators and regex ▪ Be able to write simple regex for validation of input in Qt Validation, Regular Expressions Validation Validation – Checking or proving validity, or accuracy, of input. Anti-pattern - “Input kludge”. • Numeric input often needs to be within a given range. Division by zero problem. • String input often needs to be in a specific format. Eg: phone number, e-mail address, ID number. • Use Input masks, Validators and Regular Expressions for validation. • Qt has pre-defined input widgets / dialogs that restrict input to valid values - ◦ QDateEdit – validates date, range of dates, date format; ◦ QTimeEdit – validates time, range of times, time format; ◦ QSpinBox – validates integers, range of integers (Can also do month names etc); ◦ QDoubleSpinBox – validates double, range of doubles (Can be extended); ◦ QCalendarWidget – validates / selects valid dates. eg: 31st February. ◦ QDateEdit – Can setCalendarPopup(true) – displays selectable calendar. Validation, Regular Expressions Input Masks Input Masks - (Do Ezust Example 14.1, TL 105, and Exercise 6) • Active pattern that controls what can be entered into an input widget; • Prevents incorrect / invalid data entry – Signal emitted when input is valid; • QLineEdit has a QString property inputMask – setInputMask(QString mask), QString inputMask(); A Alpha character required A-Z, a-z a Permitted, but not required N Alphanumeric character required A-Z, a-z, 0-9 n Permitted, but not required X Any non-blank character required x Permitted, but not required 9 Number 0-9 required 0 Permitted, but not required D Number larger than zero required 1-9 d Permitted, but not required \\ Escape special characters, use as separator # Number or + -, permitted, but not required > All following alpha characters upper-case < All following alpha characters lower-case ! Turn off case conversion : - / All other characters are immutable separators - lnEdt->setInputMask(“D9-999-999”); lnEdt->setInputMask(“AAAaa”); lnEdt->setInputMask(“>A!AAANNN”); lnEdt->setInputMask(“(\\0DD-9999999”); Validation, Regular Expressions Validators (Qt) Validators – objects attached to input widgets to check user input. • QValidator is an abstract class, with concrete sub-classes - ◦ QIntValidator – validates integer numeric input, can set ranges; ◦ QDoubleValidator – validates double numeric input, can set ranges; ◦ QRegExpValidator / QRegularExpressionValidator – validates regular expressions; • QValidator::validate() method is pure virtual – must be implemented; ◦ Returns enums – Invalid, Intermediate, Acceptable; ◦ Validator will not allow data entry that returns Invalid. • QValidator can be extended if regular expressions or widgets are not sufficient. • Do Example 14.3 / 14.4. Validation, Regular Expressions Subclassing QValidator Invalid – Definitely invalid Intermediate – Not valid, but still can be Acceptable – Definitely valid. Eg: For a QLineEdit that accepts int 10 – 100: 209, “abc” Invalid “ ”, 5 Intermediate 12, 59 Acceptable QValidator::State Palindate::validate(QString& str, int& ) const { QString inpStr(str.toLower()); QString skipchars(\"-_!,;. \\t\"); foreach(QChar ch, skipchars) inpStr = inpStr.remove(ch); QString revStr; for(int i=inpStr.length(); i > 0; --i) revStr.append(inpStr[i-1]); if(inpStr == revStr) return Acceptable; else return Intermediate; } Do Example 14.9 >> Validation, Regular Expressions Regular Expressions Regular expressions (Regex) are a powerful tool for handling strings, using a sequence of characters that specify a search pattern. Can be used for - Validation Can test whether a string / sub-string meets some criteria Searching Provides much more powerful pattern matching than sub-string matching Search and Replace Can replace all occurrences of a sub-string with a different sub-string String Splitting Can be used to identify where a string should be split Regex consists of - • Meta-characters: { } [ ] ^ $ . | * + ? \\ • Characters that become meta-characters when escaped: d s w D S W N eg: \\d \\S • Literals – any character that is not a meta-character. Basic concepts - Boolean “or” | eg: gray|grey Wildcard . Matches any character Groups ( ) Can apply quantifiers (0|1)? Character sets \\s \\S \\d \\D \\w \\W Quantifiers ? * + {n} {min,} {,max} {min,max} Character sets [aeiou] Matches ONE char Validation, Regular Expressions Regex Syntax – Meta characters Quantifiers * Zero, or any number + One, or any number – At least one ? Zero or one { } Quantifier, with limits [abc]{3} matches aaa cbb aca etc { 1, 3 } One to three - inclusive [abc]{1,3} matches a cc cba ca etc { 3, } Three, or more – at least three [abc]{3, } matches ccb abbbab etc Characters Sets \\s Matches any white-space character [ \\t \\r \\n \\f ] Space, tab, CR, LF, FF \\S Matches any non white-space char \\d Matches any digit 0 - 9 \\D Matches any non-digit \\w Matches any 'word' character [A-Za-z0-9_] Note underscore \\W Matches any 'non-word' character Punctuation, white-space Validation, Regular Expressions Regex Syntax – Meta characters Characters Sets [ ] Character class or Set – matches only one. Order does not matter. [aeiou] matches a or e or i or o or u [ - ] Hyphen used to specify range, can be multiple ranges. [0-9A-Z] matches ONE character [ ^ ] Caret after opening bracket negates class. Matches any character NOT in the class. [^aeiou] matches b c 5 z h etc Grouping ( ) Grouping that can be quantified (cat){3} catcatcat cat{3} cattt \\1 to \\9 Back reference – match same text [abc]\\d{5}[A-F]\\2 Repeats \\d{5} Special / other . Wildcard, any single character ( x | y ) OR, alternatives (Jan | Feb | Mar) matches Feb etc \\ Used for escaping special characters in C++ strings. “[A-Z]\\\\d\\\\d” Double backslashes in strings. Validation, Regular Expressions Regex Syntax – Meta characters Anchoring characters ^ If first character in regex, indicates match MUST start at beginning of the string. Independent 'word', not sub-string. $ If last character in regex, indicates match MUST continue to end of the string. Independent 'word', not sub-string. \\b Word boundary. Not sub-string. \\B Non word boundary. Sub-string. Points to note - • Checking is done character by character / digit by digit; ◦ particularly with date / number strings eg: does not match 1985, matches 1 9 8 5 • A lternatives “OR” - (Jan | Feb | Mar | Apr | May) Matches only ONE. • Mutipliers / wildcard - . vs * vs ? vs + • Ranges - {1,3} vs {1,} vs {,3} vs {3} • Brackets - ( ) vs [ ] vs { } Validation, Regular Expressions Regex Examples Regex examples - Regex Match cat Literal string cat c*at at, cat, ccccccat c?at at, cat c.t cDt, c3t, c%t c\\.\\*t c.*t only – Special characters escaped c[0-9a-c]+z ccc32bz - One or more chars in set. The (cat|dog) sat on the mat The cat sat on the mat, The dog sat . . . . \\w+ Same as [a-zA-Z0-9_]+ \\d{5} Exactly 5 digits – 46832, 11155 ^Cat Cat only if occurs at beginning of string [^Cat] Any character, except C a or t anywhere \\d{3}-[0-9]{4} 456-2323 Any 7 digits with hyphen Validation, Regular Expressions Regex Validation (Qt) Qt5 Uses QRegExp QRegExp rx(\"\\\\d\\\\d \\\\w+\"); // Matches 2 digits, space, word rx.exactMatch(“abc123 def”); // Returns true QRegExp rx(\"^\\\\d\\\\d \\\\w+$\"); // Matches 2 digits, space, word from beginning of string rx.exactMatch(\"abc123 def\"); // Returns false QRegExpValidator // Regex: Optional '-' followed by 1 to 3 digits. QRegExp rx(\"-?\\\\d{1,3}\"); QValidator *validator = new QRegExpValidator(rx, this); QLineEdit *edit = new QLineEdit(this); edit->setValidator(validator); connect(edit, SIGNAL(returnPressed()), this, SLOT(calculate()); Validation, Regular Expressions Regex Validation (Qt) Qt6 QRegularExpression has replaced QRegExp QRegularExpression re(\"\\\\d\\\\d \\\\w+\"); // Matches 2 digits, space, word QRegularExpressionMatch match = re.match(\"abc123 def\"); bool hasMatch = match.hasMatch(); // Returns true QRegularExpressionValidator (Same syntax as QRegExpValidator) // Regex: Optional '-' followed by 1 to 3 digits QRegularExpression rx(\"-?\\\\d{1,3}\"); QValidator *validator = new QRegularExpressionValidator(rx, this); QLineEdit *edit = new QLineEdit(this); edit->setValidator(validator); connect(......); Validation, Regular Expressions Regex - Past papers Past paper Consider the following three regular expressions - [^\\\\s] {4} Wd4H Any 4 chars without white-space [0-9A-Za-z] {2,5} Ad 1234 c1bbB 55cD . . [0-9A-Fa-f] f14 4FF xy9 Provide any three strings which satisfy the expressions. Past paper Use a regular expression to check that a document number meets a particular format (in the order given below) - • The first 3 characters should be GDL, POL, or RGL (for guidelines, policies, and regulations respectively). • A slash. • Exactly 3 arbitrary upper-case alphabetic characters. • Another slash. • A year value in the range from 1900 onwards. (GDL|POL|RGL) / [A-Z]{3} / (1\\9|[2-9][0-9]) \\d{2}","libVersion":"0.2.3","langs":""}