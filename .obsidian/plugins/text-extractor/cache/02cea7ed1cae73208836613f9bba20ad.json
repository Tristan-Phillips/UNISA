{"path":"UNISA/98906 - BSc Science in Computing/COS3711 - Advanced Programming/Unsorted/Tutorial Letters/COS3711 2022 TL103 Practical guide.pdf","text":"COS3711/103/2022 Tutorial letter 103/2022 Advanced Programming COS3711 Year module School of Computing Practical Guide COS3711/103/2022 2 CONTENTS Page 1. INTRODUCTION .......................................................................................................................... 3 2. INSTALLING QT ........................................................................................................................... 3 2.1 Prescribed software for COS3711 ................................................................................................. 3 2.2 MinGW .......................................................................................................................................... 3 2.3 Qt 5 ............................................................................................................................................... 3 2.4 Qt Creator ..................................................................................................................................... 4 2.5 Installing the software ................................................................................................................... 4 3. USING THE SOFTWARE ............................................................................................................. 4 3.1 Starting Qt Creator ........................................................................................................................ 4 3.2 Creating a project ......................................................................................................................... 5 3.3 Editing a C++ source file ............................................................................................................... 6 3.4 Building and running the program ................................................................................................. 9 4. FURTHER USE OF QT CREATOR .............................................................................................. 9 4.1 Creating projects ......................................................................................................................... 10 4.2 Adding and removing files from projects ..................................................................................... 10 4.3 Entering command line arguments .............................................................................................. 10 4.4 Getting context-sensitive help ..................................................................................................... 10 4.5 Compiling Ezust code ................................................................................................................. 10 5. WITHOUT USING QT CREATOR ............................................................................................... 11 6. INSTALLING EZUST LIBRARIES ............................................................................................... 12 6.1 Building the libraries .................................................................................................................... 12 6.2 Using the libraries ....................................................................................................................... 13 COS3711/103/2022 3 1. INTRODUCTION The purpose of this document is to help you get going using Qt Creator. After getting Qt Creator installed (Section 2), Sections 3 and 4 introduce Qt Creator. Section 5 deals with creating, building, and executing Qt applications without Qt Creator, and Section 6 includes step-by-step instructions to install the Ezust libraries which are discussed in chapter 7 of Ezust. 2. INSTALLING QT If you have not previously installed Qt, or have an older version installed, you will need to do this installation first. The software can be downloaded from http://osprey.unisa.ac.za or, for more up-to-date versions, from https://www.qt.io/download. Once you have successfully set up the environment as explained here, you should be able to do the following using the Qt Creator (using the Hello Qt program). Create a project • Build the project • Execute the project 2.1 Prescribed software for COS3711 The prescribed software for COS3711 is the called Qt framework. The Qt software development kit (SDK) consists of a number of different tools for creating applications using the Qt GUI framework. The main components of the SDK are: a C++ compiler, namely the MinGW port of the Gnu Compiler Collection (GCC) • the GUI framework, namely Qt 5 • an IDE, namely Qt Creator • A GUI tool, namely Qt Designer There are numerous other development environments that one can use to develop Qt applications. There are even versions of Qt Creator available for Linux and other operating systems. You are welcome to install and use other versions and combinations of development tools, but if you expect to be supported with installation and other difficulties, you must install the prescribed software as explained below. 2.2 MinGW MinGW (which stands for Minimalist Gnu for Windows) is a Windows port of the Gnu Compiler Collection. GCC is a collection of compiler tools developed for the Unix operating systems, and has been ported to run on Windows platforms in the form of MinGW. Ensure that you download a version of Qt that includes the MinGW compiler if you do not have one already. The MinGW port of GCC will be installed automatically within the \\Qt directory. This will not interfere with other versions of MinGW that you may already have on your computer. More information on the MinGW compiler is available from http://www.mingw.org/. 2.3 Qt 5 Qt 5 is a C++ framework for developing applications with graphical user interfaces. The Qt class libraries make available approximately 400 object-oriented classes with most of the functionality needed to build any GUI applications. In fact, the libraries contain classes for GUI, layout, database, internationalization, networking, XML, and much more. The version of Qt we use is the Qt open source edition, meant for the development of free and open source software only. It is provided free of charge under the terms of both the Qt Public License and the Gnu General Public License. Information on the Qt framework is available from https://www.qt.io. COS3711/103/2022 4 2.4 Qt Creator Qt Creator is a cross-platform integrated development environment (IDE). The IDE consists of a Qt project manager, a source code editor, build-automation tools, and an interface to a debugger. The aim of Qt Creator is to be a powerful development tool that works the same way on all platforms. 2.5 Installing the software An all-in-one self-extracting installer for Qt is available for download from the departmental website. During installation, you will be given a number of options. We recommend that you accept all the defaults. Create a shortcut to the Qt Creator to your desktop; the file (qtcreator.exe) will be in the Qt\\Tools\\QtCreator\\bin folder. 3. USING THE SOFTWARE To help you get started, we present a short guide to your first \"Hello Qt\" program. The images used here may not be exactly the same as your interface as it depends on which version you download. 3.1 Starting Qt Creator Double-click the Qt Creator shortcut on your desktop. The following dialog will be displayed. COS3711/103/2022 5 3.2 Creating a project Click on the Projects button (above Examples), then New Project button. The following dialog will be displayed. Select Qt Widgets Application from the Application list of options and then click on the Choose... button. The following dialog will be displayed. Type Hello as the project name and change the location to your choice (for example, C:\\unisa\\cos3711) and click on Next. The following dialog will be displayed. COS3711/103/2022 6 Click on Next. The following dialog will be displayed. Click on Next. The following dialog will be displayed. Leave everything as is on the Project management dialog and click on Finish. 3.3 Editing a C++ source file At this stage, you have an empty project with little source code. COS3711/103/2022 7 Click on the Run button (the button with a green triangle in the bottom left-hand corner - circled in red above). You will be presented with the following dialog box once the program has built and run. You now know that the basic project builds and runs. Close the window. Expand the Forms section and double-click on mainwindow.ui to open the Qt Designer. Customise the form as necessary: Resize the canvas. • Remove the tool and status bars (by right-clicking on them and selecting the appropriate option). • Add a Label (found in the Display Widgets section). The form should now look as follows. Note the objectName property on the right. COS3711/103/2022 8 Save the file and return to the code window – click on the X near the top centre of the window. COS3711/103/2022 9 Add the line of code in the MainWindow() constructor that sets the text for the label. Select File and Save All to save all the changes you have made. 3.4 Building and running the program It is possible to build and run a program separately, but it's easier to do it in one go. Click on the Run button. If the build is successful, a small window should appear somewhere on the screen displaying the message Hello Qt!. You can resize the window. If the build was unsuccessful, make sure you have entered the program correctly and re-run the project. When you have finished admiring your first Qt program, close the little window. 4. FURTHER USE OF QT CREATOR Note: If you successfully completed COS2144/COS2614 after 2010 you should be familiar with Qt Creator. If so, you may read through this section briefly. Our prescribed book, Ezust, assumes that you are using some Linux platform, whereas we assume that the majority of COS3711 students will be using an MS Windows platform. We therefore decided to prescribe a Qt programming environment which is available on both platforms, namely Qt Creator. When you start up Qt Creator, you will notice buttons down the left hand side of the screen labelled Welcome, Edit, Design, Debug, Projects, and Help. Qt Creator starts in Welcome mode. COS3711/103/2022 10 4.1 Creating projects In Qt Creator, it is impossible to compile a C++ source code file (to get an executable file) without having it part of a project. The Welcome mode of Qt Creator therefore allows you to create a new project or open a recent project. You can also open an existing project not listed as a recent project by means of the File drop-down menu. To create a new project in Qt Creator, follow the instructions given above. 4.2 Adding and removing files from projects You can add new and already existing files to a project. New file: In Edit mode, right-click on the project name in the Projects panel, and choose Add New.... Select what type of file you want: class (adds both source and header files to the project), only source (.cpp), or only header (.h). • Existing file: In Edit mode, right-click on the project name in the Projects panel, and choose Add Existing Files.... Browse to the header/source code file that you want to add, select it and click on Open. It will be added to the list of source files under the current project in the Projects panel. In Edit mode, double-click on any file in the Projects panel to get it displayed in the editor on the right. Sometimes you need to remove a source code file from your project. Do the following. In Edit mode, right-click on the name of the file you want to remove (e.g. unwanted.cpp) in the Projects panel and choose Remove.... You can click the Delete file permanently checkbox if you want to, but this is not recommended as you will effectively be throwing code away. Click on OK to remove the file from the project. This means that when you compile your project again, this file will not be compiled and its object code will not be linked with the other code in your project to form the executable. 4.3 Entering command line arguments In order to enter command line argument, select Projects mode, choose the Run option under the current kit being used to access the run settings, and type in the command line arguments in the Command line arguments textbox. 4.4 Getting context-sensitive help You can get information on any Qt class or method in your source code by moving the cursor onto the class or method name in the editor and pressing the F1 key. Note: At this level of programming, you are expected to use the API documentation extensively. You can browse the documentation through the Index option via the Help menu in Qt Creator. 4.5 Compiling Ezust code All the code for the examples in Ezust is available in the src.zip file downloadable from the Additional Resources on myUnisa. You will need to unzip this file to the hard-drive of your computer (or to a memory stick) to be able to access any of the code in it. We recommend that you unzip and keep all the Ezust code together. Do this. Right-click on src.zip and extract all the files to the directory where you want them (e.g. C:\\unisa\\cos3711). Although you can work on this code (editing and changing it) where you have unzipped it, we suggest that you copy the code as you need it to a separate project directory. Then you can edit the code to your heart's content and still leave the original code intact. Note If a program provided by Ezust does not work, please refer to myUnisa under Additional Resources to obtain a working copy of the code. Lecturers will be uploading corrected code as necessary on myUnisa. COS3711/103/2022 11 5. WITHOUT USING QT CREATOR This section discusses how one can build and execute Qt programs using the command prompt. Refer to Section 1.6 and Appendix C, Development Tools in Ezust. Note: It is beneficial to learn to build and execute programs from the command prompt. However, this skill will not be tested in your assignments or in the exam. The typical cycle of developing an application is: 1. Enter the program. 2. Create a platform-independent project file. 3. Create a platform-specific makefile from the project file. 4. Make the file. 5. Run the file. In order to understand how Qt operates let’s go through the steps by creating and running an application without using Qt Creator. Step Implementation Enter the program • Use Notepad to create a source file hello.cpp and save it in the directory c:\\cos3711\\hello. #include <QApplication> #include <QLabel> int main(int argc, char *argv[]) { QApplication app(argc, argv); QLabel *label = new QLabel(\"Hello Qt!\"); label->show(); return app.exec(); Set the paths • Open the command prompt. • If you followed the default installation instructions of Qt Creator, typing the following will set the path correctly. You will need to use the paths that are specific to your installation. path=C:\\Qt\\Qt5.3.0\\5.3\\mingw482_32\\bin; C:\\Qt\\Qt5.3.0\\Tools\\mingw482_32\\bin Note: If you installed Qt in a folder other than the default folder the paths should be set to the folders where qmake and mingw32-make are placed. Create a platform- independent project file • From the command prompt, change the directory to hello • Type in qmake -project • A platform-independent project file (hello.pro) is created. (Enter dir to see files in directory.) Create a platform- specific makefile from the project file. • Type in qmake hello.pro • A Makefile is created as well as other files and two directories. • A dir will display the following: … <DIR> debug 201 hello.cpp 312 hello.pro 5,005 Makefile 4,360 Makefile.Debug 4,414 Makefile.Release <DIR> release … COS3711/103/2022 12 Make the file. • To make the file type mingw32-make at the command prompt. Run the file. • As a debug version is created by default, you just change directories to c:\\cos3711\\hello\\debug. • A dir will reveal the following: … 1,355,316 hello.exe 366,848 hello.o … • Type in hello and this window will be displayed. (It can be resized) 6. INSTALLING EZUST LIBRARIES 6.1 Building the libraries Note: It is essential to compile the Ezust libraries to use many of the programs in the textbook. Please follow the instructions in this section carefully. To get the code to work in examples that are part of the Ezust libraries, it is necessary to create a compiled version of these libraries. Compiling libraries is covered in Chapter 7 of Ezust. Firstly, an environment variable needs to be set. To set an environment variable: 1. Go to “Control Panel” (Left-click on the “Start” and then left-click on “Control Panel” or right-click the \"Start\" icon followed by selecting “Settings” and “Control Panel”). In Windows 10, type ‘env’ into the search box on the Taskbar. 2. Select the \"System\" icon. 3. Click the \"Advanced\" tab 4. Click the \"Environment Variables\" button. Under the \"User Variables\" section, click “New”. COS3711/103/2022 13 5. Enter CPPLIBS in the \"Variable name\" field and the path (c:\\projects\\libs) in the \"Variable value\" field. 6. Click OK If the creation of the environment variable was successful, it will be displayed in the \"Environment Variables\" window with the \"Variable\" name \"CPPLIBS\" and \"Value\" c:\\projects\\libs. Now follow the steps below to prepare the Ezust libraries. \u0000 Download and extract the updated libs folder from Additional Resources on myUnisa to the c:\\projects folder. \u0000 Open the libs.pro (It should be available in c:\\projects\\libs) using Qt Creator. Click Configure Project in the Configure Project setup dialog box. \u0000 If you are using Windows 10, you need to set up the environment variable in Qt as well. Click on Projects in the menu on the left, view the details under Build Environment, and click on the Add button to add the environment variable if necessary. Build libs.pro (Build – Build All; do not run it). Note that this may take a while, and that there may be some warnings produced (often about deprecated classes). \u0000 If you managed to build the libraries correctly, verify that several .dll files (specifically dataobjects.dll) are created in the C:\\projects\\libs folder. \u0000 You can now close the libs project in Qt Creator. 6.2 Using the libraries If you are creating a project of your own that needs the libraries supplied with the book, you need to add a few additional lines in the .pro file. COS3711/103/2022 14 For example if you are using classes from the dataobjects library, then you need to add the following two lines in the .pro file. LIBS += -L$$(CPPLIBS) -ldataobjects INCLUDEPATH += $$(CPPLIBS)/dataobjects If you are using classes from different libraries then you need to add the above statements for each library in the .pro file. Once you have included the above statements in the .pro file, there is no need to explicitly add a header or .cpp file from the dataobjects library into your project. © UNISA 2022","libVersion":"0.2.3","langs":""}