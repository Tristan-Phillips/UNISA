{"path":"Subjects/COS3711 - Advanced Programming/Unsorted/Open Book Exam Files/Theory/COS 3711 Summery.pdf","text":"1 COS 3711 Contents Libraries .................................................................................................................................................................................. 2 Reflection ................................................................................................................................................................................ 3 Design Patterns ...................................................................................................................................................................... 5 UML ..................................................................................................................................................................................... 5 Factory Pattern ................................................................................................................................................................... 6 Strategy Pattern .................................................................................................................................................................. 9 Strategy and Factory Combined Pattern ........................................................................................................................... 10 Memento Pattern ............................................................................................................................................................. 11 Singleton Pattern .............................................................................................................................................................. 12 Serializer Pattern ............................................................................................................................................................... 13 Facade Pattern .................................................................................................................................................................. 15 Adapter Pattern ................................................................................................................................................................ 17 Other Patterns .................................................................................................................................................................. 18 Anti-Patterns ..................................................................................................................................................................... 19 XML ....................................................................................................................................................................................... 20 QDomDocument ............................................................................................................................................................... 21 QXmlStreamWriter ........................................................................................................................................................... 22 Xml SAX ............................................................................................................................................................................. 24 Qt MVC.................................................................................................................................................................................. 26 REGEX .................................................................................................................................................................................... 30 Concurrency .......................................................................................................................................................................... 32 QThreads ........................................................................................................................................................................... 32 QProccess .......................................................................................................................................................................... 35 Networking ........................................................................................................................................................................... 37 2 Libraries A framework is a structure/skeleton/design that provides something for the developer to build on – almost like a reuse of a design principle. All large software projects are built on top of frameworks by adding functionality to the framework where it is needed. A framework is a (typically large) collection of general-purpose (or domain specific) classes and conventions designed to improve the consistency of design for a particular set of problems. A developer then builds on this framework by subclassing framework classes or adding new custom classes (or even inserting libraries). Your code is then called by the framework as necessary, where control is given to the framework; there is what has been called an Inversion of Control (also known as the Hollywood Principle - \"Don't call us, we'll call you\"). For example, frameworks are often used to create graphical applications and database applications; Qt is one of many open-source object-oriented frameworks that provide a set of reusable components for building crossplatform applications. A library is a collection code modules organised in a reusable way to achieve common tasks. They have also been described as an indexed collection of compiled (object) files linked together – they are indexed to help the linker locate names of classes, class members, functions, variables, and so on, which supports the linking process. As a developer, you just use the bits from the library that you want, and do not have to use all of it in a particular project; note that here you call the library from your code to provide the required service, that is, the developer is in control. The emphasis here is reusability. 3 Reflection Static Properties: Dynamic Properties: Reflective programming offers a generic way of accessing the state of any QObject (as long as the respective class is programmed to support reflective programming) instead of having to rely on class specific getter functions or toString() functions in a class. 4 Meta file writer: 5 Design Patterns UML • Association (Use) [Filmwriter uses the film class] • Inheritance (Is a) [FilmInput is a QWidget] 6 Factory Pattern -Factory Pattern: Used for building/creating complex objects (Ex: creating a car engine class with multiple variables that must be set, the factory can create default preset engines) 7 Abstract Factory Pattern -Abstract Factory: Used for building an object consisting of multiple smaller objects/components (Ex: Building a robot/human/alien consisting of arms, legs, lungs, a hart, etc) 8 9 Strategy Pattern -Strategy Pattern: Used for switching/selecting similar methods (fly [rocket, wings, noFly]) (sort[bubble, insert, select]) 10 Strategy and Factory Combined Pattern -Strategy & Factory Pattern: Used for creating complex strategies (Ex: an attack strategy that needs multiple variables to be set for attack effort, angle, speed & focus. The factory can be used to setup default preset attacks such as a reckless attack or a guarded attack or normal attack) -Abstract Factory & Strategy Pattern: Used for creating objects with multiple methods/strategies that needs to be switched (ex, give a game’s players a flight, fight, flee, run, walk, etc. strategies – [robots run different from humans or aliens or animals]) 11 Memento Pattern -Memento Pattern: Used for adding undo capabilities to objects (restore a cell in a table, restore your game player with a dispel magic spell) 12 Singleton Pattern -Singleton Pattern: Create only one of a certain class (Example a single settings file) 13 Serializer Pattern 14 Serializer vs Memento: 15 Facade Pattern -Façade Pattern: Create an single interface(façade) for a complicated bunch of classes. The client interacts with the façade and the façade with the underlining classes ) 16 How QString implements Façade: 17 Adapter Pattern -Adapter Pattern: ex: makes an app outputting xml connect with a app understanding only javascript 18 Other Patterns -Observer Pattern: Used for notifying object of changes (signal & slots; newspaper & subscribers) 19 Anti-Patterns 20 XML <stockList> //element <stockItem type=\"Confectionery\"> //element with attribute <item>Kit Kat</item> //element with textElement <quantity>12</quantity> <weight>65</weight> </stockItem> <stockItem type=\"ReadingMaterial\"> <item>The Star</item> <quantity>100</quantity> <frequency>Daily</frequency> </stockItem> </stockList> 21 QDomDocument QDomDocument -> Create tree 22 QXmlStreamWriter Read: 23 Write: 24 Xml SAX 25 Using QXmlSimpleReader & QXmlDefaultHandler Reader: Handeler: It is useful to examine some of the functions inherited by QXmlDefaultHandler, and consider why they might be reimplemented in a custom handler. Custom handlers will typically reimplement: QXmlContentHandler::startDocument() to prepare the handler for new content. Document elements and the text within them can be processed by: • QXmlContentHandler::startElement() • QXmlContentHandler::endElement(), • QXmlContentHandler::characters(). You may want to reimplement QXmlContentHandler::endDocument() to perform some finalization or validation on the content once the document has been read completely. 26 Qt MVC • Compare Qt MV with Observer design Pattern • Compare Qt MV with MVC design pattern 27 28 29 30 REGEX 31 32 Concurrency QThreads 33 34 35 QProccess 36 37 Networking 38 UDP:","libVersion":"0.2.3","langs":""}