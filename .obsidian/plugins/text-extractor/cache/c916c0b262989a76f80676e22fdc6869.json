{"path":"UNISA/98906 - BSc Science in Computing/COS3751 - Techniques of Artificial Intelligence/Student Notes/Class12.pdf","text":"1 CS 1571 Intro to AI M. Hauskrecht CS 1571 Introduction to AI Lecture 12 Milos Hauskrecht milos@cs.pitt.edu 5329 Sennott Square Adversarial search CS 1571 Intro to AI M. Hauskrecht Announcements • Homework assignment 4 is out – Programming and experiments – Simulated annealing + Genetic algorithm – Competition Course web page: http://www.cs.pitt.edu/~milos/courses/cs1571/ 2 CS 1571 Intro to AI M. Hauskrecht Search review Search • Path search • Configuration search Optimality • Finding a path versus finding the optimal path • Finding a configuration satisfying constraints versus finding the best configuration CS 1571 Intro to AI M. Hauskrecht Game search • Game-playing programs developed by AI researchers since the beginning of the modern AI era – Programs playing chess, checkers, etc (1950s) • Specifics of the game search: – Sequences of player’s decisions we control – Decisions of other player(s) we do not control • Contingency problem: many possible opponent’s moves must be “covered” by the solution Opponent’s behavior introduces an uncertainty in to the game – We do not know exactly what the response is going to be • Rational opponent – maximizes it own utility (payoff) function 3 CS 1571 Intro to AI M. Hauskrecht Types of game problems • Types of game problems: – Adversarial games: • win of one player is a loss of the other – Cooperative games: • players have common interests and utility function – A spectrum of game problems in between the two: we focus on adversarial games only!! Adversarial games Fully cooperative games CS 1571 Intro to AI M. Hauskrecht Example of an adversarial 2 person game: Tic-tac-toe • Player 1 (x) moves first WinLoss Draw 4 CS 1571 Intro to AI M. Hauskrecht Game search problem • Game problem formulation: – Initial state: initial board position + info whose move it is – Operators: legal moves a player can make – Goal (terminal test): determines when the game is over – Utility (payoff) function: measures the outcome of the game and its desirability • Search objective: – find the sequence of player’s decisions (moves) maximizing its utility (payoff) – Consider the opponent’s moves and their utility CS 1571 Intro to AI M. Hauskrecht Game problem formulation (Tic-tac-toe) Objectives: • Player 1: maximize outcome • Player 2: minimize outcome Utility: 1-1 0 Initial state Terminal (goal) states Operators 5 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm How to deal with the contingency problem? • Assuming that the opponent is rational and always optimizes its behavior (opposite to us) we consider the best opponent’s response • Then the minimax algorithm determines the best move MAX MIN 312 8 2 4 6 14 5 2 32 2 3 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 6 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4 7 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4 6 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4 6 4 8 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4 6 4 2 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4 6 4 29 9 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4 6 4 29 3 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 46 4 29 3 2 5 5 5 7 10 CS 1571 Intro to AI M. Hauskrecht Minimax algorithm CS 1571 Intro to AI M. Hauskrecht Complexity of the minimax algorithm • We need to explore the complete game tree before making the decision 1-1 0 Complexity: m b ? 11 CS 1571 Intro to AI M. Hauskrecht Complexity of the minimax algorithm • We need to explore the complete game tree before making the decision • Impossible for large games – Chess: 35 operators, game can have 50 or more moves 1-1 0 Complexity: )( mbO m b CS 1571 Intro to AI M. Hauskrecht Solution to the complexity problem Two solutions: 1. Dynamic pruning of redundant branches of the search tree – identify a provably suboptimal branch of the search tree before it is fully explored – Eliminate the suboptimal branch Procedure: Alpha-Beta pruning 2. Early cutoff of the search tree – uses imperfect minimax value estimate of non-terminal states (positions) 12 CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning • Some branches will never be played by rational players since they include sub-optimal decisions (for either player) CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 13 CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4≥ CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4= 4≤ 14 CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4≤ 6≥4= !! CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4= 6≥4= 4≥ 15 CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4= 6≥4= 4≥ 2≥ CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4= 6≥4= 4≥ 2= 2≤ 16 CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4= 6≥4= 4≥ 2= 2≤ !! CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4= 6≥4= 4≥ 2= 2≤ 5≥ 17 CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4= 6≥4= 4≥ 2= 2≤ 5= 5≤ CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4= 6≥4= 4≥ 2= 2≤ 5= 5≤ 7≥ !! 18 CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4= 6≥4= 5≥ 2= 2≤ 5= 5= 7≥ CS 1571 Intro to AI M. Hauskrecht Alpha beta pruning. Example MAX MAX MIN 4 36 2 2 1 9 35 15 4 7 5 4= 6≥4= 5= 2= 2≤ 5= 5= 7≥ nodes that were never explored !!! 19 CS 1571 Intro to AI M. Hauskrecht Alpha-Beta pruning GOAL GOAL CS 1571 Intro to AI M. Hauskrecht Using minimax value estimates • Idea: – Cutoff the search tree before the terminal state is reached – Use imperfect estimate of the minimax value at the leaves • Evaluation function Heuristic evaluation function MAX MIN Cutoff level 46 4 29 3 2 5 5 5 7 4 3 20 CS 1571 Intro to AI M. Hauskrecht Design of evaluation functions • Heuristic estimate of the value for a sub-tree • Examples of a heuristic functions: – Material advantage in chess, checkers • Gives a value to every piece on the board, its position and combines them – More general feature-based evaluation function • Typically a linear evaluation function: kk wsfwsfwsfsf )()()()( 2211 K++= )( sf i - a feature of a state s iw - feature weight CS 1571 Intro to AI M. Hauskrecht Further extensions to real games • Restricted set of moves to be considered under the cutoff level to reduce branching and improve the evaluation function – E.g., consider only the capture moves in chess … Heuristic estimates","libVersion":"0.2.3","langs":""}