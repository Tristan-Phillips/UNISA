{"path":"UNISA/98906 - BSc Science in Computing/INF3707 - Database Design and Implementation/Unsorted/INF 3707/Additional/INF3707-sql2.pdf","text":"Oracle Database 10g: SQLFundamentals IIElectronic PresentationD17111GC11Production 1.1August 2004D39754®Copyright © 2004, Oracle. All rights reserved.This documentation contains proprietary information of Oracle Corporation. It is provided under a license agreement containing restrictions on use and disclosure and is also protected by copyright law. Reverse engineering of the software is prohibited. If this documentation is delivered to a U.S. Government Agency of the Department of Defense, then it is delivered with Restricted Rights and the following legend is applicable:Restricted Rights LegendUse, duplication or disclosure by the Government is subject to restrictions for commercial computer software and shall be deemed to be Restricted Rights software under Federal law, as set forth in subparagraph (c)(1)(ii) of DFARS 252.227-7013, Rights in Technical Data and Computer Software (October 1988).This material or any portion of it may not be copied in any formor by any means without the express prior written permission of the Education Products group of Oracle Corporation. Any other copying is a violation of copyright law and may result in civil and/or criminal penalties.If this documentation is delivered to a U.S. Government Agency not within the Department of Defense, then it is delivered with “Restricted Rights,” as defined in FAR 52.227-14, Rights in Data-General, including Alternate III (June 1987).The information in this document is subject to change without notice. If you find any problems in the documentation, please report them in writing to Worldwide Education Services, Oracle Corporation, 500Oracle Parkway, Box SB-6, Redwood Shores, CA 94065. Oracle Corporation does not warrantthat this document is error-free.Oracle and all references to Oracle Products are trademarks or registered trademarks of Oracle Corporation.All other products or company names are used for identification purposes only, and may be trademarks of their respective owners.AuthorPriya VennapusaTechnical Contributors and ReviewersBrianBoxxAndrewBranniganZarko CesljasMarjolein DekkersJoel GoodmanNancy GreenbergStefanGrenstadRosita HanomanAngelika KruppChristopher LawlessMalika MarghadiPriyaNathanRuediger SteffanPublisherHemachitra KCopyright © 2004, Oracle. All rights reserved.IntroductionCopyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this lesson, you should be able to do the following:•List the course objectives•Describe the sample tables used in the courseCopyright © 2004, Oracle. All rights reserved.Course ObjectivesAfter completing this course, you should be able to do the following:•Use advanced SQL data retrieval techniques to retrieve data from database tables•Apply advanced techniques in a practice that simulates real lifeCopyright © 2004, Oracle. All rights reserved.Course OverviewIn this course, you will use advanced SQL data retrieval techniques such as:•Datetime functions•ROLLUP, CUBEoperators, and GROUPINGSETS•Hierarchical queries•Correlated subqueries•Multitable inserts•Mergeoperation•External tables•Regular expression usageCopyright © 2004, Oracle. All rights reserved.Course ApplicationEMPLOYEESDEPARTMENTSCOUNTRIESREGIONSLOCATIONSCopyright © 2004, Oracle. All rights reserved.SummaryIn this lesson, you should have learned the following:•The course objectives•The sample tables used in the courseCopyright © 2004, Oracle. All rights reserved.Controlling User AccessCopyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this lesson, you should be able to do the following:•Differentiate system privileges from object privileges•Grant privileges on tables•View privileges in the data dictionary•Grant roles•Distinguish between privileges and rolesCopyright © 2004, Oracle. All rights reserved.Controlling User AccessDatabaseadministratorUsersUsername and passwordPrivilegesCopyright © 2004, Oracle. All rights reserved.Privileges•Database security:–System security–Data security•System privileges: Gaining access to the database•Object privileges: Manipulating the content of the database objects•Schemas: Collection of objects such as tables, views, and sequencesCopyright © 2004, Oracle. All rights reserved.System Privileges•More than 100 privileges are available.•The database administrator has high-level system privileges for tasks such as:–Creating new users–Removing users–Removing tables–Backing up tablesCopyright © 2004, Oracle. All rights reserved.Creating UsersThe DBA creates users with the CREATE USERstatement.CREATE USER HRIDENTIFIED BY HR;User created.CREATE USER userIDENTIFIED BY password;Copyright © 2004, Oracle. All rights reserved.User System Privileges•After a user is created, the DBA can grant specific system privileges to that user.•An application developer, for example, may have the following system privileges:–CREATE SESSION–CREATE TABLE–CREATE SEQUENCE–CREATE VIEW–CREATE PROCEDUREGRANT privilege[, privilege...]TO user [, user| role, PUBLIC...];Copyright © 2004, Oracle. All rights reserved.Granting System PrivilegesThe DBA can grant specific system privileges to a user.GRANT create session, create table, create sequence, create viewTO scott;Grant succeeded.Copyright © 2004, Oracle. All rights reserved.What Is a Role?Allocating privilegeswithout a roleAllocating privilegeswith a rolePrivilegesUsersManagerCopyright © 2004, Oracle. All rights reserved.Creating and Granting Privileges to a Role•Create a role•Grant privileges to a role•Grant a role to usersCREATE ROLE manager;Role created.GRANT create table, create view TO manager; Grant succeeded.GRANT manager TO DE HAAN, KOCHHAR; Grant succeeded.Copyright © 2004, Oracle. All rights reserved.Changing Your Password•The DBA creates your user account and initializes your password.•You can change your password by using the ALTER USERstatement.ALTER USER HR IDENTIFIED BY employ;User altered.Copyright © 2004, Oracle. All rights reserved.Object PrivilegesObject Privilege TableViewSequenceProcedureALTER√√DELETE√√EXECUTE√INDEX√INSERT√√REFERENCES√SELECT√√√UPDATE√√Copyright © 2004, Oracle. All rights reserved.Object Privileges•Object privileges vary from object to object.•An owner has all the privileges on the object.•An owner can give specific privileges on that owner’s object.GRANTobject_priv[(columns)]ONobjectTO{user|role|PUBLIC}[WITH GRANT OPTION];Copyright © 2004, Oracle. All rights reserved.Granting Object Privileges•Grant query privileges on the EMPLOYEEStable.•Grant privileges to update specific columns to users and roles. GRANT selectON employeesTO sue, rich;Grant succeeded.GRANT update (department_name, location_id)ON departmentsTO scott, manager;Grant succeeded.Copyright © 2004, Oracle. All rights reserved.Passing On Your Privileges•Give a user authority to pass along privileges.•Allow all users on the system to query data from Alice’s DEPARTMENTStable.GRANT select, insertON departmentsTO scottWITH GRANT OPTION;Grant succeeded.GRANT selectONalice.departmentsTOPUBLIC;Grant succeeded.Copyright © 2004, Oracle. All rights reserved.Confirming Privileges Granted Data Dictionary ViewDescriptionROLE_SYS_PRIVSSystem privileges granted to rolesROLE_TAB_PRIVSTable privileges granted to rolesUSER_ROLE_PRIVSRoles accessible by the userUSER_TAB_PRIVS_MADEObject privileges granted on the user’s objectsUSER_TAB_PRIVS_RECDObject privileges granted to the userUSER_COL_PRIVS_MADEObject privileges granted on thecolumns of the user’s objectsUSER_COL_PRIVS_RECDObject privileges granted to the user on specific columnsUSER_SYS_PRIVSSystem privileges granted to the userCopyright © 2004, Oracle. All rights reserved.Revoking Object Privileges•You use the REVOKEstatement to revoke privileges granted to other users.•Privileges granted to others through the WITH GRANT OPTIONclause are also revoked.REVOKE {privilege [, privilege...]|ALL}ONobjectFROM {user[, user...]|role|PUBLIC}[CASCADE CONSTRAINTS];Copyright © 2004, Oracle. All rights reserved.Revoking Object PrivilegesAs user Alice, revoke the SELECTand INSERTprivileges given to user Scott on the DEPARTMENTStable.REVOKE select, insertON departmentsFROM scott;Revoke succeeded.Copyright © 2004, Oracle. All rights reserved.SummaryIn this lesson, you should have learned about statements that control access to the database and database objects.StatementActionCREATE USERCreates a user (usually performed by a DBA)GRANTGives other users privileges to access theobjectsCREATE ROLECreates a collection of privileges (usually performed by a DBA)ALTER USERChanges a user’s passwordREVOKERemoves privileges on an object fromusersCopyright © 2004, Oracle. All rights reserved.Practice 1: OverviewThis practice covers the following topics:•Granting other users privileges to your table•Modifying another user’s table through the privileges granted to you•Creating a synonym•Querying the data dictionary views related to privilegesCopyright © 2004, Oracle. All rights reserved.Manage Schema ObjectsCopyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this lesson, you should be able to do the following: •Add constraints•Create indexes•Create indexes using the CREATE TABLEstatement•Creating function-based indexes•Drop columns and set column UNUSED•Perform FLASHBACKoperations•Create and use external tablesCopyright © 2004, Oracle. All rights reserved.The ALTER TABLEStatementUse the ALTER TABLEstatement to:•Add a new column•Modify an existing column•Define a default value for the new column•Drop a columnCopyright © 2004, Oracle. All rights reserved.The ALTER TABLEStatementUse the ALTER TABLEstatement to add, modify, or drop columns.ALTER TABLE tableADD(column datatype [DEFAULT expr][, column datatype]...);ALTER TABLE tableMODIFY(column datatype [DEFAULT expr][, column datatype]...);ALTER TABLE tableDROP(column);Copyright © 2004, Oracle. All rights reserved.Adding a Column•You use the ADDclause to add columns.•The new column becomes the last column.…ALTER TABLE dept80ADD(job_id VARCHAR2(9));Table altered.Copyright © 2004, Oracle. All rights reserved.Modifying a Column•You can change a column’s data type, size, and default value.•A change to the default value affects only subsequent insertions to the table.ALTER TABLEdept80MODIFY(last_name VARCHAR2(30));Table altered.Copyright © 2004, Oracle. All rights reserved.Dropping a ColumnUse the DROP COLUMNclause to drop columns you no longer need from the table.ALTER TABLE dept80DROP COLUMN job_id; Table altered.Copyright © 2004, Oracle. All rights reserved.ALTER TABLE<table_name>SET UNUSED(<column_name>);ALTER TABLE <table_name>SET UNUSED COLUMN <column_name>;The SET UNUSEDOption•You use the SET UNUSEDoption to mark one or more columns as unused.•You use the DROP UNUSED COLUMNSoption to remove the columns that are marked as unused.ORALTER TABLE <table_name>DROP UNUSED COLUMNS;Copyright © 2004, Oracle. All rights reserved.Adding a Constraint SyntaxUse the ALTER TABLEstatement to:•Add or drop a constraint, but not modify its structure•Enable or disable constraints•Add a NOT NULLconstraint by using the MODIFYclauseALTER TABLE<table_name>ADD [CONSTRAINT <constraint_name>] type (<column_name>);Copyright © 2004, Oracle. All rights reserved.ALTER TABLE emp2modify employee_id Primary Key;Table altered.Adding a ConstraintAdd a FOREIGN KEYconstraint to the EMP2table indicating that a manager must already exist as a valid employee in the EMP2table.ALTER TABLE emp2ADD CONSTRAINT emp_mgr_fk FOREIGN KEY(manager_id) REFERENCES emp2(employee_id);Table altered.Copyright © 2004, Oracle. All rights reserved.ON DELETE CASCADEDelete child rows when a parent key is deleted.ALTER TABLE Emp2 ADD CONSTRAINT emp_dt_fk FOREIGN KEY (Department_id) REFERENCES departments ON DELETE CASCADE); Table altered.Copyright © 2004, Oracle. All rights reserved.Deferring ConstraintsConstraints can have the following attributes:•DEFERRABLEor NOT DEFERRABLE •INITIALLY DEFERREDor INITIALLY IMMEDIATEALTER TABLE dept2ADD CONSTRAINT dept2_id_pk PRIMARY KEY (department_id)DEFERRABLE INITIALLY DEFERREDALTER SESSION SET CONSTRAINTS= IMMEDIATESET CONSTRAINTS dept2_id_pk IMMEDIATEDeferring constraint on creationChanging all constraints for a sessionChanging a specific constraint attributeCopyright © 2004, Oracle. All rights reserved.Dropping a Constraint•Remove the manager constraint from the EMP2table.•Remove the PRIMARY KEYconstraint on the DEPT2table and drop the associated FOREIGN KEYconstraint on the EMP2.DEPARTMENT_IDcolumn.ALTER TABLE emp2DROP CONSTRAINT emp_mgr_fk;Table altered.ALTER TABLE dept2DROP PRIMARY KEY CASCADE;Table altered.Copyright © 2004, Oracle. All rights reserved.Disabling Constraints•Execute the DISABLEclause of the ALTERTABLEstatement to deactivate an integrity constraint.•Apply the CASCADEoption to disable dependent integrity constraints.ALTER TABLEemp2DISABLE CONSTRAINT emp_dt_fk;Table altered.Copyright © 2004, Oracle. All rights reserved.Enabling Constraints•Activate an integrity constraint currently disabled in the table definition by using the ENABLEclause. •A UNIQUEindex is automatically created if you enable a UNIQUEkey or PRIMARY KEYconstraint.ALTER TABLEemp2ENABLE CONSTRAINTemp_dt_fk;Table altered.Copyright © 2004, Oracle. All rights reserved.Cascading Constraints•The CASCADE CONSTRAINTSclause is used along with the DROP COLUMNclause.••TThe CASCADE CONSTRAINTSclause drops all referential integrity constraints that refer to the primary and unique keys defined on the dropped columns.•The CASCADE CONSTRAINTSclause also drops all multicolumn constraints defined on the dropped columns.Copyright © 2004, Oracle. All rights reserved.Cascading ConstraintsExample:ALTER TABLE emp2 DROP COLUMN employee_id CASCADE CONSTRAINTS;Table altered.ALTER TABLE test1DROP (pk, fk, col1) CASCADE CONSTRAINTS;Table altered.Copyright © 2004, Oracle. All rights reserved.Overview of IndexesIndexes are created:•Automatically–PRIMARY KEYcreation–UNIQUE KEYcreation•Manually–CREATE INDEXstatement–CREATE TABLEstatementCopyright © 2004, Oracle. All rights reserved.CREATEINDEXwith CREATETABLEStatementCREATE TABLE NEW_EMP(employee_id NUMBER(6)PRIMARY KEY USING INDEX(CREATE INDEX emp_id_idx ONNEW_EMP(employee_id)),first_name VARCHAR2(20),last_name VARCHAR2(25));Table created.SELECT INDEX_NAME, TABLE_NAME FROM USER_INDEXESWHERE TABLE_NAME = 'NEW_EMP';Copyright © 2004, Oracle. All rights reserved.CREATE INDEX upper_dept_name_idxON dept2(UPPER(department_name));Index created.SELECT *FROM dept2WHERE UPPER(department_name) = 'SALES';Function-Based Indexes•A function-based index is based on expressions. •The index expression is built from table columns, constants, SQL functions, and user-defined functions.Copyright © 2004, Oracle. All rights reserved.Removing an Index•Remove an index from the data dictionary by using the DROP INDEXcommand.•Remove the UPPER_DEPT_NAME_IDXindex from the data dictionary.•To drop an index, you must be the owner of the index or have the DROP ANY INDEXprivilege.DROP INDEX upper_dept_name_idx;Index dropped.DROP INDEX index;Copyright © 2004, Oracle. All rights reserved.DROP TABLE … PURGEDROP TABLE dept80 PURGE;Copyright © 2004, Oracle. All rights reserved.The FLASHBACK TABLEStatement •Repair tool for accidental table modifications–Restores a table to an earlier point in time–Benefits: Ease of use, availability, fast execution–Performed in place•Syntax:FLASHBACK TABLE[schema.]table[,[ schema.]table ]...TO { TIMESTAMP | SCN } expr[ { ENABLE | DISABLE } TRIGGERS ];Copyright © 2004, Oracle. All rights reserved.The FLASHBACK TABLEStatement DROP TABLE emp2;Table droppedFLASHBACK TABLE emp2 TO BEFORE DROP;Flashback complete…SELECT original_name, operation, droptime, FROM recyclebin;Copyright © 2004, Oracle. All rights reserved.External TablesCopyright © 2004, Oracle. All rights reserved.Creating a Directory for the External TableCreate a DIRECTORYobject that corresponds to the directory on the file system where the external data source resides.CREATE OR REPLACE DIRECTORY emp_dir AS '/…/emp_dir'; GRANT READ ON DIRECTORY emp_dir TO hr;Copyright © 2004, Oracle. All rights reserved.Creating an External TableCREATE TABLE <table_name> ( <col_name> <datatype>, … ) ORGANIZATION EXTERNAL (TYPE <access_driver_type> DEFAULT DIRECTORY <directory_name>ACCESS PARAMETERS (… ) ) LOCATION ('<location_specifier>') ) REJECT LIMIT [0| <number> | UNLIMITED]; Copyright © 2004, Oracle. All rights reserved.Creating an External Table Using ORACLE_LOADERCREATE TABLEoldemp(fnamechar(25),lnameCHAR(25))ORGANIZATION EXTERNAL(TYPE ORACLE_LOADERDEFAULT DIRECTORY emp_dirACCESS PARAMETERS(RECORDS DELIMITED BY NEWLINENOBADFILE NOLOGFILE FIELDS TERMINATED BY ',' (fnamePOSITION ( 1:20) CHAR,lnamePOSITION (22:41) CHAR))LOCATION ('emp.dat'))PARALLEL 5REJECT LIMIT 200;Table created.Copyright © 2004, Oracle. All rights reserved.Querying External TablesSELECT * FROM oldempemp.datOLDEMPCopyright © 2004, Oracle. All rights reserved.SummaryIn this lesson, you should have learned how to:•Add constraints•Create indexes•Create a primary key constraint using an index•Create indexes using the CREATE TABLEstatement•Creating function-based indexes•Drop columns and set column UNUSED•Perform FLASHBACKoperations•Create and use external tablesCopyright © 2004, Oracle. All rights reserved.Practice 2: OverviewThis practice covers the following topics:•Altering tables•Adding columns•Dropping columns•Creating indexes•Creating external tablesCopyright © 2004, Oracle. All rights reserved.Manipulating Large Data SetsCopyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this lesson, you should be able to do the following:•Manipulate data using subqueries•Describe the features of multitable inserts•Use the following types of multitable inserts–Unconditional INSERT–Pivoting INSERT–Conditional ALL INSERT–Conditional FIRST INSERT•Merge rows in a table•Track the changes to data over a period of timeCopyright © 2004, Oracle. All rights reserved.Using Subqueries to Manipulate DataYou can use subqueries in DML statements to:•Copy data from one table to another•Retrieve data from an inline view•Update data in one table based on the values of another table•Delete rows from one table based on rows in a another tableCopyright © 2004, Oracle. All rights reserved.Copying Rows from Another Table•Write your INSERTstatement with a subquery.•Do not use the VALUESclause.•Match the number of columns in the INSERTclause with that in the subquery.INSERT INTO sales_reps(id, name, salary, commission_pct)SELECT employee_id, last_name, salary, commission_pctFROM employeesWHERE job_id LIKE '%REP%';33 rows created.Copyright © 2004, Oracle. All rights reserved.Inserting Using a Subquery as a TargetINSERT INTO(SELECT employee_id, last_name,email, hire_date, job_id, salary, department_idFROM empl3WHERE department_id = 50) VALUES (99999, 'Taylor', 'DTAYLOR',TO_DATE('07-JUN-99', 'DD-MON-RR'),'ST_CLERK', 5000, 50);1 row created.Copyright © 2004, Oracle. All rights reserved.Inserting Using a Subquery as a TargetVerify the results.SELECT employee_id, last_name, email, hire_date, job_id, salary, department_idFROM employeesWHERE department_id = 50;…Copyright © 2004, Oracle. All rights reserved.SELECT a.last_name, a.salary, a.department_id, b.salavgFROM employees a, (SELECT department_id, AVG(salary) salavgFROM employeesGROUP BY department_id) bWHERE a.department_id = b.department_idAND a.salary > b.salavg;Retrieving Data with a Subquery as Source…Copyright © 2004, Oracle. All rights reserved.UPDATE empl3SET job_id = (SELECT job_id FROM employees WHERE employee_id = 205), salary = (SELECT salary FROM employees WHERE employee_id = 168)WHERE employee_id = 114;1 row updated.Updating Two Columns with a SubqueryUpdate the job and salary of employee 114 to match the job of employee 205 and the salary of employee 168.Copyright © 2004, Oracle. All rights reserved.UPDATE empl3SET department_id = (SELECT department_idFROM employeesWHERE employee_id = 100)WHERE job_id = (SELECT job_idFROM employeesWHERE employee_id = 200);1 row updated.Updating Rows Based on Another TableUse subqueries in UPDATEstatements to update rows in a table based on values from another table.Copyright © 2004, Oracle. All rights reserved.DELETE FROM empl3WHERE department_id =(SELECT department_idFROM departmentsWHERE department_name LIKE '%Public%');1 row deleted.Deleting Rows Based on Another TableUse subqueries in DELETEstatements to remove rows from a table based on values from another table.Copyright © 2004, Oracle. All rights reserved.Using the WITH CHECK OPTIONKeyword on DML Statements•A subquery is used to identify the table and columns of the DML statement.•The WITH CHECK OPTIONkeyword prohibits you from changing rows that are not in the subquery.INSERT INTO (SELECT employee_id, last_name, email,hire_date, job_id, salaryFROM empl3 WHERE department_id = 50 WITH CHECK OPTION)VALUES (99998, 'Smith', 'JSMITH',TO_DATE('07-JUN-99', 'DD-MON-RR'), 'ST_CLERK', 5000);INSERT INTO*ERROR at line 1:ORA-01402: view WITH CHECK OPTION where-clause violationCopyright © 2004, Oracle. All rights reserved.Overview of the Explicit Default Feature•With the explicit default feature, you can use the DEFAULTkeyword as a column value where the column default is desired.•The addition of this feature is for compliance with the SQL:1999 standard.•This allows the user to control where and when the default value should be applied to data.•Explicit defaults can be used in INSERTand UPDATEstatements.Copyright © 2004, Oracle. All rights reserved.Using Explicit Default Values•DEFAULTwith INSERT:•DEFAULTwith UPDATE:INSERT INTO deptm3(department_id, department_name, manager_id) VALUES (300, 'Engineering', DEFAULT);UPDATE deptm3SET manager_id = DEFAULTWHERE department_id = 10;Copyright © 2004, Oracle. All rights reserved.Overview of Multitable INSERTStatementsINSERT ALLINTO table_a VALUES(…,…,…)INTO table_b VALUES(…,…,…)INTO table_c VALUES(…,…,…)SELECT … FROM sourcetab WHERE …;Table_aTable_bTable_cCopyright © 2004, Oracle. All rights reserved.Overview of Multitable INSERTStatements•The INSERT…SELECTstatement can be used to insert rows into multiple tables as part of a single DML statement.•Multitable INSERTstatements can be used in data warehousing systems to transfer data from one or more operational sources to a set of target tables.•They provide significant performance improvement over:–Single DML versus multiple INSERT…SELECTstatements–Single DML versus a procedure to do multiple inserts using IF...THENsyntaxCopyright © 2004, Oracle. All rights reserved.Types of Multitable INSERTStatementsThe different types of multitable INSERTstatements are:•Unconditional INSERT•Conditional ALLINSERT•Conditional FIRSTINSERT•Pivoting INSERTCopyright © 2004, Oracle. All rights reserved.Multitable INSERTStatements•Syntax•conditional_insert_clauseINSERT [ALL] [conditional_insert_clause][insert_into_clause values_clause] (subquery)[ALL] [FIRST][WHEN condition THEN] [insert_into_clause values_clause][ELSE] [insert_into_clause values_clause] Copyright © 2004, Oracle. All rights reserved.Unconditional INSERTALL•Select the EMPLOYEE_ID, HIRE_DATE, SALARY, and MANAGER_IDvalues from the EMPLOYEEStable for those employees whose EMPLOYEE_IDis greater than 200.•Insert these values into the SAL_HISTORYand MGR_HISTORYtables using a multitable INSERT.INSERT ALLINTO sal_history VALUES(EMPID,HIREDATE,SAL)INTO mgr_history VALUES(EMPID,MGR,SAL)SELECT employee_id EMPID, hire_date HIREDATE, salary SAL, manager_id MGR FROM employeesWHERE employee_id > 200;12 rows created.Copyright © 2004, Oracle. All rights reserved.Conditional INSERTALL•Select the EMPLOYEE_ID, HIRE_DATE, SALARY, and MANAGER_IDvalues from the EMPLOYEEStable for those employees whose EMPLOYEE_IDis greater than 200.•If the SALARYis greater than $10,000, insert these values into the SAL_HISTORYtable using a conditional multitable INSERTstatement.•If the MANAGER_IDis greater than 200, insert these values into the MGR_HISTORYtable using a conditional multitable INSERTstatement.Copyright © 2004, Oracle. All rights reserved.Conditional INSERTALLINSERT ALLWHEN SAL > 10000 THENINTO sal_history VALUES(EMPID,HIREDATE,SAL)WHEN MGR > 200 THEN INTO mgr_history VALUES(EMPID,MGR,SAL)SELECT employee_id EMPID,hire_date HIREDATE, salary SAL, manager_id MGR FROM employeesWHERE employee_id > 200;4 rows created.Copyright © 2004, Oracle. All rights reserved.Conditional INSERT FIRST•Select the DEPARTMENT_ID, SUM(SALARY), and MAX(HIRE_DATE)from the EMPLOYEEStable.•If the SUM(SALARY)is greater than $25,000, then insert these values into the SPECIAL_SAL, using a conditional FIRSTmultitable INSERT.•If the first WHENclause evaluates to true, then the subsequent WHENclauses for this row should be skipped.•For the rows that do not satisfy the first WHENcondition, insert into the HIREDATE_HISTORY_00, HIREDATE_HISTORY_99, or HIREDATE_HISTORYtables, based on the value in the HIRE_DATEcolumn using a conditional multitable INSERT.Copyright © 2004, Oracle. All rights reserved.Conditional INSERT FIRSTINSERT FIRSTWHEN SAL > 25000 THENINTO special_sal VALUES(DEPTID, SAL)WHEN HIREDATE like ('%00%') THENINTO hiredate_history_00 VALUES(DEPTID,HIREDATE)WHEN HIREDATE like ('%99%') THENINTOhiredate_history_99VALUES(DEPTID,HIREDATE)ELSEINTO hiredate_history VALUES(DEPTID, HIREDATE)SELECT department_id DEPTID, SUM(salary) SAL,MAX(hire_date) HIREDATEFROM employeesGROUP BY department_id;12 rows created.Copyright © 2004, Oracle. All rights reserved.Pivoting INSERT•Suppose you receive a set of sales records from a nonrelational database table, SALES_SOURCE_DATA, in the following format:EMPLOYEE_ID, WEEK_ID, SALES_MON, SALES_TUE, SALES_WED, SALES_THUR, SALES_FRI•You want to store these records in the SALES_INFOtable in a more typical relational format:EMPLOYEE_ID, WEEK, SALES•Using a pivoting INSERT, convert the set of sales records from the nonrelational database table to relational format.Copyright © 2004, Oracle. All rights reserved.Pivoting INSERTINSERT ALLINTO sales_info VALUES (employee_id,week_id,sales_MON)INTO sales_info VALUES (employee_id,week_id,sales_TUE)INTO sales_info VALUES (employee_id,week_id,sales_WED)INTO sales_info VALUES (employee_id,week_id,sales_THUR)INTO sales_info VALUES (employee_id,week_id, sales_FRI)SELECT EMPLOYEE_ID, week_id, sales_MON, sales_TUE,sales_WED, sales_THUR,sales_FRI FROM sales_source_data;5 rows created.Copyright © 2004, Oracle. All rights reserved.The MERGEStatement•Provides the ability to conditionally update or insert data into a database table•Performs an UPDATEif the row exists, and an INSERTif it is a new row:–Avoids separate updates–Increases performance and ease of use–Is useful in data warehousing applicationsCopyright © 2004, Oracle. All rights reserved.The MERGEStatement SyntaxYou can conditionally insert or update rows in a table by using the MERGEstatement.MERGE INTO table_nametable_aliasUSING (table|view|sub_query) aliasON (join condition)WHEN MATCHED THENUPDATE SET col1 = col_val1,col2 = col2_valWHEN NOT MATCHED THENINSERT (column_list)VALUES (column_values);Copyright © 2004, Oracle. All rights reserved.MERGE INTO empl3 cUSING employees eON (c.employee_id = e.employee_id)WHEN MATCHED THENUPDATE SETc.first_name = e.first_name,c.last_name = e.last_name,...c.department_id = e.department_idWHEN NOT MATCHED THENINSERT VALUES(e.employee_id, e.first_name, e.last_name,e.email, e.phone_number, e.hire_date, e.job_id,e.salary, e.commission_pct, e.manager_id, e.department_id);Merging RowsInsert or update rows in the EMPL3table to match the EMPLOYEEStable.Copyright © 2004, Oracle. All rights reserved.Merging RowsMERGE INTO empl3 cUSING employees eON (c.employee_id = e.employee_id)WHEN MATCHED THENUPDATE SET...WHEN NOT MATCHED THENINSERT VALUES...;TRUNCATE TABLE empl3;SELECT * FROM empl3;no rows selectedSELECT * FROM empl3;107 rows selected.Copyright © 2004, Oracle. All rights reserved.Tracking Changes in DataVersions of retrieved rowsSELECT…Copyright © 2004, Oracle. All rights reserved.Example of the Flashback Version QuerySELECT salary FROM employees3 WHERE employee_id = 107;UPDATE employees3 SET salary = salary * 1.30WHERE employee_id = 107;COMMIT;SELECT salary FROM employees3VERSIONS BETWEEN SCN MINVALUE AND MAXVALUEWHERE employee_id = 107;123Copyright © 2004, Oracle. All rights reserved.The VERSIONS BETWEENClauseSELECT versions_starttime \"START_DATE\", versions_endtime \"END_DATE\", salary FROM employeesVERSIONS BETWEEN SCN MINVALUE AND MAXVALUE WHERE last_name = 'Lorentz';Copyright © 2004, Oracle. All rights reserved.SummaryIn this lesson, you should have learned how to:•Use DML statements and control transactions•Describe the features of multitable inserts•Use the following types of multitable inserts–Unconditional INSERT–Pivoting INSERT–Conditional ALL INSERT–Conditional FIRST INSERT•Merge rows in a table•Manipulate data using subqueries•Track the changes to data over a period of time Copyright © 2004, Oracle. All rights reserved.Practice 3: OverviewThis practice covers the following topics:•Performing multitable INSERTs•Performing MERGEoperations•Tracking row versionsCopyright © 2004, Oracle. All rights reserved.Generating Reports by GroupingRelated DataCopyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this lesson, you should be able to do the following:•Use the ROLLUPoperation to producesubtotal values•Use the CUBEoperation to produce cross-tabulation values•Use the GROUPINGfunction to identify the row values created by ROLLUPor CUBE•Use GROUPINGSETSto produce a single result setCopyright © 2004, Oracle. All rights reserved.Review of Group Functions•Group functions operate on sets of rows to give one result per group.•Example:SELECT[column,] group_function(column). . .FROMtable[WHEREcondition][GROUP BYgroup_by_expression][ORDER BYcolumn];SELECT AVG(salary), STDDEV(salary),COUNT(commission_pct),MAX(hire_date)FROM employeesWHERE job_id LIKE 'SA%';Copyright © 2004, Oracle. All rights reserved.Review of the GROUPBYClause•Syntax:•Example:SELECT department_id, job_id, SUM(salary), COUNT(employee_id)FROM employeesGROUP BY department_id, job_id ;SELECT[column,]FROMtable[WHEREcondition][GROUP BYgroup_by_expression][ORDER BYcolumn];group_function(column). . .Copyright © 2004, Oracle. All rights reserved.Review of the HAVINGClause•Use the HAVINGclause to specify which groups are to be displayed.•You further restrict the groups on the basis of a limiting condition.SELECT[column,] group_function(column)... FROMtable[WHEREcondition][GROUP BYgroup_by_expression][HAVING having_expression] [ORDER BYcolumn];Copyright © 2004, Oracle. All rights reserved.GROUPBYwith ROLLUPandCUBEOperators•Use ROLLUPor CUBEwith GROUPBYto produce superaggregate rows by cross-referencing columns.•ROLLUPgrouping produces a result set containing the regular grouped rows and the subtotal values.•CUBEgrouping produces a result set containing the rows from ROLLUPand cross-tabulation rows.Copyright © 2004, Oracle. All rights reserved.ROLLUPOperator•ROLLUPis an extension to the GROUPBYclause.•Use the ROLLUPoperation to produce cumulative aggregates, such as subtotals.SELECT[column,] group_function(column). . .FROMtable[WHEREcondition][GROUP BY[ROLLUP] group_by_expression][HAVING having_expression];[ORDER BYcolumn];Copyright © 2004, Oracle. All rights reserved.ROLLUPOperator: ExampleSELECT department_id, job_id, SUM(salary)FROM employees WHERE department_id < 60GROUP BY ROLLUP(department_id, job_id);312Copyright © 2004, Oracle. All rights reserved.CUBEOperator•CUBEis an extension to the GROUPBYclause.•You can use the CUBEoperator to produce cross-tabulation values with a single SELECTstatement.SELECT[column,] group_function(column)...FROMtable[WHEREcondition][GROUP BY[CUBE] group_by_expression][HAVING having_expression][ORDER BYcolumn];Copyright © 2004, Oracle. All rights reserved.CUBEOperator: ExampleSELECT department_id, job_id, SUM(salary)FROM employees WHERE department_id < 60GROUP BY CUBE (department_id, job_id) ;1234Copyright © 2004, Oracle. All rights reserved.GROUPINGFunctionThe GROUPINGfunction: •Is used with either the CUBEor ROLLUPoperator•Is used to find the groups forming the subtotal in a row•Is used to differentiate stored NULLvalues from NULLvalues created by ROLLUPor CUBE•Returns 0 or 1SELECT [column,] group_function(column) .. ,GROUPING(expr)FROMtable[WHERE condition][GROUP BY [ROLLUP][CUBE] group_by_expression][HAVING having_expression][ORDER BY column];Copyright © 2004, Oracle. All rights reserved.GROUPINGFunction: ExampleSELECT department_id DEPTID, job_id JOB, SUM(salary),GROUPING(department_id) GRP_DEPT,GROUPING(job_id) GRP_JOBFROM employeesWHERE department_id < 50GROUP BY ROLLUP(department_id, job_id);123Copyright © 2004, Oracle. All rights reserved.GROUPINGSETS•GROUPINGSETSsyntax is used to define multiple groupings in the same query.•All groupings specified in the GROUPINGSETSclause are computed and the results of individual groupings are combined with a UNIONALLoperation.•Grouping set efficiency:–Only one pass over the base table is required.–There is no need to write complex UNION statements.–The more elements GROUPINGSETShas, the greater the performance benefit.Copyright © 2004, Oracle. All rights reserved.GROUPINGSETS: ExampleSELECT department_id, job_id, manager_id,avg(salary)FROM employeesGROUP BY GROUPING SETS ((department_id,job_id), (job_id,manager_id));…1…2Copyright © 2004, Oracle. All rights reserved.Composite Columns•A composite column is a collection of columns that are treated as a unit.ROLLUP(a,,d)•Use parentheses within the GROUPBYclause to group columns, so that they are treated as a unit while computing ROLLUPor CUBEoperations.•When used with ROLLUPor CUBE, composite columns would require skipping aggregation across certain levels.(b,c)Copyright © 2004, Oracle. All rights reserved.Composite Columns: ExampleSELECT department_id, job_id, manager_id, SUM(salary)FROM employees GROUP BY ROLLUP( department_id,(job_id, manager_id));…2341Copyright © 2004, Oracle. All rights reserved.Concatenated Groupings•Concatenated groupings offer a concise way to generate useful combinations of groupings.•To specify concatenated grouping sets, you separate multiple grouping sets, ROLLUP, and CUBEoperations with commas so that the Oracle server combines them into a single GROUPBYclause.•The result is a cross-product of groupings from each grouping set.GROUP BY GROUPING SETS(a, b), GROUPING SETS(c, d)Copyright © 2004, Oracle. All rights reserved.………Concatenated Groupings: ExampleSELECT department_id, job_id, manager_id, SUM(salary)FROM employeesGROUP BY department_id,ROLLUP(job_id),CUBE(manager_id);12345Copyright © 2004, Oracle. All rights reserved.SummaryIn this lesson, you should have learned how to use the:•ROLLUPoperation to produce subtotal values•CUBEoperation to produce cross-tabulation values•GROUPINGfunction to identify the row values created by ROLLUPor CUBE•GROUPINGSETSsyntax to define multiple groupings in the same query•GROUPBYclause to combine expressions in various ways:–Composite columns–Concatenated grouping setsCopyright © 2004, Oracle. All rights reserved.Practice 4: OverviewThis practice covers using:•ROLLUPoperators•CUBEoperators•GROUPINGfunctions•GROUPINGSETSCopyright © 2004, Oracle. All rights reserved.Managing Data in Different Time ZonesCopyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this lesson, you should be able to use the following datetime functions:•TZ_OFFSET•FROM_TZ•TO_TIMESTAMP•TO_TIMESTAMP_TZ•TO_YMINTERVAL•TO_DSINTERVAL •CURRENT_DATE•CURRENT_TIMESTAMP•LOCALTIMESTAMP•DBTIMEZONE•SESSIONTIMEZONE•EXTRACTCopyright © 2004, Oracle. All rights reserved.Time Zones-08:00The image represents the time for each time zone when Greenwich time is 12:00.-05:00+02:00+10:00+07:00Copyright © 2004, Oracle. All rights reserved.TIME_ZONESession ParameterTIME_ZONEmay be set to:•An absolute offset•Database time zone•OS local time zone•A named regionALTER SESSION SET TIME_ZONE = '-05:00';ALTER SESSION SET TIME_ZONE = dbtimezone;ALTER SESSION SET TIME_ZONE = local;ALTER SESSION SET TIME_ZONE = 'America/New_York';Copyright © 2004, Oracle. All rights reserved.CURRENT_DATE, CURRENT_TIMESTAMP,and LOCALTIMESTAMP•CURRENT_DATE –Returns the current date from the system–Has a data type of DATE•CURRENT_TIMESTAMP–Returns the current timestamp from the system–Has a data type of TIMESTAMP WITH TIME ZONE•LOCALTIMESTAMP–Returns the current timestamp from user session–Has a data type of TIMESTAMPCopyright © 2004, Oracle. All rights reserved.CURRENT_DATEDisplay the current date and time in the session’s time zone.ALTER SESSION SET TIME_ZONE = '-8:0';SELECT SESSIONTIMEZONE, CURRENT_DATE FROM DUAL;ALTER SESSION SET TIME_ZONE = '-5:0';SELECT SESSIONTIMEZONE, CURRENT_DATE FROM DUAL;ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MON-YYYY HH24:MI:SS';Copyright © 2004, Oracle. All rights reserved.CURRENT_TIMESTAMPDisplay the current date and fractional time in the session’s time zone.ALTER SESSION SET TIME_ZONE = '-8:0';SELECT SESSIONTIMEZONE, CURRENT_TIMESTAMP FROM DUAL;ALTER SESSION SET TIME_ZONE = '-5:0';SELECT SESSIONTIMEZONE, CURRENT_TIMESTAMP FROM DUAL;Copyright © 2004, Oracle. All rights reserved.LOCALTIMESTAMP•Display the current date and time in the session’s time zone in a value of TIMESTAMPdata type.•LOCALTIMESTAMPreturns a TIMESTAMPvalue, whereas CURRENT_TIMESTAMPreturns a TIMESTAMP WITH TIME ZONEvalue.ALTER SESSION SET TIME_ZONE = '-5:0';SELECT CURRENT_TIMESTAMP, LOCALTIMESTAMP FROM DUAL;ALTER SESSION SET TIME_ZONE = '-8:0';SELECT CURRENT_TIMESTAMP, LOCALTIMESTAMP FROM DUAL;Copyright © 2004, Oracle. All rights reserved.DBTIMEZONEand SESSIONTIMEZONE•Display the value of the database time zone.•Display the value of the session’s time zone.SELECT DBTIMEZONE FROM DUAL;SELECT SESSIONTIMEZONE FROM DUAL;Copyright © 2004, Oracle. All rights reserved.TIMESTAMPData Type•The TIMESTAMPdata type is an extension of the DATEdata type.•It stores the year, month, and day of the DATEdata type, plus hour, minute, and second values,as well as the fractional second value.•Variations in TIMESTAMP are:–TIMESTAMP[(fractional_seconds_precision)]_–TIMESTAMP [(fractional_seconds_precision)]_WITH TIME ZONE–TIMESTAMP [(fractional_seconds_precision)]_WITH LOCAL TIME ZONECopyright © 2004, Oracle. All rights reserved.TIMESTAMPData TypesSame as the TIMESTAMPdata type; also includes a a time zone offset in its valueTIMESTAMP WITH LOCAL TIME ZONESame as the TIMESTAMPdata type; also includes:TimeZone_Hour, and TimeZone_Minute or TimeZone_RegionTIMESTAMP WITH TIME ZONEYear, Month, Day, Hour, Minute, Second with fractional secondsTIMESTAMPFieldsData TypeCopyright © 2004, Oracle. All rights reserved.TIMESTAMPFieldsTIMEZONE_MINUTE–12 to 14TIMEZONE_HOUR00 to 59.9(N) where 9(N) is precisionSECOND00 to 59MINUTE00 to 23HOUR01 to 31DAY01 to 12MONTH–4712 to 9999 (excluding year 0)YEARValid ValuesDatetime Field00 to 59Copyright © 2004, Oracle. All rights reserved.Difference between DATEand TIMESTAMP--when hire_date is of type DATESELECT hire_date FROM emp5;ALTER TABLE emp5MODIFY hire_date TIMESTAMP;SELECT hire_date FROM emp5;BA……Copyright © 2004, Oracle. All rights reserved.TIMESTAMP WITH TIME ZONEData Type•TIMESTAMP WITH TIME ZONEis a variant of TIMESTAMPthat includes a time zone displacement in its value. •The time zone displacement is the difference,in hours and minutes, between local time and UTC.•It is specified as:TIMESTAMP[(fractional_seconds_precision)] WITH TIME ZONECopyright © 2004, Oracle. All rights reserved.TIMESTAMP WITH TIMEZONE: ExampleCREATE TABLE web_orders (ord_id number primary key, order_date TIMESTAMP WITH TIME ZONE);INSERT INTO web_orders values (ord_seq.nextval, current_date);SELECT * FROM web_orders;Copyright © 2004, Oracle. All rights reserved.TIMESTAMP WITH LOCAL TIMEZONE•TIMESTAMP WITH LOCAL TIME ZONEis another variant of TIMESTAMPthat includes a time zone displacement in its value.•Data stored in the database is normalized to the database time zone.•The time zone displacement is not stored as part of the column data.•The Oracle database returns the data in the user’s local session time zone. •TheTIMESTAMP WITH LOCAL TIME ZONEdata type is specified as follows:TIMESTAMP[(fractional_seconds_precision)] WITH LOCAL TIME ZONECopyright © 2004, Oracle. All rights reserved.TIMESTAMP WITH LOCAL TIMEZONE: ExampleCREATE TABLE shipping (delivery_time TIMESTAMP WITH LOCAL TIME ZONE);INSERT INTO shipping VALUES(current_timestamp + 2);SELECT * FROM shipping;ALTER SESSION SET TIME_ZONE = 'EUROPE/LONDON';SELECT * FROM shipping;Copyright © 2004, Oracle. All rights reserved.INTERVALData Types•INTERVALdata types are used to store the difference between two datetime values.•There are two classes of intervals: –Year-month–Day-time•The precision of the interval is:–The actual subset of fields that constitutes an interval–Specified in the interval qualifierDays, Hour, Minute, Second with fractional secondsINTERVAL DAY TO SECONDYear, MonthINTERVAL YEAR TO MONTHFieldsData TypeCopyright © 2004, Oracle. All rights reserved.INTERVALFields00 to 59.9(N) where 9(N) is precisionSECOND00 to 59MINUTEHOURDAYMONTHYEARINTERVALField00 to 23Any positive or negative integer00 to 11Any positive or negative integerValid Values for IntervalCopyright © 2004, Oracle. All rights reserved.INTERVAL YEAR TO MONTHData TypeINTERVAL YEAR TO MONTHstores a period of time using the YEARand MONTHdatetime fields. •For example:INTERVAL YEAR [(year_precision)] TO MONTH'312-2' assigned to INTERVAL YEAR(3) TO MONTHIndicates an interval of 312 years and 2 months'312-0' assigned to INTERVAL YEAR(3) TO MONTHIndicates 312 years and 0 months'0-3' assigned to INTERVAL YEAR TO MONTHIndicates an interval of 3 monthsCopyright © 2004, Oracle. All rights reserved.INTERVAL YEAR TO MONTH: ExampleCREATE TABLE warranty (prod_id number, warranty_time INTERVAL YEAR(3) TO MONTH);INSERT INTO warranty VALUES (123, INTERVAL '8' MONTH);INSERT INTO warranty VALUES (155, INTERVAL '200' YEAR(3));INSERT INTO warranty VALUES (678, '200-11');SELECT * FROM warranty;Copyright © 2004, Oracle. All rights reserved.INTERVAL DAY TO SECONDData TypeINTERVAL DAY TO SECOND (fractional_seconds_precision)stores a period of time in days, hours, minutes, and seconds.•For example:INTERVAL DAY[(day_precision)] TO SecondINTERVAL '6 03:30:16' DAY TO SECONDIndicates an interval of 6 days 3 hours 30 minutes and 16 secondsINTERVAL '6 00:00:00' DAY TO SECONDIndicates an interval of 6 days and 0 hours, 0 minutes and 0 secondsCopyright © 2004, Oracle. All rights reserved.INTERVAL DAY TO SECONDData Type: ExampleCREATE TABLE lab ( exp_id number, test_time INTERVAL DAY(2) TO SECOND);INSERT INTO lab VALUES (100012, '90 00:00:00');INSERT INTO lab VALUES (56098,INTERVAL '6 03:30:16' DAY TO SECOND);SELECT * FROM lab;Copyright © 2004, Oracle. All rights reserved.EXTRACT•Display the YEARcomponent from the SYSDATE.•Display the MONTHcomponent from the HIRE_DATE for those employees whose MANAGER_IDis 100.SELECT EXTRACT (YEAR FROM SYSDATE) FROM DUAL;SELECT last_name, hire_date, EXTRACT (MONTH FROM HIRE_DATE)FROM employeesWHERE manager_id = 100;Copyright © 2004, Oracle. All rights reserved.TZ_OFFSET•Display the time zone offset for the time zone 'US/Eastern'.•Display the time zone offset for the time zone 'Canada/Yukon'.•Display the time zone offset for the time zone 'Europe/London'.SELECT TZ_OFFSET('US/Eastern') FROM DUAL;SELECT TZ_OFFSET('Canada/Yukon') FROM DUAL; SELECT TZ_OFFSET('Europe/London') FROM DUAL; Copyright © 2004, Oracle. All rights reserved.TIMESTAMPConversion Using FROM_TZ•Display the TIMESTAMPvalue '2000-03-2808:00:00'as a TIMESTAMP WITH TIME ZONEvalue.•Display the TIMESTAMPvalue '2000-03-2808:00:00'as a TIMESTAMP WITH TIME ZONEvalue for the time zone region 'Australia/North'.SELECT FROM_TZ(TIMESTAMP '2000-03-28 08:00:00','3:00')FROM DUAL;SELECT FROM_TZ(TIMESTAMP '2000-03-28 08:00:00', 'Australia/North')FROM DUAL;Copyright © 2004, Oracle. All rights reserved.SELECT TO_TIMESTAMP_TZ('1999-12-01 11:00:00 -8:00','YYYY-MM-DD HH:MI:SS TZH:TZM')FROM DUAL;Converting to TIMESTAMPUsing TO_TIMESTAMPand TO_TIMESTAMP_TZ•Display the character string '2000-12-01 11:00:00'as a TIMESTAMPvalue. •Display the character string '1999-12-01 11:00:00-8:00'as a TIMESTAMPWITHTIMEZONEvalue.SELECT TO_TIMESTAMP ('2000-12-01 11:00:00','YYYY-MM-DD HH:MI:SS') FROM DUAL;Copyright © 2004, Oracle. All rights reserved.Time Interval Conversion with TO_YMINTERVALDisplay a date that is one year, two months after the hire date for the employees working in the department with the DEPARTMENT_ID20.SELECT hire_date, hire_date + TO_YMINTERVAL('01-02') ASHIRE_DATE_YMININTERVALFROM employeesWHERE department_id = 20; Copyright © 2004, Oracle. All rights reserved.Using TO_DSINTERVAL: Example TO_DSINTERVAL: Converts a character string to an INTERVAL DAY TO SECONDdata typeSELECT last_name, TO_CHAR(hire_date, 'mm-dd-yy:hh:mi:ss') hire_date, TO_CHAR(hire_date + TO_DSINTERVAL('100 10:00:00'),'mm-dd-yy:hh:mi:ss') hiredate2FROM employees;…Copyright © 2004, Oracle. All rights reserved.Daylight Saving Time•First Sunday in April–Time jumps from 01:59:59 a.m. to 03:00:00 a.m.–Values from 02:00:00 a.m. to 02:59:59 a.m. are not valid.•Last Sunday in October–Time jumps from 02:00:00 a.m. to 01:00:01 a.m.–Values from 01:00:01 a.m. to 02:00:00 a.m. are ambiguous because they are visited twice.Copyright © 2004, Oracle. All rights reserved.SummaryIn this lesson, you should have learned how to use the following functions:•TZ_OFFSET•FROM_TZ•TO_TIMESTAMP•TO_TIMESTAMP_TZ•TO_YMINTERVAL•CURRENT_DATE•CURRENT_TIMESTAMP•LOCALTIMESTAMP•DBTIMEZONE•SESSIONTIMEZONE•EXTRACTCopyright © 2004, Oracle. All rights reserved.Practice 5: OverviewThis practice covers using the datetime functions.Copyright © 2004, Oracle. All rights reserved.Retrieving Data Using Subqueries Copyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this lesson, you should be able to do the following:•Write a multiple-column subquery•Use scalar subqueries in SQL•Solve problems with correlated subqueries•Update and delete rows using correlated subqueries•Use the EXISTSand NOTEXISTSoperators•Use the WITHclauseCopyright © 2004, Oracle. All rights reserved.Multiple-Column SubqueriesMain queryWHERE (MANAGER_ID, DEPARTMENT_ID) INSubquery100 90102 60124 50Each row of the main query is compared to values from a multiple-row and multiple-column subquery.Copyright © 2004, Oracle. All rights reserved.Column ComparisonsColumn comparisons in a multiple-column subquery can be:•Pairwise comparisons•Nonpairwise comparisonsCopyright © 2004, Oracle. All rights reserved.Pairwise Comparison SubqueryDisplay the details of the employees who are managed by the same manager andwork in the same department as the employees with EMPLOYEE_ID199 or 174.SELECTemployee_id, manager_id, department_idFROMemployeesWHERE (manager_id, department_id) IN(SELECT manager_id, department_idFROM employeesWHERE employee_id IN (199,174))ANDemployee_id NOT IN (199,174);Copyright © 2004, Oracle. All rights reserved.Nonpairwise Comparison SubqueryDisplay the details of the employees who are managed by the same manager as the employees with EMPLOYEE_ID174 or 199 andwork in the same department as the employees with EMPLOYEE_ID174 or 199.SELECT employee_id, manager_id, department_idFROM employeesWHERE manager_id IN (SELECT manager_idFROM employeesWHERE employee_id IN (174,199))AND department_id IN (SELECT department_idFROM employeesWHERE employee_id IN (174,199))ANDemployee_id NOT IN(174,199);Copyright © 2004, Oracle. All rights reserved.Scalar Subquery Expressions•A scalar subquery expression is a subquery thatreturns exactly one column value from one row.•Scalar subqueries can be used in:–Condition and expression part of DECODEand CASE–All clauses of SELECTexcept GROUPBYCopyright © 2004, Oracle. All rights reserved.Scalar Subqueries: Examples•Scalar subqueries in CASEexpressionsSELECT employee_id, last_name,(CASEWHEN department_id =(SELECT department_id FROM departmentsWHERE location_id = 1800)THEN 'Canada' ELSE 'USA' END) locationFROM employees;SELECT employee_id, last_nameFROM employees eORDER BY (SELECT department_nameFROM departments dWHERE e.department_id = d.department_id);20•Scalar subqueries in ORDER BYclauseCopyright © 2004, Oracle. All rights reserved.Correlated SubqueriesCorrelated subqueries are used for row-by-row processing. Each subquery is executed once for every row of the outer query.GETcandidate row from outer queryEXECUTEinner query using candidate row valueUSEvalues from inner query to qualify or disqualify candidate rowCopyright © 2004, Oracle. All rights reserved.Correlated SubqueriesThe subquery references a column from a table in the parent query.SELECT column1, column2, ...FROM table1WHERE column1operator (SELECT column1, column2FROM table2WHERE expr1= .expr2);outerouterCopyright © 2004, Oracle. All rights reserved.SELECT last_name, salary, department_idFROM employees outerWHERE salary >(SELECT AVG(salary)FROM employeesWHERE department_id = outer.department_id);Using Correlated SubqueriesFind all employees who earn more than the average salary in their department.Each time a row from the outer queryis processed, theinner query isevaluated.Copyright © 2004, Oracle. All rights reserved.Using Correlated SubqueriesDisplay details of those employees who have changedjobs at least twice.SELECT e.employee_id, last_name,e.job_idFROM employees e WHERE 2 <= (SELECT COUNT(*)FROM job_history WHERE employee_id = e.employee_id);Copyright © 2004, Oracle. All rights reserved.Using the EXISTSOperator•The EXISTSoperator tests for existence of rows in the results set of the subquery.•If a subquery row value is found:–The search does not continue in the inner query–The condition is flagged TRUE•If a subquery row value is not found:–The condition is flagged FALSE–The search continues in the inner queryCopyright © 2004, Oracle. All rights reserved.SELECT employee_id, last_name, job_id, department_idFROM employees outerWHERE EXISTS ( SELECT 'X'FROM employeesWHERE manager_id = outer.employee_id);Find Employees Who Have at Least One Person Reporting to ThemCopyright © 2004, Oracle. All rights reserved.SELECT department_id, department_nameFROM departments dWHERE NOT EXISTS (SELECT 'X'FROM employeesWHERE department_id = d.department_id);Find All Departments That Do Not Have Any Employees…Copyright © 2004, Oracle. All rights reserved.Correlated UPDATEUse a correlated subquery to update rows in one table based on rows from another table.UPDATE table1 alias1SET column = (SELECT expressionFROM table2 alias2WHERE alias1.column = alias2.column);Copyright © 2004, Oracle. All rights reserved.Using Correlated UPDATE•Denormalize the EMPL6table by adding a column to store the department name.•Populate the table by using a correlated update.ALTER TABLE empl6ADD(department_name VARCHAR2(25));UPDATE empl6 eSET department_name = (SELECT department_name FROM departments dWHERE e.department_id = d.department_id);Copyright © 2004, Oracle. All rights reserved.DELETE FROM table1 alias1WHERE column operator(SELECT expressionFROM table2 alias2WHERE alias1.column = alias2.column);Correlated DELETEUse a correlated subquery to delete rows in one table based on rows from another table.Copyright © 2004, Oracle. All rights reserved.DELETE FROM empl6 EWHERE employee_id = (SELECT employee_idFROM emp_history WHERE employee_id = E.employee_id);Using Correlated DELETEUse a correlated subquery to delete only those rows from the EMPL6table that also exist in the EMP_HISTORYtable.Copyright © 2004, Oracle. All rights reserved.The WITHClause•Using the WITHclause, you can use the same query block in a SELECTstatement when it occurs more than once within a complex query.•The WITHclause retrieves the results of a query block and stores it in the user’s temporary tablespace.•The WITHclause improves performance.Copyright © 2004, Oracle. All rights reserved.WITHClause: ExampleUsing the WITHclause, write a query to display the department name and total salaries for those departments whose total salary is greater than the average salary across departments.Copyright © 2004, Oracle. All rights reserved.WITHClause: ExampleWITH dept_costs AS (SELECT d.department_name, SUM(e.salary) AS dept_totalFROM employees e JOIN departments dON e.department_id = d.department_idGROUP BY d.department_name),avg_cost AS (SELECT SUM(dept_total)/COUNT(*) AS dept_avgFROM dept_costs)SELECT * FROM dept_costs WHERE dept_total >(SELECT dept_avg FROM avg_cost)ORDER BY department_name;Copyright © 2004, Oracle. All rights reserved.SummaryIn this lesson, you should have learned the following:•A multiple-column subquery returns more than one column.•Multiple-column comparisons can be pairwise or nonpairwise.•A multiple-column subquery can also be used in the FROMclause of a SELECTstatement.Copyright © 2004, Oracle. All rights reserved.Summary•Correlated subqueries are useful whenever a subquery must return a different result for each candidate row.•The EXISTSoperator is a Boolean operator that tests the presence of a value.•Correlated subqueries can be used with SELECT, UPDATE, and DELETEstatements.•You can use the WITHclause to use the same query block in a SELECTstatement when it occurs more than once.Copyright © 2004, Oracle. All rights reserved.Practice 6: OverviewThis practice covers the following topics:•Creating multiple-column subqueries•Writing correlated subqueries•Using the EXISTSoperator•Using scalar subqueries•Using the WITHclauseCopyright © 2004, Oracle. All rights reserved.Hierarchical RetrievalCopyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this lesson, you should be able to do the following:•Interpret the concept of a hierarchical query•Create a tree-structured report•Format hierarchical data•Exclude branches from the tree structureCopyright © 2004, Oracle. All rights reserved.Sample Data from the EMPLOYEESTable…Copyright © 2004, Oracle. All rights reserved.Natural Tree StructureDe HaanKingHunoldEMPLOYEE_ID = 100(Parent)MANAGER_ID = 100(Child)WhalenKochharHigginsMourgosZlotkeyRajsDaviesMatosGietzErnstLorentzHartsteinFay AbelTaylorGrantVargasCopyright © 2004, Oracle. All rights reserved.Hierarchical QueriesWHEREcondition:expr comparison_operator exprSELECT [LEVEL], column, expr...FROM table[WHERE condition(s)][START WITH condition(s)][CONNECT BY PRIOR condition(s)] ;Copyright © 2004, Oracle. All rights reserved.Walking the Tree•Specifies the condition that must be met•Accepts any valid conditionUsing the EMPLOYEEStable, start with the employee whose last name is Kochhar.Starting Point...START WITH last_name= 'Kochhar'START WITH column1= valueCopyright © 2004, Oracle. All rights reserved.Walking the TreeWalk from the top down, using the EMPLOYEEStable.DirectionTop down Column1 = Parent KeyColumn2 = Child KeyBottom up Column1 = Child KeyColumn2 = Parent KeyCONNECT BY PRIOR column1= column2... CONNECT BY PRIOR employee_id = manager_idCopyright © 2004, Oracle. All rights reserved.Walking the Tree: From the Bottom UpSELECT employee_id, last_name, job_id, manager_idFROM employeesSTART WITH employee_id = 101CONNECT BY PRIOR manager_id = employee_id ;Copyright © 2004, Oracle. All rights reserved.Walking the Tree: From the Top DownSELECT last_name||' reports to '|| PRIOR last_name \"Walk Top Down\"FROM employeesSTART WITH last_name = 'King'CONNECT BY PRIOR employee_id = manager_id ;…Copyright © 2004, Oracle. All rights reserved.Ranking Rows with the LEVELPseudocolumnLevel 1root/parentLevel 3parent/child /leafLevel 4leafDe HaanKingHunoldWhalenKochharHigginsMourgosZlotkeyRajsDaviesMatosGietzErnstLorentzHartsteinFay AbelTaylorGrantVargasCopyright © 2004, Oracle. All rights reserved.Formatting Hierarchical Reports Using LEVELand LPADCreate a report displaying company management levels, beginning with the highest level and indenting each of the following levels.COLUMN org_chart FORMAT A12SELECT LPAD(last_name, LENGTH(last_name)+(LEVEL*2)-2,'_') AS org_chartFROM employees START WITH last_name='King' CONNECT BY PRIOR employee_id=manager_id Copyright © 2004, Oracle. All rights reserved.Pruning BranchesUse the WHEREclause to eliminate a node.Use the CONNECT BYclauseto eliminate a branch.WHERE last_name != 'Higgins'CONNECT BY PRIOR employee_id = manager_id AND last_name != 'Higgins'KochharHigginsGietzWhalenKochharHigginsWhalenGietzCopyright © 2004, Oracle. All rights reserved.SummaryIn this lesson, you should have learned the following:•You can use hierarchical queries to view a hierarchical relationship between rows in a table.•You specify the direction and starting point of the query.•You can eliminate nodes or branches by pruning.Copyright © 2004, Oracle. All rights reserved.Practice 7: OverviewThis practice covers the following topics:•Distinguishing hierarchical queries from nonhierarchical queries•Walking through a tree•Producing an indented report by using the LEVELpseudocolumn•Pruning the tree structure•Sorting the outputCopyright © 2004, Oracle. All rights reserved.Regular Expression SupportCopyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this lesson, you should be able to use regular expression support in SQL to search, match, and replace strings all in terms of regular expressions.Copyright © 2004, Oracle. All rights reserved.Regular Expression OverviewABCA method of describing both simple and complex patterns for searching and manipulatingSeveral new functions to support regular expressionsA multilingual regular expression support for SQL and PLSQL string typesCopyright © 2004, Oracle. All rights reserved.Meta CharactersSpecifies equivalence classes[==]Matches one or more occurrence+Matches zero or one occurrence?Matches any character in the supported character set, except NULL.Grouping expression, treated as a single subexpression()Back-reference expression\\nSpecifies a character class and matches any character in that class[: :]Can have 4 different meanings: 1. Stand for itself. 2. Quote thenext character. 3. Introduce an operator. 4. Do nothing.\\DescriptionSymbolSpecifies one collation element, such as a multicharacter elementMatches at least mtimes but no more than ntimesMatches exactly mtimesBracket expression for a matching list matching any one of the expressions represented in the listMatches the start-of-line/end-of-lineAlteration operator for specifying alternative matchesMatches zero or more occurrences[..]{m,n}{m}[ ] ^/$|*Copyright © 2004, Oracle. All rights reserved.Using Meta CharactersProblem: Find 'abc' within a string:Solution: 'abc'Matches: abcDoes not match: 'def'Problem: To find 'a' followed by any character, followed by 'c'Meta Character: anycharacter is defined by '.'Solution: 'a.c'Matches: abcMatches: adcMatches: alcMatches: a&cDoes not match: abbProblem: To find one or more occurrences of 'a' Meta Character: Use'+' sign to match one or more of the previous charactersSolution: 'a+'Matches: aMatches: aaDoes not match: bbb123Copyright © 2004, Oracle. All rights reserved.Regular Expression FunctionsSearches for a given string for a regular expression pattern and returns the position where the match is foundREGEXP_INSTRSearches for a regular expression pattern within a given string and returns the matched substringREGEXP_SUBSTRSearches for a regular expression pattern and replaces it with a replacement stringREGEXP_REPLACESimilar to the LIKEoperator, but performs regular expression matching instead of simple pattern matchingREGEXP_LIKEDescriptionFunction NameCopyright © 2004, Oracle. All rights reserved.The REGEXPFunction SyntaxREGEXP_LIKE (srcstr, pattern [,match_option])REGEXP_INSTR (srcstr, pattern [, position [, occurrence[, return_option [, match_option]]]]) REGEXP_SUBSTR (srcstr, pattern [, position [, occurrence [, match_option]]])REGEXP_REPLACE(srcstr, pattern [,replacestr [, position [, occurrence [, match_option]]]]) Copyright © 2004, Oracle. All rights reserved.SELECT first_name, last_nameFROM employeesWHERE REGEXP_LIKE (first_name, '^Ste(v|ph)en$');Performing Basic SearchesCopyright © 2004, Oracle. All rights reserved.SELECT street_address, REGEXP_INSTR(street_address,'[^[:alpha:]]')FROM locations WHERE REGEXP_INSTR(street_address,'[^[:alpha:]]')> 1;Checking the Presence of a PatternCopyright © 2004, Oracle. All rights reserved.SELECT REGEXP_SUBSTR(street_address , ' [^ ]+ ') \"Road\" FROM locations;Example of Extracting Substrings…Copyright © 2004, Oracle. All rights reserved.SELECT REGEXP_REPLACE( country_name, '(.)', '\\1 ') \"REGEXP_REPLACE\" FROM countries; Replacing Patterns…Copyright © 2004, Oracle. All rights reserved.Regular Expressions and Check ConstraintsALTER TABLE emp8 ADD CONSTRAINT email_addr CHECK(REGEXP_LIKE(email,'@'))NOVALIDATE ;INSERT INTO emp8 VALUES (500,'Christian','Patel', 'ChrisP2creme.com', 1234567890, '12-Jan-2004', 'HR_REP', 2000, null, 102, 40) ;12Copyright © 2004, Oracle. All rights reserved.SummaryIn this lesson, you should have learned how to use regular expression support in SQL and PL/SQL to search, match, and replace strings all in terms of regular expressions.Copyright © 2004, Oracle. All rights reserved.Practice 8: OverviewThis practice covers using regular expressions.Copyright © 2004, Oracle. All rights reserved.Writing Advanced ScriptsCopyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this appendix, you should be able to do the following:•Describe the type of problems that are solved by using SQL to generate SQL•Write a script that generates a script of DROPTABLEstatements•Write a script that generates a script of INSERTINTOstatementsCopyright © 2004, Oracle. All rights reserved.Using SQL to Generate SQL•SQL can be used to generate scripts in SQL•The data dictionary:–Is a collection of tables and views that contain database information–Is created and maintained by the Oracle serverSQL scriptSQLData dictionaryCopyright © 2004, Oracle. All rights reserved.Creating a Basic ScriptSELECT 'CREATE TABLE ' || table_name || '_test ' || 'AS SELECT * FROM ' || table_name ||' WHERE 1=2;' AS \"Create Table Script\"FROM user_tables; Copyright © 2004, Oracle. All rights reserved.SPOOL dropem.sqlSPOOL OFFControlling the EnvironmentSet system variables to appropriate values.Set system variables back to the default value.SQL STATEMENTSET ECHO OFFSET FEEDBACK OFFSET PAGESIZE 0SET FEEDBACK ONSET PAGESIZE 24SET ECHO ONCopyright © 2004, Oracle. All rights reserved.The Complete PictureSET ECHO OFF SET FEEDBACK OFFSET PAGESIZE 0SELECT 'DROP TABLE ' || object_name || ';'FROM user_objectsWHERE object_type = 'TABLE'/SET FEEDBACK ONSET PAGESIZE 24SET ECHO ONCopyright © 2004, Oracle. All rights reserved.Dumping the Contents of a Table to a FileSET HEADING OFF ECHO OFF FEEDBACK OFFSET PAGESIZE 0SELECT'INSERT INTO departments_test VALUES('|| department_id || ', '''||department_name ||''', ''' || location_id || ''');'AS \"Insert Statements Script\"FROM departments/SET PAGESIZE 24SET HEADING ON ECHO ON FEEDBACK ONCopyright © 2004, Oracle. All rights reserved.Dumping the Contents of a Table to a FileSource'''X'''''''''''||department_name||''''''', '''''');'Result'X'''Administration'','');Copyright © 2004, Oracle. All rights reserved.Generating a Dynamic PredicateCOLUMN my_col NEW_VALUE dyn_where_clauseSELECT DECODE('&&deptno', null,DECODE ('&&hiredate', null, ' ','WHERE hire_date=TO_DATE('''||'&&hiredate'',''DD-MON-YYYY'')'),DECODE ('&&hiredate', null,'WHERE department_id = ' || '&&deptno','WHERE department_id = ' || '&&deptno' ||' AND hire_date = TO_DATE('''||'&&hiredate'',''DD-MON-YYYY'')')) AS my_col FROM dual;SELECT last_name FROM employees &dyn_where_clause;Copyright © 2004, Oracle. All rights reserved.SummaryIn this appendix, you should have learned the following:•You can write a SQL script to generate another SQL script.•Script files often use the data dictionary.•You can capture the output in a file.Copyright © 2004, Oracle. All rights reserved.Oracle Architectural ComponentsCopyright © 2004, Oracle. All rights reserved.ObjectivesAfter completing this appendix, you should be able to do the following:•Describe the Oracle server architecture and its main components•List the structures involved in connecting a user to an Oracle instance•List the stages in processing:–Queries–DML statements–CommitsCopyright © 2004, Oracle. All rights reserved.Oracle Database Architecture: OverviewThe Oracle database consists of two main components:•The database or the physical structures•The instance or the memory structuresCopyright © 2004, Oracle. All rights reserved.Database Physical Architecture Data filesOnline redo log filesPassword fileParameter fileControl filesArchive log filesCopyright © 2004, Oracle. All rights reserved.Control Files•Contains physical database structure information•Multiplexed to protect against loss•Read at mount stageControl filesCopyright © 2004, Oracle. All rights reserved.Redo Log Files•Record changes to the database•Multiplexed to protect against lossRedo log bufferLogWriterLGWRGroup 1Group 2Group 3Copyright © 2004, Oracle. All rights reserved.Tablespaces and Data Files•Tablespaces consist of one or more data files.•Data files belong to only one tablespace.USERStablespaceData file 1Data file 2Copyright © 2004, Oracle. All rights reserved.Segments, Extents, and Blocks•Segments exist within a tablespace.•Segments consist of a collection of extents.•Extents are a collection of data blocks.•Data blocks are mapped to OS blocks.SegmentExtentsData blocksOS blocksCopyright © 2004, Oracle. All rights reserved.Oracle Instance ManagementSystemMonitorSMONDatabaseWriterDBW0LogWriterLGWRProcessMonitorPMONArchiverARC0SGAJava poolShared poolLarge poolStreams poolDatabasebuffer cacheRedo log bufferCheckpointCKPTCopyright © 2004, Oracle. All rights reserved.Oracle Memory StructuresJava poolDatabasebuffer cacheRedo log bufferShared poolLarge poolSGAStreams poolServerprocess1PGAServerprocess2PGABack-groundprocessPGACopyright © 2004, Oracle. All rights reserved.Oracle ProcessesSystemmonitorSMONDatabasewriterDBW0CheckpointCKPTLogwriterLGWRProcessmonitorPMONArchiverARC0ServerprocessServerprocessServerprocessServerprocessSystem Global AreaSGABackground processesCopyright © 2004, Oracle. All rights reserved.Other Key Physical StructuresArchived log filesParameterfilePasswordfileDatabaseCopyright © 2004, Oracle. All rights reserved.Processing a SQL Statement•Connect to an instance using:–The user process–The server process•The Oracle server components that are used depend on the type of SQL statement:–Queries return rows–DML statements log changes–Commit ensures transaction recovery•Some Oracle server components do not participate in SQL statement processing.Copyright © 2004, Oracle. All rights reserved.Connecting to an InstanceUserServerServerUserClientUserServerOracle serverServerApplication serverBrowserCopyright © 2004, Oracle. All rights reserved.Processing a Query•Parse:–Search for identical statement–Check syntax, object names, and privileges–Lock objects used during parse–Create and store execution plan•Execute: Identify rows selected•Fetch: Return rows to user processCopyright © 2004, Oracle. All rights reserved.The Shared Pool•The library cache contains the SQL statement text, parsed code, and execution plan.•The data dictionary cache contains table, column, and other object definitions and privileges.•The shared pool is sized by SHARED_POOL_SIZE. Data dictionarycacheLibrarycacheShared poolCopyright © 2004, Oracle. All rights reserved.Database Buffer Cache•Stores the most recently used blocks•Size of a buffer based on DB_BLOCK_SIZE•Number of buffers defined by DB_BLOCK_BUFFERSDatabase buffercacheCopyright © 2004, Oracle. All rights reserved.Program Global Area (PGA)•Not shared•Writable only by the server process•Contains:–Sort area–Session information–Cursor state–Stack spaceServerprocessPGACopyright © 2004, Oracle. All rights reserved.Processing a DML StatementUPDATE employees ...SGARedo logbufferDatabasebuffercacheShared poolUserprocessServerprocessDatabaseData files Control filesRedolog files11234Copyright © 2004, Oracle. All rights reserved.Redo Log Buffer•Has its size defined by LOG_BUFFER•Records changes made through the instance•Is used sequentially•Is a circular bufferDatabase buffercacheCopyright © 2004, Oracle. All rights reserved.Rollback SegmentDML statementOld imageNew imageRollback segmentTableCopyright © 2004, Oracle. All rights reserved.COMMITProcessing134InstanceSGARedo logbufferDatabasebuffercacheShared poolLGWR2UserprocessServerprocessDatabaseData files Control filesRedolog filesCopyright © 2004, Oracle. All rights reserved.SummaryIn this appendix, you should have learned how to:•Identify database files: data files, control files, and online redo logs•Describe SGA memory structures: DB buffer cache, shared SQL pool, and redo log buffer•Explain primary background processes:DBW0, LGWR, CKPT, PMON, SMON, and ARC0•List SQL processing steps: parse, execute, fetch","libVersion":"0.2.3","langs":""}