{"path":"Subjects/COS3751 - Techniques of Artificial Intelligence/Telegram Notes/Chapt8-First-Order-Logic.pdf","text":"First‐Order Logic Chapter 8 (not 8.1) Outline • Why FOL? • Syntax and semantics of FOL • Using FOL • Wumpus world in FOL • Knowledge engineering in FOL Pros and cons of propositional logic  Propositional logic is declarative  Propositional logic allows partial/disjunctive/negated  information – (unlike most data structures and databases)  Propositional logic is compositional meaning of B  P is derived from meaning of B and of P– meaning of B1,1  P1,2 is derived from meaning of B1,1 and of P1,2  Meaning in propositional logic is context‐independent – (unlike natural language, where meaning depends on context)  Propositional logic has very limited expressive power – (unlike natural language) – E.g., cannot say \"pits cause breezes in adjacent squares“ • except by writing one sentence for each square First‐order logic • Whereas propositional logic assumes the  world contains facts, first‐order logic (like  natural language) assumes the world contains – Objects: people, houses, numbers, colors, baseball  games, wars, … – Relations: red, round, prime, brother of, bigger  than, part of, comes between, … – Functions: father of, best friend, one more than,  plus, … Syntax of FOL: Basic elements • Constants KingJohn, 2, Udel,...  • Predicates Brother, >,... • Functions Sqrt, LeftLegOf,... • Variables x, y, a, b,... • Connectives , , , ,  • Equality =  • Quantifiers   ,  Atomic sentences Atomic sentence = predicate (term1,...,termn)  or term1 = term2 Term = constantTerm           constant or variable or function (term1,...,termn) • E.g., Brother(KingJohn,RichardTheLionheart) ,  (Length(LeftLegOf(Richard)), Length(LeftLegOf(KingJohn))) Married(mother(mother(mary)), father(mother(mary))) Representing Some Sentences • John likes Mary. • Bill hit John. • Florida is a state. • The product of a and b is c. • 2+3=7. • Tweety is yellow. Complex sentences Complex sentences are made from atomic  sentences using connectives S, S1  S2, S1  S2, S1  S2, S1  S2,1 2 1  2 1 2 1 2 E.g. Sibling(KingJohn,Richard)  Sibling(Richard,KingJohn) >(1,2)  ≤ (1,2) >(1,2)   >(1,2)  Truth in first‐order logic • Sentences are true with respect to a model and an  interpretation • Model contains objects (domain elements) and relations  among them • Interpretation specifies referents forInterpretation specifies referents for constant symbols → objects predicate symbols → relations function symbols → functional relations • An atomic sentence predicate(term1,...,termn) is true iff the objects referred to by term1,...,termn are in the relation referred to by predicate Models for FOL: Example Universal quantification • <variables> <sentence> Everyone at UDel is smart: x At(x,UDel)  Smart(x) • x P is true in a model m iff P is true with x being eachx P is true in a model m iff P is true with x being each  possible object  in the model • Roughly speaking, equivalent to the conjunction of  instantiations of x At(KingJohn,UDel)  Smart(KingJohn)   At(Richard,UDel)  Smart(Richard)   At(NUS,UDel)  Smart(NUS)   ... A common mistake to avoid Typically,  is the main connective with  • Common mistake: using  as the main connective  with :with : x At(x,UDel)  Smart(x) means “Everyone is at Udel and everyone is smart” Existential quantification • <variables> <sentence> Someone at Udel is smart: x At(x,UDel)  Smart(x) • xP is true in a model m iff P is true with x being some  ibl bj t i th dlpossible object in the model • Roughly speaking, equivalent to the disjunction of  instantiations of P At(KingJohn,UDel)  Smart(KingJohn)   At(Richard,UDel)  Smart(Richard)   At(NUS,UDel)  Smart(NUS)   ... Another common mistake to avoid • Typically,  is the main connective with  • Common mistake: using  as the main connective  with : x At(x,UDel)  Smart(x) is true if there is anyone who is not at UDel! Properties of quantifiers • x yis the same as y x • x yis the same as y x • x yis not the same as y x • x yLoves(x,y) – “There is a person who loves everyone in the world”– There is a person who loves everyone in the world • y x Loves(x,y) – “Everyone in the world is loved by at least one person” • Quantifier duality: each can be expressed using the other • x Likes(x,IceCream) x Likes(x,IceCream) • x Likes(x,Broccoli)  x Likes(x,Broccoli) Equality • term1 = term2 is true under a given interpretation if  and only if term1 and term2 refer to the same object • E.g., definition of Sibling in terms of Parent: x,y Sibling(x,y)  [(x = y) m,f  (m = f)  Parent(m,x)   Parent(f,x)  Parent(m,y)  Parent(f,y)] Using FOL The kinship domain: • Brothers are siblings x,y Brother(x,y)  Sibling(x,y) • One's mother is one's female parent m,c Mother(c) = m  (Female(m)  Parent(m,c)) • “Sibling” is symmetric x,y Sibling(x,y)  Sibling(y,x) Using FOL The set domain:  • s Set(s)  (s = {} )  (x,s2 Set(s2)  s = {x|s2}) • x,s {x|s} = {} • x,s x s  s = {x|s} • x,s x s  [ y,s2} (s = {y|s2}  (x = y  x s2))] • s1,s2 s1 s2  (x x s1  x s2) • s1,s2 (s1 = s2)  (s1 s2  s2 s1) • x,s1,s2 x (s1 s2)  (x s1  x s2) • x,s1,s2 x (s1 s2)  (x s1  x s2) Knowledge engineering in FOL 1. Identify the task 2. Assemble the relevant knowledge 3. Decide on a vocabulary of predicates, functions,  and constants 4. Encode general knowledge about the domain 5. Encode a description of the specific problem  instance 6. Pose queries to the inference procedure and get  answers 7. Debug the knowledge base Summary • First‐order logic: – objects and relations are semantic primitives – syntax: constants, functions, predicates, equality,  quantifiersquantifiers • Increased expressive power: sufficient to  define wumpus world","libVersion":"0.2.3","langs":""}