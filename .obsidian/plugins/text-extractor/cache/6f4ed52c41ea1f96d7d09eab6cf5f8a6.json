{"path":"Subjects/COS3711 - Advanced Programming/Unsorted/Virtual Classes/VC03_Ch07_Libraries_Design_Patterns.pdf","text":"COS3711 – Advanced Programming Virtual Class: COS3711 - 22 - ALL Chapter 7 – Libraries, Design Patterns Lecturer: Dr C Pilkington Tutor: Ron Barnard Libraries, Design Patterns Chapter 7 - Outcomes • Know different containers of code, and how they support code reuse; • Install and use libraries that accompany the prescribed book - ◦ (Look at Tutorial Letter 103); • Understand the concept of frameworks and APIs; • Understand, identify, and implement the Serializer Design Pattern; • Describe the concept of an anti-pattern. Libraries, Design Patterns Libraries Important concept - “Re-usability of code” - Know and understand terminology / concepts regarding libraries, code re-use - • Libraries – Groups of code modules, organised in a re-usable way. ◦ Runtime library – Library file without headers, can only be used with an application built with the library. ◦ Use “#” to include a library module into a C++ file - #include <QString> • Frameworks – Collection of general-purpose classes and conventions designed to improve consistency of design. Eg: Qt, Laravel, Django ◦ Usually have a well documented API (Application Programming Interface). ◦ Use Design Patterns. Libraries, Design Patterns Libraries • OOP / Classes - An extensible (inheritance) code-template for creating (instantiating) objects, and which contain both state (member variables), and behaviour (methods / functions). ◦ Inheritance, Composition; • Functions / methods – 'Piece' of code that can be called by name. Data can be passed (argument / parameter), and returned. Method is a function in an OOP context. • Design Patterns - Efficient and elegant solutions to common problems in object-oriented software design. They are high-level abstract templates that can be applied to particular kinds of design problems. Libraries, Design Patterns Libraries Anti – Patterns - Commonly used programming practices that have proven to be ineffective, inefficient, or otherwise counter – productive. • Software design anti-patterns - ◦ Input kludge - Lack of input validation. ◦ Interface bloat - Making an interface so complicated that it is hard use. ◦ Race hazard - Two, or more, events dependent on each other. Event A waiting for Event B, while Event B is waiting for Event A. • Object-oriented design anti-patterns ◦ Circular dependency - Introducing unnecessary direct, or indirect, mutual dependencies between objects or software modules. Class A calls Class B, Class B then calls Class A. Libraries, Design Patterns Libraries ◦ God Object - An object that has too much information, or too much responsibility. Too many unrelated methods in a single class. NB: “Single-purpose principle”. • Programming anti-patterns - ◦ Hard coding - Embedding assumptions about the environment of a system in its implementation. “Dependency inversion” principle. ◦ Magic numbers - Including unexplained numbers in algorithms / code. ◦ Magic strings - Including literal strings in code, eg: for comparisons. • Methodological anti-patterns - ◦ Copy and paste programming - Copying and modifying existing code without creating more generic solutions. ◦ Reinventing the wheel - Failing to adopt an existing, adequate solution and, instead adopting a custom solution which provides no additional benefit, and wastes time and effort. Design Patterns Serializer Pattern (Behavioural pattern) Intent – Used to serialize / stream state of objects into / out of other objects. Applicability – Primarily used for communication; • Not intended for general input / output, or save / restore; • Class to be serialized / de-serialized does not participate in the process; • Subject Class must be able to provide its state, and allow its state to be set. • Implements two Classes – ◦ classReader, with a read() method; ◦ classWriter, with a write() method; • Do NOT implement as a single class, with read / write methods; Design Patterns Serializer Pattern Comment - There are some variations in the use of the Serializer Pattern - • Constructor – Can pass an argument in the constructor, often a file name - ◦ SerialClass myObj(QString fileName); ◦ SerialClass myObj(QString fileName = “myFile.txt”); // Default file name • Write method - ◦ Pass the object to be serialized by value, or by reference / pointer - ◦ write(MyClass1 myObject); write(MyClass1 &myObject); write(MyClass1 *ptr); ◦ Can return bool to confirm if write was successful. • Read method - ◦ Can pass object to be de-serialized as a reference, or return the object - ▪ void read(MyClass1 &myObject); // Can return bool, if required ▪ myObject read(); Design Patterns Observer Pattern (Behavioural pattern) Intent – Define a one-to-many dependency between objects, so that when one object (Subject) changes state, all its dependants (Observers) are notified and updated automatically. Applicability – Communication between objects - • When a change to one object (Subject) requires changes in other objects (Observers), and the number of other objects is not known; • Loosely coupled – Subject does not know anything about Observers, other than they have an update() interface. Can add / remove Observers at will. Comment - Very commonly used Design Pattern, used in M-V-C. Qt implementation – Signals and Slots – look at Qt documentation. • Use connect() method of QObject. • connect(btnProcess, SIGNAL(clicked()), this, SLOT(doSomething())); • connect(btnProcess, &QPushButton::clicked, this, &MyClass::doSomething); Design Patterns Observer Pattern Participants - • Subject – Knows its Observers, can be any number of Observers. ◦ Can attach / detach Observer objects. • Observer – Defines an interface (Abstract) for updating Observers. • ConcreteSubject – Stores the state of the Subject. ◦ Notifies Observers when its state changes. • ConcreteObserver – Maintains a reference to the Subject, and stores state consistent with the Subject state. • Implements an update() interface to keep state consistent with Subject state. Design Patterns Composite Pattern (Structural pattern) Intent – To compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. Applicability - • To represent part-whole hierarchies; • All objects in the composite structure treated uniformly – ignore differences between compositions of objects, and individual objects. Design Patterns Composite Pattern Participants – • A composite contains 'components' – a set of children – in a tree structure; • A component can either be another 'composite', or a 'leaf'; • A leaf has no children. Qt implementation – Qt Parent-child relationship QObject(QObject *parent = nullptr) QWidget(QWidget *parent = nullptr, Qt::WindowFlags f = Qt::WindowFlags()) QPushButton(const QIcon &icon, const QString &text, QWidget *parent = nullptr) QGridLayout(QWidget *parent) Design Patterns Flyweight Pattern (Structural pattern) Intent - Use sharing to support large numbers of objects efficiently. Applicability – (Abbreviated list – applies to use in Qt) • Application uses a large number of objects; • Storage costs are high because of the quantity of objects; • Most object state can be made extrinsic (External); Comment - • Avoids the need to store multiple copies of the same object; • 'Wrapper' object holds pointers to the shared data, instead of an actual copy of the data; • Uses 'reference-counting' through the use of Smart pointers, or Shared Pointers. Design Patterns Flyweight Pattern Qt implementation Qt container classes – Use templates: QList<QString> Sequential - QList, QLinkedList, QVector, QStack, QQueue; Associative (Key / value pair) – QMap, QMultiMap, QHash, QMultiHash, QSet. Qt containers are implicitly shared – (Simplified implementation of Flyweight Pattern) • Only a pointer to the data is passed around; • Data is copied only if and when a function writes to it – copy-on-write; • Assignment is done using a shallow copy – only a pointer is shared. ◦ Shallow copy is a reference copy – pointer to shared data; ◦ Deep copy – duplicates an object; Link to Qt documentation - https://doc.qt.io/qt-5/implicit-sharing.htm","libVersion":"0.2.3","langs":""}