{"path":"UNISA/98906 - BSc Science in Computing/COS3711 - Advanced Programming/Unsorted/Notes/Validators.pdf","text":"Input Validation and Regular ExpressionsRegular ExpressionsCOS3711 -e-Tutor Input Validation and Regular ExpressionsRegular ExpressionsTutor PowerpointCh14 Outline•Input Masks•Validators•Regular ExpressionsInput Marks•Control what is typed in an input widget by the user•A QLineEditobject provides a Mask•A mask is a special string that tells the line edit what type of characters the user can type next. If a user types a character that is not in range, it is simply ignored by the line edit.•A mask has both normal characters and special character•A mask has both normal characters and special character•The following code creates a QLineEditthe form: 1234-123-1234-123 (four digits, then a dash, then 3 digits, another dash, four more digits, a dash and end with 3 digits):Control what is typed in an input widget by the userMaskfor the inputthat tells the line edit what type of characters the user can type next. If a user types a character that is not in range, it is simply ignored by the line edit.A mask has both normal characters and special character. A mask has both normal characters and special character. QLineEditthat takes a numeric value in 123 (four digits, then a dash, then 3 digits, another dash, four more digits, a dash and end with 3 digits):Input Masks (Cont.)#include <Application>#include <qlineedit.h>intmain(intargc, char *argv[]){QApplicationapp(argc, argv);QLineEdite;e.setInputMask(\"9999-999-9999-999\");e.setInputMask(\"9999-999-9999-999\");e.show();return app.exec();}Masks are useful for inputs with rigid formats such as IP addresses and serial numbers. For more complex inputssolution is needed: validators. 999\");999\");useful for inputs with rigid formats such as IP addresses more complex inputs, a more flexible Validators•Objectsthat can be attached to input widgets QComboBox, and QSpinBoxto validate user input•Implemented with the QValidator•QValidatorclass provides three important subclasses QDoubleValidatorand QRegExpValidator•QIntValidator-validates integer values, •QIntValidator-validates integer values, •QDoubleValidator-validates floating point values and•QRegExpValidator-validates any text using •The following code creates an integer only line edit using a validator, i.e., an example of use of QIntValidatorattached to input widgets such as QLineEdit, to validate user inputclassclass provides three important subclasses QIntValidator, QRegExpValidatorfor input validationvalidates integer values, validates integer values, validates floating point values andvalidates any text using regular expressionan integer only line edit using a validator, QIntValidatorValidators (Cont.)#include <QApplication>#include <qlineedit.h>#include <QIntValidator>intmain(intargc, char *argv[]){QApplicationapp(argc, argv);QLineEdite;QIntValidator*v = new QIntValidator(0, 100QIntValidator*v = new QIntValidator(0, 100e.setValidator( v );//a QIntValidatoris set a validator in a e.show();return app.exec();}The above code implements a line edit that 0 and 100.(0, 100);(0, 100);is set a validator in a QLineEdita line edit that allows only integers between Validators (Cont.)•QRegExpValidatoris a flexible validator•QRegExpValidatoraccepts a regular expression QLineEdit•The following code implements a QLineEdit#include <QApplication>intmain(intargc, char *argv[]){QApplicationapp(argc, argv);QLineEdite;QRegExpre(\"[_a-zA-Z][_a-zA-Z0-9]+\");QRegExpValidator*v = new QRegExpValidatore.setValidator( v );e.show();return app.exec();}regular expression and use it to validate any input text in a that accepts only valid namesQRegExpValidator(re);","libVersion":"0.2.3","langs":""}