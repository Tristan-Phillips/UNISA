{"path":"UNISA/98906 - BSc Science in Computing/COS2601 - Theoretical Computer Science II/Unsorted/Assignments/COS2601-2018-1-201.pdf","text":"COS2601/201/1/2018 Tutorial letter 201/1/2018 Theoretical Computer Science II COS2601 Semester 1 School of Computing Discussion of Assignment 1 BARCODE COS2601/201/1/2018 2 Dear student Solutions to the questions of assignment 1 are provided in this tutorial letter. Regards COS2601 team Question 1 Who created the subject of mathematical models for the description of languages in an attempt to answer questions such as: • What is language in general? • How could primitive humans have developed language? • How do people understand language? • How do children learn language? • How do people construct sentences from the ideas in their minds? 1. David Hilbert 2. Noam Chomsky 3. Alan Turing 4. Kurt Gödel Answer: Option 2 Discussion We investigate what role Hilbert, Chomsky, Turing and Gödel played in the history of the subject of computer theory: Option 1 Hilbert wanted the confusion around set theory to be resolved – he wanted a precise axiomatic system built for set theory. Hilbert not only believed that every mathematical provable result should be true, he also presumed that every true result was provable and he wanted a methodology that would show mathematicians how to find this proof. The language of algorithms that Hilbert required evolved into the language of computer programs. Hilbert did not attempt to answer the questions provided in the question statement. Refer to Cohen, page 3, last paragraph, and page 4, paragraphs 1 - 6. Option 2 Naom Chomsky created the subject of mathematical models for the description of languages in an attempt to answer the questions provided in the question statement. His theory developed and later shed light on the study of computer languages. Refer to Cohen, page 6, paragraph 2. Option 2 should be regarded as the correct one. Option 3 One of the mathematical problems Church, Kleene, Post, Markov, Von Neumann and Turing worked independently on was to determine which mathematical statements have proofs and how to generate these proofs. Independently these people developed similar versions of a universal model for algorithms. The development of the Turing Machine and the proof which Turing provided that there were mathematically definable fundamental questions about the Turing Machine itself that the machine could not answer, destroyed all hope of ever achieving Hilbert’s program of mechanizing mathematics. Turing was involved in the construction of the machine that was used in breaking the German secret code. Turing did not attempt to answer the questions provided in the question statement. Refer to Cohen, page 5, paragraphs 1 - 3. Option 4 Gödel proved that there was no algorithm to provide proofs for all true statements in mathematics. Gödel did not attempt to answer the questions provided in the question statement. COS2601/201/1/2018 3 Refer to Cohen, page 4, paragraph 7. Question 2 Let S = {a b} and let T= {a b bb}. Which one of the following statements is true? 1. S + = S* 2. S* = S** 3. S  S* 4. S* ≠ T* Answer: Option 2 Discussion Firstly we should remember that for any sets A and B, A = B iff A  B and B  A. (A  B iff each element of A is also an element of B.) Option 1 If S = {a b} then S* = {a b}* = {Λ a b aa bb ab ba aaa bbb abb bba aab baa …}, comprising all possible concatenations of a’s and b’s, together and separately, and Λ is also a word in S*. S + is the language S* without the word Λ, i.e. S + = S* – {Λ} i.e. S + ≠ S*. The statement in Option 1 is not true. Option 2 If S = {a b} then S** = {a b}** = {Λ a b aa bb ab ba aaa bbb abb bba aab baa …}* = {Λ ΛΛ ΛΛΛ … Λa ΛΛa … Λb … a b aa bb ab ba aaa bbb abb bba aab baa …} = {Λ a b aa bb ab ba aaa bbb abb bba aab baa …} = S*. (From Theorem 1, p. 18 of Cohen, S* = S**.) The statement in Option 2 is true and should be the option chosen. Option 3 If S = {a b} then S* = {Λ a b aa bb ab ba aaa bbb abb bba aab baa …}, thus every element of S, namely a and b, are also elements of S*, that is, S is a subset of S*. The statement in Option 3 is not true. Option 4 Consider S = {a b} and T = {a b bb}. S* = {a b}*, and T* = {a b bb}* = {a b}* = {Λ a b aa bb ab ba aaa bbb abb bba aab baa …} Thus S* = T*. The statement in Option 2 is not true. Question 3 Which one of the following statements is true? 1. If S = {a ab} and T = {a ba}, then S* = T** 2. If S = { a} and T = {a}, then S*  T* 3. If S = { a }, then S+ = {a} 4. If S = {a}, then S** = { a aa aaa …} Answer: Option 4 COS2601/201/1/2018 4 Discussion Option 1 It is not the case that S* = T** if S = {a ab} and T = {a ba}. By the theorem on page 18 of Cohen, T** = T*. We provide a counterexample to prove that S*  T*: ab  S and thus also ab  S*, but ab  T*. Thus this statement is not true and is not the correct option. Option 2 If S = { a} and T = {a}, then S* = { a}* = {a}* = T*. Thus, the statement is not true. Option 3 If S = { a }, then S+ = {a} is not true because S+ = { a aa aaa …} Option 4 If S = {a}, then S* = { a aa aaa …} = S**, so this statement is true, and should be selected as the correct option. Question 4 Which one of the following is an example of a set S such that the language S* has the same number of 6-letter words and 3-letter words? 1. S = {a bb} 2. S = {bab aba} 3. S = {aa bbb} 4. S = {aaa aaaaaa} Answer: Option 4 Discussion 3 is a factor of 6. Thus for each 3-letter word, the word concatenated to itself will result in a 6-letter word. If there are 2 3-letter words in S, then there are 4 6-letter words that can be constructed from the 2 3- letter words. Option 1 For S = {a bb}, S* = { a bb aa aaa abb bba … aaaaaa bbbbbb abbabb bbabba … }. Although not all the options for 6-letter words have been included, it is clear that S* contains more 6-letter words than 3-letter words, and thus cannot be the correct option. Option 2 For S = {bab aba}, S* = { bab aba babbab abaaba bababa ababab …}, which has more 6-letter words than 3-letter words, and thus cannot be the correct option. Option 3 For S = {aa bbb}, S* = { aa bbb aaaa aabbb bbbaa aaaaaa bbbbbb …}, which has more 6-letter words than 3-letter words, and thus cannot be the correct option. Option 4 For S = {aaa aaaaaa}, S* = { aaa aaaaaa aaaaaaaaa …}, which has exactly 1 3-letter word and 1 6- letter word. This, then, is the correct option. COS2601/201/1/2018 5 Question 5 Consider the language S* over the alphabet Σ = {a b} that is defined by the regular expression (bb)*(abba* + aba)*. Which one of the following words is in the language? 1. bbabbbb 2. abbaabbaba 3. ababbaaa 4. bbbababba Answer: Option 2 Discussion It is clear that (bb)*(abba* + aba)* defines the language of all words that start with strings of concatenation of bb, or  can be generated, followed by strings that can be concatenated with factors of the form abba* or aba or both, or  can be generated. The shortest word in the language is . All other words in this language contain at least one or two b’s. An even number of b’s can occur at the beginning of a word, followed by an a, and then not more than two b’s can occur one after another, and any b’s will always be separated by some a’s. In order to determine whether a certain word belongs to S* or not, we show how the word can be constructed by concatenating words from S. If the words in S cannot be concatenated in such a way that a word corresponding to an option can be generated, then it is clear that the word under discussion is not an element of S*. Option 1 There is a substring of 4 b’s after the a in the word bbabbbb; thus this word does not belong to S*. Option 2 The word abbaabbaba can be constructed by concatenating abba, abb and aba. Thus abbaabbaba belongs to S*, and is the option that should be chosen. Option 3 The word ababbaaa starts with the string aba, but there is no factor in the given regular expression that starts with a bb that can follow aba; thus ababbaaa does not belong to S*and this option should not be chosen. Option 4 The word bbbababba starts with an odd number of b’s, but words in S* can only start with an even number of b’s; thus bbbababba does not belong to S* and this option should not be chosen. Question 6 Which one of the following regular expressions can generate the word babb? 1. b*a* 2. (ba)* 3. (bb)* + ba 4. bab* Answer: Option 4 Discussion Option 1 Let L be the language defined by the regular expression b*a*. L constitutes the set of words that are generated by possible concatenations of b followed by possible concatenations of a, or  can be generated. b’s can never follow an a in any word of L, and thus babb cannot be generated by the given regular expression b*a*. This option should not be chosen. COS2601/201/1/2018 6 Option 2 Let M be the language defined by the regular expression (ba)*. M constitutes the set of words that are generated by concatenations of ba, or  can be generated. Two b’s cannot occur continuously in any word of M, and thus babb cannot be generated by the given regular expression (ba)*. This option should not be chosen. Option 3 Let N be the language defined by the regular expression (bb)* + ba. N constitutes the set of words that are generated by concatenations of bb, or  can be generated, or else the word ba is in N; ba cannot be concatenated with bb, and thus babb cannot be generated by the given regular expression (bb)* + ba. This option should thus not be chosen. Option 4 Let O be the language defined by the regular expression bab*. O constitutes the set of words that are generated by ba followed by concatenations of b (or ). Thus babb can be generated by the given regular expression bab*. This option should be chosen. Question 7 Which one of the following regular expressions defines a language equivalent to the language defined by (a + b)*? 1. (a + bb)* 2. (aa*bb*)* 3. (ab + ba + bb + aa)* 4. (a*b*)* Answer: Option 4 Discussion In the following discussion we refer to L being the language defined by (a + b)*. L is the set of all possible strings generated by concatenating a’s or b’s, or both, or Λ can be generated (arbitrary strings; refer to Cohen, p. 35). For a regular expression to define language L it should define all the words in L and should not define any words that do not belong to L. If we want to show that a given regular expression does not define the required language L then we provide a counterexample. A counterexample can be a word in L that the regular expression cannot generate, or a word that can be generated by the regular expression but is not a word in L. Thus, to show that a regular expression does not generate a required language, a counterexample should be provided. Possible words in L: Λ, a, b, aa, bb, ab, ba, aaa, bbb, abb, bba, aab, baa, …, abbbaabbababa, … Let us consider the languages defined by the regular expressions provided. Option 1 The regular expression (a + bb)* does not define the required language L. Let M be the language defined by (a + bb)*. This regular expression generates words belonging to M by concatenating factors of the form a or bb, or combinations of these, or Λ can be generated. Possible strings with single b’s cannot be generated, thus the given regular expression cannot define all the words in L. We provide a counterexample: b  L but b  M. Another possible counterexample: bab  M but bab  L (there are numerous possible counterexamples). Option 2 The regular expression (aa*bb*)* does not define the required language L. Let N be the language defined by (aa*bb*)*. The regular expression generates words by concatenations of repeated factors COS2601/201/1/2018 7 consisting of an a followed by a possible string of a’s, followed by a b, and lastly followed by a possible string of b’s; or Λ can be generated. We note that words defined by (aa*bb*)* begin with an a and end with a b. Furthermore, (aa*bb*)* can generate words that contain any number of factors of the aa*bb*- substring, or Λ can also be generated. However, the given regular expression cannot generate all the words that belong to L. We provide a counterexample: babaaa  L but babaaa  N (babaaa begins with a b and ends with an a). (There are numerous possible counterexamples.) Option 3 The regular expression (ab + ba + bb + aa)* does not define the required language L. Let T be the language defined by (ab + ba + bb + aa)*. This regular expression generates the words belonging to T by concatenating factors of the form ab or ba or bb or aa, or combinations of these, or Λ can be generated. (ab + ba + bb + aa)* generates all possible words with an even number of letters. Remember, the length of Λ is 0, and 0 is an even number. Possible strings with an odd number of letters cannot be generated, thus the given regular expression cannot define all the words in L. We provide a counterexample: b  L but b  T. Another possible counterexample: bab  L but bab  T (there are numerous possible counterexamples). Option 4 The regular expression (a*b*)* generates all possible strings of a’s and b’s, or both, or Λ can be generated. Thus (a*b*)* defines the required language L. (Refer to the discussions in Cohen, pages 35 and 47.) Thus we can conclude that Option 4 should be selected. Question 8 Consider the language ODDAB consisting of all words of odd length and containing the substring ab. Which one of the following is a suitable generator of ODDAB? 1. a 2. Λ 3. bab 4. aaaba Answer: Option 3 Discussion The generator(s) of a language is/are the shortest word(s) in the language that can be used to generate the language by implementing the so-called CONCAT function as defined in your study guide. A suitable generator for the language ODDAB should be selected. The questions that you should consider when determining whether a word belongs to ODDAB or not are: • Does the word contain the ab-substring? The answer to this question should be yes. • Is the word of odd length? The answer to this question should be yes. A word is an element of ODDAB only if both the above criteria hold. In this respect, note that  is not a word in the language because  is of even length (0) and this language excludes all words of even length. Option 1 a is not a word in ODDAB because even though it is of odd length, the ab-substring does not appear in the word a. Thus a cannot be a generator. Option 2 The word Λ is not of odd length, and furthermore, Λ does not contain the ab-substring, thus Λ is not a suitable generator for ODDAB. Option 3 bab is a suitable generator for ODDAB because it is one of the shortest words of odd length belonging to ODDAB that contains the substring ab. (Note: abb, aba, bab and aab can be regarded as the generators of ODDAB.). This option should thus be chosen. COS2601/201/1/2018 8 Option 4 Even though aaaba is of odd length and contains the ab-substring, it is not one of the shortest words in ODDAB, thus it cannot be used as a generator. Thus this option should not be chosen. Question 9 Consider the language ODDSTRING consisting of all words of odd length over the alphabet Σ = {a b}. Which one of the following is a suitable generator? 1. Λ 2. a 3. bb 4. aba Answer: Option 2 Discussion As mentioned in Question 3, the generator(s) of a language is/are the smallest word(s) in the language that can be used to generate the language by implementing the so-called CONCAT function as defined in your study guide. For this question, you have to select a generator for the language ODDSTRING. The questions that you should consider when determining whether a word belongs to ODDSTRING or not are: • Is the word of even length? The answer to this question should be no. • Is the word of odd length? The answer to this question should be yes. A word is an element of ODDSTRING only if both the above criteria hold. In this respect note that  is not a word in the language because  is of even length (0) and this language excludes all words of even length. Let us consider the words provided in the options. Option 1 The word Λ is not of odd length, thus it is not a suitable generator for ODDSTRING. Option 2 The word a is of odd length, thus a is a word in the language ODDSTRING. Furthermore, the word a is one of the shortest words in ODDSTRING, thus it is a suitable generator. (Note: a and b are the generators of ODDSTRING.) Option 3 The word bb is of even length, thus it is not a word in the language ODDSTRING. Therefore, bb is not a suitable generator. Option 4 The word aba is of odd length, thus aba is a word in the language ODDSTRING. However, the word aba is not one of the shortest words in ODDSTRING, thus it is not a suitable generator. From the above we can conclude that Option 2 should be selected. Question 10 Which one of the following regular expressions generates a language equivalent to the language generated by the regular expression a(ba + a)*b? 1. a(a + b)*b 2. abaa*b 3. aa*b(aa*b)* 4. (aa + aba)*b COS2601/201/1/2018 9 Answer: Option 3 Discussion To facilitate our explanation we refer to different parts of the provided regular expression as follows: a...........................................................part 1 (ba + a)*...............................................part 2 b...........................................................part 3 We recall that a given regular expression is equivalent to a(ba + a)*b if all the words generated by a(ba + a)*b are generated by the given regular expression. Furthermore the regular expression under consideration should not generate any word not being generated by a(ba + a)*b. Option 1 The regular expression a(a + b)*b is not equivalent to a(ba + a)*b. The reason for this is that (a + b)* generates any number concatenations of a’s and b’s without any restrictions. If we consider part 2 of the provided regular expression then we note that the bbb-substring can, for example, not be generated by part 2 of a(ba + a)*b. Words like abbbb can thus be generated by a(a + b)*b and not by a(ba + a)*b. Consequently a(a + b)*b is not equivalent to a(ba + a)*b. Option 2 The regular expression abaa*b is not equivalent to a(ba + a)*b although both these regular expressions generate words beginning with an a and ending with a b, the regular expression abaa*b can only generate words containing at most two b’s whereas a(ba + a)*b can generate words containing any number of b’s but not the bb-substring. Consequently, these regular expressions are not equivalent. Option 3 The regular expression aa*b(aa*b)* is equivalent to a(ba + a)*b. Both these regular expressions generate words which begin with an a and end with a b. The shortest word to be generated is ab. Both regular expressions generate the word ab. If we consider the second letter in general words that can be generated then it can either be an a or a b. In general both these regular expressions generate all words beginning with an a and ending with a b where the bb-substring does not occur and any number of a’s may occur consecutively interspersed with possible single b’s. This, then, is the correct option. Option 4 The regular expression (aa + aba)*b is not equivalent to a(ba + a)*b. The reason for this is that words generated by (aa + aba)*b will always contain an even number of a’s. The word abaab can, for example, be generated by a(ba + a)*b. The word abaab can, however, not be generated by (aa + aba)*b. Therefore (aa + aba)*b cannot generate all the words generated by a(ba + a)*b and we can conclude that the two regular expressions (aa + aba)*b and a(ba + a)*b are not equivalent. © UNISA 2018","libVersion":"0.2.3","langs":""}