{"path":"Subjects/COS3711 - Advanced Programming/Unsorted/Additional Resources/LibraryAndDesignPatternCh7.pdf","text":"Libraries and Design PatternsCOS3711 -e-Tutor PowerpointLibraries and Design PatternsPowerpointChapter 7 •Outline 1.Library2.QtLibraries 3.Framework and Design pattern4.AntiPatternLibraries•Pre-compiled programming codes ready for use •Promote code reuse•Can be included in your project with the directive •The #include directive provide you with an interface to use the items (Classes, functions, variables, etc.) in the library•You do not have to incorporate the code of the library components into your program•You do not have to incorporate the code of the library components into your program•A system program caller linker establishes a link between your program and library codes at run time•The job of the linker is eased by the lib file•A lib file contains one or many compiled/object files indexed into one another to ease the linking process of library items and program codeprogramming codes ready for use by programmersCan be included in your project with the directive #includedirective provide you with an interface to use the items (Classes, functions, variables, etc.) in the libraryYou do not have to incorporate the code of the library components into You do not have to incorporate the code of the library components into establishes a link between your program lib filecontains one or many compiled/object files indexed into one of library items and program codeQtLibraries•Qtis a big library consisting of several smaller libraries•Common Qtlibraries are given on the table on the right ModuleQtCoreQt GUIQt MultimediaQt Multimedia WidgetsQt NetworkQt QMLQtQuick•You may find full definitions of these libraries at:http://doc.qt.io/qt-5/qtmodules.htmlQt Quick ControlsQt Quick DialogsQt Quick LayoutsQt SQLQt TestQt WebKit(Deprecated)Qt WebKit Widgets(Deprecated)Qt WidgetsDescriptionCore non-graphical classes used by other modules.Base classes for graphical user interface (GUI) components. Includes OpenGL.Classes for audio, video, radio and camera functionality.Widget-based classes for implementing multimedia functionality.Classes to make network programming easier and more portable.Classes for QML and JavaScript languages.A declarative framework for building highly dynamic applications with custom user interfaces.Reusable QtQuick based UI controls to create classic desktop-style user interfaces.Types for creating and interacting with system dialogs from a QtQuick application.Layouts are items that are used to arrange QtQuick 2 based items in the user interface.Classes for database integration using SQL.Classes for unit testing Qtapplications and libraries.Classes for a WebKit2 based implementation and a QML API. Deprecated in favorofQtWebEngine.WebKit1 andQWidget-based classes from Qt4.Classes to extend QtGUI with C++ widgets.Framework and Design Pattern•A frameworkis a large collection of components and conventions with a well-documented public API that enable the development of complex software •Qtis a framework; other are Eclipse, Spring, Microsoft .NET, etc.•A framework is implemented with •Design patterns are efficient and elegant problems in object-oriented software design•Design patterns are efficient and elegant problems in object-oriented software design•Design patterns are high-level abstract templates to particular kings of design problems•Several Qtclasses implement design patterns •Qtclasses QTextStreamand QDataStreamthe SerializerpatternFramework and Design Patternis a large collection of components and conventions documented public API that enable the development of ; other are Eclipse, Spring, Microsoft .NET, etc.A framework is implemented with design patternsare efficient and elegant solutions to common oriented software designare efficient and elegant solutions to common oriented software designlevel abstract templates that can be applied to particular kings of design problemsclasses implement design patterns QDataStreamare implementations of AntiPatterns•AntiPatternsare commonly used programming practices to recurring programming problems ineffective or inefficient•Examples of antiPatternare:•Design of a complicated interface that is hard to reuse or implement (Interface bloat)implement (Interface bloat)•Design of a class with too many functions combines model and view at the same •Introduction of unnecessary dependencies between object of software modules (Circular dependency•Copying and pasting existing programming codes (programming)commonly used programming practices / solutions to recurring programming problems that have proved to be Design of a complicated interface that is hard to reuse or Design of a class with too many functions , e.g. a class that model and view at the same time(Interface bloat)Introduction of unnecessary dependencies between object of Circular dependency)Copying and pasting existing programming codes (Copy and paste","libVersion":"0.2.3","langs":""}