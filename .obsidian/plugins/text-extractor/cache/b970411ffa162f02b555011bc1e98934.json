{"path":"Subjects/COS3721 - Operating Systems and Architecture/Unsorted/COS3721/Exam Shit (1)/Exam Shit/Excersizes/COS3721_TL_202_2_2019.pdf","text":"COS3721/202/2/2019 Tutorial Letter 202/2/2019 Solutions to assignment no.2 Operating Systems and Architecture COS3721 Semesters 2 Computer Science Department, School of Computing This tutorial letter contains important information about your module. BARCODE COS3721/202/2/2019 2 Assignment 2 – Semester 2 Due Date: 25 September 2019 Submission Procedure: Written/Typed. Submission online via myUnisa in a PDF format; Chapters in SGG: Chapters 7 – 11 and 14 – 16 Total for this Assignment: 50 marks Marking schema Question 1 [10 marks] 1.a (6), and [1.b or 1.c] (4) Question 2 [06 marks] 2.1 (6) or 2.2(6) Question 3 [14 marks] 3.1 (10) and 3.2(4) Question 4 [ 14 marks] 4.1 (3), 4.2(4), 4.3(3) and 4.4(4) Question 5 [ 06 marks] 5.1 (3) and 5.2 (3) Question 1 - Based on Chapter 7 of SGG 1.1 Consider the following snapshot of s system: Allocation Max Need Available A B C D A B C D A B C D A B C D P0 3 0 1 4 5 1 1 7 5 2 2 3 P1 2 2 1 0 3 2 1 1 P2 3 1 2 1 3 3 2 1 P3 2 2 1 0 4 6 1 2 P4 4 2 1 2 6 3 2 5 Answer the following questions using the banker’s algorithm: COS3721/202/2/2019 3 a. Illustrate that the system is in a safe state by demonstrating an order in which the processes may complete. Answer: [ 6 marks] We first calculate the need for each process and then, apply the Banker’s algorithm to the system to determine if the system is in a safe state. Complete the system with vector need. Allocation Max Need Available A B C D A B C D A B C D A B C D P0 3 0 1 4 5 1 1 7 2 1 0 3 5 2 2 3 P1 2 2 1 0 3 2 1 1 1 0 0 1 P2 3 1 2 1 3 3 2 1 0 2 0 0 P3 2 2 1 0 4 6 1 2 2 4 02 P4 4 2 1 2 6 3 2 5 2 1 1 3 Apply the banker’s algorithm 0: initially we have: Work = Available = (5, 2, 2,3) Finish =( 0, 0, 0, 0, 0) 1: We search for the process that needs fewer resources than those available. We use a topdown approach. 1.1- P0, P1, P2, and P4 need fewer resources that those available. We select P0. 1.2- Assume P0 has completed its execution and free its resources then, Available = Available + Allocation-0 = (5, 2, 2,3) + (3, 0, 1, 4) = (8, 2, 3, 7) Finish = (1, 0,0, 0, 0) 2: search the system for the next process that needs fewer resources than those available COS3721/202/2/2019 4 2.1- P1, P2 and P4 are found. We select P1. 2.2- Assume P1 has completed its execution and freed its resources then: Available = Available + Allocation-1 = (8, 2, 3, 7)+ (2, 2, 1, 0) = (10, 4, 4, 7) Finish = (1, 1,0, 0, 0) 3: search the system for the next process that can be completed. 3.1- P2, P3 and P4 can be completed. Thus, the system is in a safe state with the following execution sequences which are not exhaustive: P0, P1, and any combination of P2, P3 and P4 b. If a request from process P1 arrives for (1, 1, 0, 0), can the request be granted immediately? Answer: [ 4 marks] To answer this question, we apply the Banker’s resource-request algorithm. 1. We check if the requested resources are not greater than those needed. We therefore compare (1, 1, 0, 0) and (1, 0, 0, 1). It appears that P1 is requesting for more resources than those needed. And such, the request cannot be granted. c. If a request from process P3 arrives for (0, 0, 2, 0), can the request be granted immediately? Answer: [ 4 marks] 1. We first ensure that the resources requested by P3 are not greater than those needed by comparing (0, 0, 2, 0) and (2, 4, 0, 2). It appears that the requested resources are greater than those needed and thus, the request cannot be granted. COS3721/202/2/2019 5 Question 2 - Based on Chapter 8 of SGG 2.1 Consider a computer system with a 32-bit logical address and 4-KB page size. The system supports up to 512-MB of physical memory. How many entries are there in each of the following? a. A conventional single-level page table Answer: [ 3 marks] 2 20 entries b. An inverted page table Answer: [ 3 marks] 512 K K/4k = 128K entries. 2.2 Assuming a 1-KB page size, what are the page numbers and offsets for the following address references (provided as decimal numbers): a. 3085 b. 42095 c. 215201 d. 650000 e. 2000001 Answer: [ 6 marks: marks 3 correct answers; 2 marks each ] a. page = 3; offset = 13 b. page = 41; offset = 111 c. page = 210; offset = 161 d. page = 634; offset = 784 e. page = 1953; offset = 129 Question 3 - Based on Chapter 9 of SGG 3.1 Consider the following page reference string: 7, 2, 3, 1, 0, 5, 7, 4, 6, 7, 7, 1, 0, 5, 4, 6, 2, 3, 0, 1. Assuming demand paging with three frames, how many page faults would occur for the following replacement algorithms? • LRU replacement COS3721/202/2/2019 6 • FIFO replacement • Optimal replacement Answer: [ 10 marks: mark any two correct replacement algorithms. Give 5 marks for each correct answer] LRU replacement algorithm Input string 7 2 3 1 0 5 7 4 6 7 7 1 0 5 4 6 2 3 0 1 Fault? Y Y Y Y Y Y Y Y Y N N Y Y Y Y Y Y Y Y Y Frame 1 7 7 7 1 1 1 7 7 7 7 7 5 5 5 2 2 2 1 Frame 2 - 2 2 2 0 0 0 4 4 1 1 1 4 4 4 3 3 3 Frame 3 - - 3 3 3 5 5 5 6 6 0 0 0 6 6 6 0 0 Page fault rate = 18/20 FIFO replacement algorithm Input string 7 2 3 1 0 5 7 4 6 7 7 1 0 5 4 6 2 3 0 1 Fault? Y Y Y Y Y Y Y Y Y N N Y Y Y Y Y Y Y Y Y Frame 1 7 7 7 1 1 1 7 7 7 1 1 1 4 4 4 3 3 3 Frame 2 - 2 2 2 0 0 0 4 4 4 0 O 0 6 6 6 0 0 Frame 3 - - 3 3 3 5 5 5 6 6 6 5 5 5 2 2 2 1 Page fault rate = 18/20 Optimal replacement algorithm Input string 7 2 3 1 0 5 7 4 6 7 7 1 0 5 4 6 2 3 0 1 Fault? Y Y Y Y Y Y N Y Y N N N Y Y Y N Y Y N Y Frame 1 7 7 7 7 7 7 7 7 0 0 0 0 0 1 or 0 Frame 2 - 2 2 2 0 5 4 6 6 6 6 2 (6) 2 or 6 or 3 1 or 2 or 6 or 3 Frame 3 - - 3 1 1 1 1 1 1 5 4 2 (4) 2 or 4 or 3 1 or 2 or 4 or 3 Page fault rate = 14/20 COS3721/202/2/2019 7 3.2 When a page fault occurs, the process requesting the page must block while waiting for the page to be brought from disk into physical memory. Assume that there exists a process with five user-level threads and that the mapping of user threads to kernel threads is one to one. If one user thread incurs a page fault while accessing its stack, would the other user threads belonging to the same process also be affected by the page fault—that is, would they also have to wait for the faulting page to be brought into memory? Explain. Answer: [ 4 marks] Yes, because there is only one kernel thread for all user threads, that kernel thread blocks while waiting for the page fault to be resolved. Since there are no other kernel threads for available user threads, all other user threads in the process are thus affected by the page fault. Question 4 - Based on Chapter 10 & 11of SGG 4.1 The open-file table is used to maintain information about files that are currently open. Should the operating system maintain a separate table for each user or maintain just one table that contains references to files that are currently being accessed by all users? If the same file is being accessed by two different programs or users, should there be separate entries in the open-file table? Explain. Answer: [3 marks] By keeping a central open-file table, the operating system can perform the following operation that would be infeasible otherwise. Consider a file that is currently being accessed by one or more processes. If the file is deleted, then it should not be removed from the disk until all processes accessing the file have closed it. This check can be performed only if there is centralized accounting of number of processes accessing the file. On the other hand, if two processes are accessing the file, then two separate states need to be maintained to keep track of the current location of which parts of the file are being accessed by the two processes. This requires the operating system to maintain separate entries for the two processes. 4.2 Discuss the advantages and disadvantages of associating with remote file systems (stored on file servers) a set of failure semantics different from that associated with local file systems? Answer: [4 marks : give 2 for the advantage and 2 for the disadvantage] The advantage is that the application can deal with the failure condition in a more intelligent manner if it realizes that it incurred an error while accessing a file stored in a remote file system. For instance, a file open operation could simply fail instead of hanging when accessing a remote file on a failed server and the application could deal with the failure in the best possible manner; if the operation were simply to hang, then the entire application hangs, which is not desirable. The disadvantage however is the lack of uniformity in failure semantics and the resulting complexity in application code. COS3721/202/2/2019 8 4.3 Consider a file system that uses inodes to represent files. Disk blocks are 8 KB in size, and a pointer to a disk block requires 4 bytes. This file system has 12 direct disk blocks, as well as single, double, and triple indirect disk blocks. What is the maximum size of a file that can be stored in this file system? Answer: [ 3 marks] (12 * 8 /KB/) + (2048 * 8 /KB) + (2048 * 2048 * 8 /KB/) + (2048 * 2048 * 2048 * 8 /KB) = 64 terabytes 4.4 Fragmentation on a storage device can be eliminated by recompaction of the information. Typical disk devices do not have relocation or base registers (such as those used when memory is to be compacted), so how can we relocate files? Gives three reasons why recompacting and relocation of files are often avoided. Answer: [4 marks] Relocation of files on secondary storage involves considerable overhead—data blocks have to be read into main memory and written back out to their new locations. Furthermore, relocation registers apply only to sequential files, and many disk files are not sequential. For this same reason, many new files will not require contiguous disk space; even sequential files can be allocated noncontiguous blocks if links between logically sequential blocks are maintained by the disk system. Question 5 - Based on Chapter 14 of SGG 5.1 The access-control matrix can be used to determine whether a process can switch from, say, domain A to domain B and enjoy the access privileges of domain B. Is this approach equivalent to including the access privileges of domain B in those of domain A? Answer: [3 marks] Yes, this approach is equivalent to including the access privileges of domain B in those of domain A as long as the switch privileges associated with domain B are also copied over to domain A. 5.2 Describe how the Java protection model would be compromised if a Java program were allowed to directly alter the annotations of its stack frame. Answer: [3 marks] When a thread issues an access request in a doPrivileged() block, the stack frame of the calling thread is annotated according to the calling thread’s protection domain. A thread with an annotated stack frame can make subsequent method calls that require certain privileges. Thus, the annotation serves to mark a calling thread as being privileged. By allowing a Java program to directly alter the annotations of a stack frame, a program could potentially perform an operation for which it does not have the necessary permissions, thus violating the security model of Java. COS3721/202/2/2019 9 8.7 Other assessment methods No other assessment is proposed for this module. 8.8 The examination You exam is written in May/June for semester 1 students and October/November for semester two students. UNISA will inform you of the exam date. The examinations will primarily be based on the theory covered in your textbook. Past exam paper are available on myunisa. 1 FREQUENTLY ASKED QUESTIONS Can I use previous editions of the textbook? No, you have to use the latest edition. 2 SOURCES CONSULTED SILBERSCHATZ A., GALVIN P. & GAGNE G. Operating Systems Concepts, 9th Edition, John Wiley & Sons Inc., 2014.ISBN 978-11180-9375-7. 3 IN CLOSING We wish you a fascinating and satisfying journey through the learning material and trust that you will complete the module successfully. Enjoy the journey! @ Unisa 2019","libVersion":"0.2.3","langs":""}