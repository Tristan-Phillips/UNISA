{"path":"Subjects/COS3711 - Advanced Programming/Unsorted/Open Book Exam Files/Theory/COS3711 - QTSummaries.pdf","text":" COS3711 Summary For: An Introduction to Design Patterns in C++ with Qt By: Wilco Breedt    1. Reflection 2 2. Validation 5 3. XML 7 4. MV/MVC - Model View Architecture 8 5. Momento 13 6. Concurrency 15 7. Singleton 17 8. UML 18 9. Factory Method 19 10. Notes 20  COS3711 Wilco Breedt 1 1. Reflection 1. Inherit QObject 2. Q_OBJECT Macro 3. Q_PROPERTY(int size READ getSize WRITE setSize) 4. Q_PROPERTY(type name READ getter WRITE setter) 5. MOC (Meta Object Compiler) Looks for QOBJECT Macro and compiles a meta object file. Before RUNTIME. 6. Dynamic Properties (When you use setProperty and the property you are trying to set was NOT in the class Q_PROPERTY declared by yourself. This means you cannot use the QMetaProperty to get these values because Dynamic properties are created at RUNTIME where static properties are created BEFORE RUNTIME when the MOC generates the MetaObject for the class 7. QMetaObject - Object that carries meta data about another object (QObject) Used for reflection 8. Static Properties - Defined in the class - Information about static properties are created at compile time and exist within QMetaObject 9. Dynamic Properties- Defined outside the class - created at runtime and you cannot obtain information about them using the QMetaObject  ===================================image.h=================================== #ifndef IMAGE_H #define IMAGE_H  #include <QObject>  class public Image:   QObject // Inherit from QObject      { Q_OBJECT // QOBJECTMacro (MOC) Q_PROPERTY(int size READ getSize WRITE setSize) // Q_PROPERTY (MOC) Q_PROPERTY QString(  name READ getName WRITE setName) // Q_PROPERTY (MOC)  public: Image(); int getSize(); void setSize(int s); QString getName(); void setName(QString s);  private: int length; // Q_PROPERTY(int size ...) This does not have to be the same as the Q_PROPERTY that gets its value QString name; }; #endif // IMAGE_H    ===================================image.cpp===================================  #include \"image.h\"  Image::Image() {} void int Image::setSize(  s) {  length = s; } int Image::getSize() {  return length; } void Image QString::setName(  s) {  name = s; } QString Image  ::getName() {  return name; } COS3711 Wilco Breedt 2 ====================================main.cpp===================================  #include <QCoreApplication> #include <QDebug> #include <QMetaProperty> #include \"image.h\"  void printObject( *obj) {QObject     // Method that uses reflective techniques          const QMetaObject *meta = obj->metaObject(); QString className = meta->className(); QString result = \"\";  // Static Properties ( Was declared by yourself in the Q_PROPERTY of the class ) (Declared at compile time) // for (int i = meta->propertyOffset(); i < meta->propertyCount(); i++) Get rid of properties in base class for (int i = 0; i < meta->propertyCount(); i++) { // First method to get value of meta property const QMetaProperty metaProp = meta->property(i); const char *name = metaProp.name(); // Get the name of the meta property QVariant value = obj->property(name); // Get the value of the meta property  // Convert meta property name to QString if you have to // QString name = QString(metaProp.name());  // Second method to get value of meta property // const QMetaProperty metaProp = meta->property(i); // QVariant value = metaProp.read(obj); result += QString(\"%1 %2 \").arg(name).arg(value.toString()); } // Dynamic Properties (Wasn’t declared in the Q_PROPERTY/ Declared at RUNTIME) foreach(QByteArray dynamicPropName, obj->dynamicPropertyNames()) { QVariant value = obj->property(dynamicPropName); result += QString(\"%1 %2 \") .arg( (dynamicPropName))QString .arg(value.toString()); } qDebug() << result << endl; } COS3711 Wilco Breedt 3 QString QList Image toString( < *> list) {    QStringList merge; foreach(Image *i, list) { const QMetaObject *metaObj = i->metaObject(); for (int in = 0; in < metaObj->propertyCount(); in++) { const QMetaProperty metaProp = metaObj->property(in); const char *name = metaProp.name(); QVariant value = i->property(name); merge.append( (QString \"Name %1, Value %2\").arg(name).arg(value.toString())); } foreach(QByteArray dynamicPropName, i->dynamicPropertyNames()) { QVariant value = i->property(dynamicPropName); merge.append( (QString \"DName %1, Value %2\").arg( (dynamicPropName)).arg(value.toString()));QString } } // If the Object is not a pointer (Image *i) -> Image i                        // foreach(Image i, list) {      // const QMetaObject metaObj = i.metaObject();        // for (int in = 0; in < metaObj.propertyCount(); in++) {                  // const QMetaProperty metaProp = metaObj.property(in);        // const char *name = metaProp.name();        // QVariant value = i.property(name);      // merge.append(QString(\"Name %1, Value %2\").arg(name).arg(value.toString()));      // } // foreach(QByteArray dynamicPropName, i.dynamicPropertyNames()) {      // QVariant value = i.property(dynamicPropName);      // merge.append(QString(\"DName %1, Value %2\").arg(QString(dynamicPropName)).arg(value.toString()));      // } // } qDebug() << merge.join( )\";\"  << endl; return merge.join( );\";\" } int int char main(  argc,   *argv[]) { QCoreApplication a(argc, argv); Image *img = new Image(); // Setting values img->setProperty( ,\"name\"  \"Wilco.png\"); // img->setName(\"Wilco\"); img->setProperty( ,\"size\"  100); // img->setSize(100); img->setProperty( ,\"name2\"  \"Wilco2.png\"); // Dynamic Property // Getting Values int imageSize = img->property( ).toInt();\"size\"  // ->property returns QVariant // OR QVariant name = img->property( );\"name\"  // ->property returns QVariant QString imageName = name.toString(); // Convert to QString qDebug() << imageName << imageSize << endl; // Log to debug console printObject(img);  Image img2; // Image *img2 (If you want to make it a pointer) img2.setName( );\"Woohoo\"  // img2->setName(\"Woohoo\") img2.setSize( );100  // img2->setSize(100) img2.setProperty( ,\"BLEH\"  \"ABC123\"); // Dynamic Property (img2->setProperty ... QList Image< *> myImageList; // QList must have QObject POINTERS myImageList.append(&img2); // myImageList.append(img) myImageList.append(&img2); // myImageList.append(img) qDebug() << myImageList[ ]->0 metaObject()->className() << endl;    toString(myImageList); return a.exec(); }   COS3711 Wilco Breedt 4 2. Validation Input Masks - is an active pattern that controls what can be typed into an input widget by the user.  Validator - are objects that can be attached to input widgets (such as QLineEdit , QSpinBox , and QComboBox ) to provide a general framework for checking user input  AntiPattern - a commonly used programming practice that has proved to be ineffective, inefficient, or otherwise counterproductive. Below is a list of antiPatterns. ● Software design antiPatterns ○ Input kludge - Failing to specify and implement the handling of possibly invalid input. ○ Interface bloat - Making an interface so powerful and complicated that it is hard to reuse or implement. ○ Race hazard - Failing to see the consequence of different orders of events. ● Object-oriented design antiPatterns ○ Circular dependency - Introducing unnecessary direct or indirect mutual dependencies between objects or software modules. ○ God Object - An object that has too much information or too much responsibility. This can be the result of having too many functions in a single class. It can arise from many situations, but it often happens when code for a model and view are combined in the same class. ● Programming antiPatterns ○ Hard coding - Embedding assumptions about the environment of a system in its implementation. ○ Magic numbers - Including unexplained numbers in algorithms. ○ Magic strings - Including literal strings in code, for comparisons, as event types, etc. ● Methodological antiPatterns ○ Copy and paste programming - Copying and modifying existing code without creating more generic solutions. ○ Reinventing the (square) wheel - Failing to adopt an existing, adequate solution and, instead, adopting  Regular Expression  How to use a validator ? 1. A validate on a line edit (set a validator) 2. Use the validate functions within QT Examples: QRegularExpression exp( );\"[1-9]\\\\d*(\\\\.\\\\d+)?\" QLineEdit *lineEdit = new QLineEdit(); QRegularExpressionValidator *v = new QRegularExpressionValidator(exp); // Option 1 : A validate on a QLineEdit lineEdit->setValidator(v); // Option 2 Use validation functions of QT: int pos = 0; if (v->validate(lineEdit->text(), pos) == :: ) {     QValidator Acceptable    // QValidator::Acceptable (completely valid) // QValidator::Intermediate (Almost valid) // QValidator::Invalid (Not valid at all) // Do something that must be done. }   COS3711 Wilco Breedt 5  Regex Guide: [abc] Matches either an a, b or c character (A Single Character) [^abc] Matches any character except for an a, b or c [a-z] Matches any characters between a and z, including a and z [^a-z] Matches any characters except those in the range a-z . Matches any character other than newline (or including newline with the /s flag) \\. Matches the `.` (fullstop) Matches the `&` (ampersand) Matches the `@` (at) \\& \\@  \\s Matches any space, tab or newline character \\S Matches anything other than a space, tab or newline \\d Matches any decimal digit. Equivalent to [0-9] \\D Matches anything other than a decimal digit \\w Matches any letter, digit or underscore. Equivalent to [a-zA-Z0-9_] \\W Matches anything other than a letter, digit or underscore (...)Parts of the regex enclosed in parentheses may be referred to later in the expression or extracted from the results of a successful match. (a|b) Matches the a or the b part of the subexpression. (A or B) a? Matches an `a` character or nothing (Zero or One) a* Matches zero or more consecutive `a` characters. a+ Matches one or more consecutive `a` characters. (abc)+ Matches one or more consecutive `abc` characters. abcabcabc a{3} Matches exactly 3 consecutive `a` characters. a{3,} Matches at least 3 consecutive `a` characters. a{3,6} Matches between 3 and 6 (inclusive) consecutive `a` characters ^ Matches the start of a string without consuming any characters. If multiline mode is used, this will also match immediately after a newline character $ Matches the end of a string without consuming any characters. If multiline mode is used, this will also match immediately before a newline character. \\b Matches, without consuming any characters, immediately between a character matched by \\w and a character not matched by \\w (in either order). It cannot be used to separate non words from words. ^\\w+$ Matches the word from start till end. If any space, tab, newline breaks it it doesn’t match. ^(\\w+)$ Match enige aaneenlopende sin sonder spasies  COS3711 Wilco Breedt 6 3. XML  <imageList> imageList, image, name → QDomElements <image size=2> imageList → RootElement  <name>Image 1</name> “Image 2”, “Image 1” → QDomText </image> size=2, size=5 → Attribute <image size=5> Complete XML → QDomDocument  <name>Image 2</ >name </image> </imageList>  Code: QDomDocument doc; QDomElement imageList doc.createElement( ); =  \"imageList\" doc.appendChild(imageList); QDomElement image = doc.createElement( );    \"image\" imageList.appendChild(image); image.setAttribute(\"size\", ); 2 QDomElement name doc.createElement( ); =  \"name\" image.appendChild(name); QDomText nameText = doc.createTextNode( );    \"Image 2\"   name.appendChild(nameText); QString xml = doc.toString();      void someFuction( <Image*> list) {QList     QDomDocument doc; QFile file( );\"...\" QDomElement imageList = doc.createElement( );\"imageList\" doc.appendChild(imageList);  foreach(Image *i, list) { QDomElement image = doc.createElement( );\"image\" imageList.appendChild(image); image.setAttribute(\"size\", i->getSize()); QDomElement name = doc.createElement( );\"name\" image.appendChild(name); QDomText nameText = doc.createTextNode(i->getName()); name.appendChild(nameText); } QString xml = doc.toString(); } COS3711 Wilco Breedt 7 4. MV/MVC - Model View Architecture 1. Views - ONLY displays the data, declare one instance and set the Model (that is basically the only thing you do with it) The rest of the things comes from the Model (use setModel to set the view) a. QTableView (Model Based) b. QListView (Model Based) c. QTreeView (Model Based) d. QTableWidget (Item Based/ Convenience class) e. QListWidget (Item Based/ Convenience class) f. QTreeWidget (Item Based/ Convenience class) 2. Models - Serve the DATA to the Views (Remember Abstract means you cannot use it, you can not make an instance of it, you cannot instantiate it ! you need to inherit it and then you can use it !!! QAbstractItemModel, QAbstractTableModel, QAbstractListModel) Concrete models are models of which you can make a instance of  Objectives when using a QAbstractTableModel (Nothing is done on the View, everything is done on the MODEL!) : 1. Headers 2. Edit table data (Double click on row and edit it) COS3711 Wilco Breedt 8 3. Add table data (Add rows) 4. Remove / Delete data (Delete rows)  How to implement a QAbstractTableModel (subclassing it): ● Functions YOU MUST IMPLEMENT !!!!!!! ○ rowCount() (pure virtual)→ How many rows are in your data ○ columnCount() (pure virtual) → How many columns are there in your data ○ data() (pure virtual) → To return the actual value / data (provides the data for each and every CELL in your table) ○ headerData() (This is just to make it a WELL behaved model) ● Functions to implement if you want your model to be EDITABLE ! ○ setData() (If you want your table to be editable) ○ flags() that returns a value containing Qt::ItemIsEditable / Qt::ItemIsSelectable / Qt::ItemIsEnabled  int const const MyModel::rowCount(  QQModelIndex &parent)    { // Q_UNUSED(parent); // Sodat jy nie warnings kry vir goed wat nie gebruik word nie. return list.count(); // list.length - 1 ?? } int const const MyModel::columnCount(  QQModelIndex &parent)    { // Q_UNUSED(parent); // Sodat jy nie warnings kry vir goed wat nie gebruik word nie. return headers.count(); // headers.length - 1 ?? } // Get the header data        QVariant Qt MyModel::headerData( section,int    ::Orientation orientation, role)   int   const // MUST IMPLEMENT    { if (role != Qt::DisplayRole) // If it is not for display purposes don't return QVariant { // Readonly return QVariant(); } if (orientation == Qt::Vertical) // orientation != Qt::Horizontal { return QVariant(); } return headers.at(section); // Headers are stored in QList<QString> || QStringList; // return headers[section]; }  // Get the data for each cell          QVariant QModelIndex MyModel::data(const   &index, role) int   const // MUST IMPLEMENT    { COS3711 Wilco Breedt 9 if (!index.isValid()) // Check if the index is VALID ! { return QVariant(); } if (role == Qt::DisplayRole || role == Qt::EditRole) // Important { // int row = index.row(); // int col = index.column(); // QObject *object = list[row]; // QString columnName = headers[col]; // QVariant value = object->property(columnName.toStdString().c_str()); // Return const char // return value; return list[index.row()]->property(headers[index.column()].toStdString().c_str()); // Return the data requested. } return QVariant(); } void MyModel::insert() // Do not have to implement, just for fun.                { QObject *object = new QObject(); foreach(QString header, headers) { object->setProperty(header.toStdString().c_str(), \"MyTest\"); } list.append(object); }  // Set the data for a cell // Must be here to edit the MODEL !!                            bool const const int MyModel::setData(  QModelIndex &index,   QVariant &value,   role) // MUST   IMPLEMENT EDITABLE { COS3711 Wilco Breedt 10 if (role == Qt::EditRole && index.isValid()) { int row = index.row(); int col = index.col(); // list[row]->setProperty(headers[col].toStdString().c_str(), value); list.at(row)->setProperty(headers.at(col).toStdString().c_str(), value); emit dataChanged(index, index); // Signal the view that the data changed. return true; } return false; } // Must be here to edit the MODEL !!                Qt ItemFlags QModelIndex::  MyModel::flags(const   &index)  // MUST   IMPLEMENT EDITABLE { // Do some check here to see if you are allowed to edit it ? // If everything is editable then return everything ! return (Qt::ItemIsEditable | Qt::ItemIsSelectable | Qt::ItemIsEnabled); } MVC: Model → Application object / data V: View → Presentation C: Controller → Controls data flow from the model to the view or from the view to the model. Notifies everyone of what is happening. MV Delegate: Renders items for editing (QSpinBox, QLineEdit etc.) Sits between the Model and View  Transition from MVC to MV (Why MV is a good example of MVC): ● Do not see the C (Controller) ● View and Controller are merged together ● If something changes in the model, the view is notified, if something changes on the view the model is notified  The controller is like an observer (it observes the changes on the model & view).  What is the relationship between MVC and observer pattern ● In the observer pattern the observer automatically respond to events occurring in the subject/ its subjects ● In the same way the model, view and controller automatically respond to data changes within each other. ● This can hence be seen as they are observing each other  MV vs MVC COS3711 Wilco Breedt 11 In the MV pattern there is no controller, there is however a delegate, which is used to render items for editing on the view and update the model with values from the view when editing is done from the view. A delegate can therefore be seen as playing the role of a controller in the MV vs MVC architecture.  Difference between QTableView/QAbstractItemModel and QTableWidget (What is the difference between item based and model based views) ● QTableWidget (Item based) handles the data for you/data is stored in the widget (This is a convenience class) ● QTableView (Model based) requires a model to handle the data for you ● Item based Less flexible ○ In Model based the view and the model are separated, this makes it more flexible because you can have multiple views for the same model, or multiple models for the same view. ○ Model and View are tightly coupled together in the item based. ○ Item based is not reusable because the data is stored within the widget (the view moves with the data)  COS3711 Wilco Breedt 12 5. Momento ● When you want to serve the state of an object (state = data within the class) in a previous time frame (basically it is used to restore data) ● 3 classes involved ○ Originator → Class that has the state that you want to serve (The class you want to backup) The originator must handle the back-up logic (So all the logic basically comes here) ○ Memento → Copy the state of the Originator (This is where the backup is stored) ○ Caretaker → Stores the memonto’s ● Momento class (Backup class) → Only has the state + a getter and a setter to set the data  // Originator  class ImageList { public: ImageList(); Backup getBackup(); void restore(Backup b); private: QList Image< > list; }; // Implementation of the getters and setters within the ImageList Backup ImageList  ::getBackup() { Backup b; b.setList( );list return b; } void ImageList Backup::restore(  b) { list = b.getList(); } // Memento  class Backup { public: Backup(); void setList( < >QList Image  l); QList Image< > getList(); private: COS3711 Wilco Breedt 13 QList Image< > list; }; // Caretaker class public BackupList:   QList Backup< > { public: BackupList(); }; Basic steps of the client: 1. Backup a. Get an instance from the originator using the getter you declared b. Store that backup instance in the caretaker. 2. Restore a. Get the instance of the backup in the caretaker b. Use the setter you declared in the originator to restore the backup // CLIENT  ImageList i; BackupList bl; // Backup Backup b = i.getBackup(); // Get a instance from originator. bl.append(b); // Store the backup in the caretaker  // Restore Backup r = bl.at( );0  // bl[0] // Get the backup from the caretaker. i.restore(r); // Restore the backup in the originator.  Encapsulation REQUIREMENT Should always satisfy this ! ● Caretaker must NOT be able to modify the memento ● Make everything private and make the originator a friend class ● See below how to do this !  // Memento  class Backup { private: friend class ImageList; Backup();  void setList( < >QList Image  l); QList Image< > getList(); QList Image< > list; };  COS3711 Wilco Breedt 14 6. Concurrency ● The ability to run multiple processes at the same time (Threads) ● Example: You want to loop a 900 times over 0 - 900. Then check if the numbers are prime numbers. Imagine if it took 1 second for a check, this means your program will be busy for 900 seconds. But if you split it into threads [0 - 300, 301 - 600, 601 - 900] and execute those loops at the same time, then it will take a ⅓ of the time to complete the 900 loop.  Have two things involved in threads (Two classes involved) 1. Worker → Does the actual work (Does the loop) a. Must be a QObject b. Use signals to communicate with the Client 2. Client → The one telling the worker to do its stuffies  // Worker, USING THE QOBJECT is the RECOMMENDED APPROACH !! class public SearchImages:   QObject { Q_OBJECT public: SearchImages(); // QList<Image> search(QList<Image> list, int size); void search( < >QList Image  list, int size); // Changed the above to this to make it use signals and slots signals: void imageFound( );Image  // Signal for when a image is found to emit outside the thread. void finished(); }; // Client QList Image< > imgList; QThread *thread = new QThread(); SearchImages *s = new SearchImages(); // Move the QObject to thread, moveToThread exists on QObject class s->moveToThread(thread); Connect Basic Params// connect(senderObject, signalOnSenderObject, receiverObject, slotOnReceiverObject)  // When the thread starts, start the search function in SearchImage Class connect(thread, SIGNAL(started()), s, SLOT(search(imgList, 300))); // Connect when the SearchImage finds an image and emits it and then sends the image to the handleImage function. connect(s, SIGNAL(imageFound( )),Image  this, SLOT(handleImage( )));Image  // The following 3 steps ARE FOR CLEANUP !! connect(s, SIGNAL(finished()), thread, SLOT(quit()); // When done, quit the thread, CLEANUP connect(thread, SIGNAL(finished()), thread, SLOT(deleteLater()); // Delete the thread nicely, CLEANUP connect(thread, SIGNAL(finished()), si, SLOT(deleteLater())); // Delete the worker nicely, CLEANUP thread->start(); // Emits the signal started ... and then the above search(size) SIGNAL SLOT gets handled,  COS3711 Wilco Breedt 15  QProcess ● Run an exe ● readyReadStandardOutput - Signal that gets emitted when something is printed to the CONSOLE !!!  QProcess QProcess *process =   new  (); connect(process, SIGNAL(readyReadStandardOutput()), this, SLOT(manage()); process->start(\"image.exe\");  void manage() { QByteArray ba = process->readAllStandardOutput(); // Readline QString output = QString(ba); QStringList lines = output.split( );\"/n\" } COS3711 Wilco Breedt 16 7. Singleton ● ONE instance ● Can be asked with Memento ● Steps ○ 1. Hide the constructor → Move the constructor to the private members ○ 2. Create a method on the class to get an instance. (getInstance) ○ 3. Make that method that you created (getInstace) a static method, this makes it easier so you can call it like so. BookList bl = BookList::getInstance(); ○ This makes the getInstance function INSTANCE INDEPENDANT ○ 4. Create a static Variable to STORE the instance in static BookList *instance;  ImageList ImageList*  ::list =   NULL;  // HOW TO INITIALIZE a static variable within a class (If it was a ImageList) int* ::size = ; ImageList    0  // HOW TO INITIALIZE a static variable within a class (If it was a int)  class public BookList:   QObject { public: static BookList* getInstance(); private: BookList(); QList<Book> list; static BookList* instance; }; BookList BookList*  :: = ;instance   NULL  BookList BookList*  ::getInstance() { If (instance == NULL) { // if (BookList::instance == NULL) instance = new BookList(); // BookList::instance = new BookList(); } return instance; // return BookList::instance; }  DO NOT TRY THE FOLLOWING THIS ! BookList l; // CANNOT instantiate an instance since the singleton pattern let you mark the constructor as private ! BookList b = I.getInstance() // This will not work since the previous line cannot be instantiated.  COS3711 Wilco Breedt 17 8. UML   COS3711 Wilco Breedt 18 9. Factory Method ● Anywhere where there are inheritance, you can possibly use the factory method  UML Before Factory Method: (Student is an abstract class in the UML Diagram)  UML After Factory Method applied COS3711 Wilco Breedt 19 The whole idea of the factory method is to let the client NOT be aware of all of the other classes. The client only has to be aware of the The AbstractFactory and the AbstractStudent. This makes it a lot easier and scalable if you have multiple models inheriting from the one Student Object. This decouples the classes from each other.  How to implement the createStudent Function: Student StudentFactory*  ::createStudent(n: QString)  { if (n == \"diploma\") return new Student(); if (n == \"degree\") return new Student(); }; In your client: (this is usually your main.cpp file or you mainwindow.cpp file or something similar)  AbstractStudentFactory *f = new StudentFactory(); Student *myDiplomaStudent = f.createStudent(\"diploma\");  This is actually really simple as you can see, but it can be hard to understand at first if you are not sure what is going on, please checkout the github repo for examples on this.  COS3711 Wilco Breedt 20 10. Notes 1. This summary is only there to explain some key concepts within the book that is unclear sometimes. You will need to practice all of these concepts at least once to understand it. Below you will find a link to a github repo containing one example for each of the topics within this summary. If you want to cover about 70% of your exam really quickly just have a look at the QUESTIONS you HAD TO SUBMIT for the subject in your assignment 1 and 2. These are the core concepts that they WILL ask you in the exam. If you practice just the concepts you had in your assignments then there is a good chance you will pass the exam with at least 70% if you have mastered the concepts (And by this I mean, you can identify the concept quickly within a question and you can actually do the code to implement it) 3. Another good tip to note is that they love to ask multiple concepts within an question the combos are usually: a. MVC with Memento b. Memento with Singleton 4. When the new operator is used, then the object that it returns is a POINTER !!!! Page 75 in the textbook explains this in more detail a. QString QString *myStr = new  (“ABC”) // Pointer; b. QString myStr = (“ABC”) QString // No pointer; 5. Incase you still struggle with the concepts please visit VTutorOnline, they provide a great course that will definitely help you understand every concept clearly and help you to identify and sharpen your skills : https://www.vtutoronline.com/courses/UNS_COS3711/lessons-schedule 6. Visit the GITHUB repository that has a few code examples within it .https://github.com/WilcoBreedt/cos3711 COS3711 Wilco Breedt 21","libVersion":"0.2.3","langs":""}