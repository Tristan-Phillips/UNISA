{"path":"UNISA/98906 - BSc Science in Computing/COS3751 - Techniques of Artificial Intelligence/Telegram Notes/Materials/chapter_3_pie_summary_artificial_intelligence_a_modern_approach.pdf","text":"Downloaded by Xolani Mazibuko (mazi76erx@gmail.com) lOMoARcPSD|4629465 Chapter 3 PIE • Uninformed search strategies – No extra information on states – Generate successors and distinguish goal states from non-goal state – Informed (heuristic) search • Can determine if one non-goal state is “more promising” than another non-goal state – Order in which nodes are expanded determined by search strategy • Breadth-first search – All nodes on given depth expanded before any nodes on next depth are expanded – Implemented with first-in-first-out queue – Goal test is applied when node is generated – Strategy is complete • Space and time complexity – Each state has b successors – Root has 1 node, then b nodes, then b2 nodes, then b3 nodes, etc. – Suppose solution is on depth d – Total number of nodes generated is )( 32 dd bObbbb   – Each node that is generated must be stored in the memory – Space complexity the same as time complexity • Uniform-cost search – Breadth-first search optimal if all step costs are equal – Uniform-cost search optimal with any step cost function – Expand node n with smallest path cost – If step costs are equal, search strategy identical to breadth-first search – Can get stuck in infinite loop – Complete strategy if cost of each step is larger than small positive constant  Downloaded by Xolani Mazibuko (mazi76erx@gmail.com) lOMoARcPSD|4629465 • Depth-first search – Always expands deepest node in current fringe of search tree  Relative modest memory requirements  Store single path from root to leaf node, along with remaining unexpanded sibling nodes for each node on the path  Once node has been expanded, it can be removed from memory as soon as all its descendants have been fully explored  Suppose state space has branching factor b and maximum depth m  Requires storage of bm + 1 nodes  Time complexity is O(b m)  Space complexity is O(bm)  With wrong choice depth-first search get into very long (or possibly infinite) path  Worst that can happen is that all O(b m) nodes in search tree are generated  Please note that m can be much larger than d  If search tree is unbounded then m is infinite Downloaded by Xolani Mazibuko (mazi76erx@gmail.com) lOMoARcPSD|4629465 • Backtracking search – Use less memory than depth-first search – Only one successor is generated – Space complexity is O(m) – Variation: successor is generated by modifying current state – Memory requirement: one state, O(m), actions • Depth-limited search – Solves problem of unbounded trees with predetermined depth-limit ℓ – Nodes on depth of ℓ have no successors – Incomplete if ℓ < d – Non-optimal if ℓ > d – Time complexity: O(bℓ) – Space complexity: O(bℓ) – Depth-first search special case with ℓ = ∞ (infinite) • Background knowledge of problem can help to determine ℓ Downloaded by Xolani Mazibuko (mazi76erx@gmail.com) lOMoARcPSD|4629465 • Iterative deepening depth-first search – Used in combination with depth-first search – Determines best depth limit – Increase depth gradually, first 0, then 1, then 2, etc., until goal is found – Combine properties of depth-first search and breadth-first search – Space complexity is O(bd) – Time complexity is O(b d) – Complete if branching factor is finite – Optimal if path cost is non-decreasing function of depth of node – Although states are generated more than once, strategy is very effective – Strategy is similar to breadth-first search Downloaded by Xolani Mazibuko (mazi76erx@gmail.com) lOMoARcPSD|4629465  Bidirectional search o Perform two simultaneous searches  One forward from initial state  Other backwards from goal  Stop when two searches come together in the middle  Time complexity is O(b d/2)  Space complexity is also O(b d/2)  Latter is main drawback  Strategy is complete and optimal (for equal step costs) if both searches are breadth-first  Search backwards sometimes difficult o More than one goal state  Most difficult case when goal test is implicit description of goals  Summary of algorithms Downloaded by Xolani Mazibuko (mazi76erx@gmail.com) lOMoARcPSD|4629465 (1 pound = 453.59 grams) Chapter 3 NN Problem Statement A produce dealer has a warehouse that stores a variety of fruits and vegetables. When fruit is brought to the warehouse, various types of fruit may be mixed together. The dealer wants a machine that will sort the fruit according to type. There is a conveyer belt on which the fruit is loaded. This conveyer passes through a set of sensors, which measure three properties of the fruit: shape, texture and weight. These sensors are somewhat primitive. The shape sensor will output a 1 if the fruit is approximately round and if it is more elliptical. The texture sensor will output a 1 if the surface of the fruit is smooth and if it is rough. The weight sensor will output a 1 if the fruit is more than one pound and if it is less than one pound. The three sensor outputs will then be input to a neural network. The purpose of the network is to decide which kind of fruit is on the conveyor, so that the fruit can be directed to the correct storage bin. To make the problem even simpler, let’s assume that there are only two kinds of fruit on the conveyor: apples and oranges.  Perceptron Downloaded by Xolani Mazibuko (mazi76erx@gmail.com) lOMoARcPSD|4629465  Two-Input case  The single neuron perceptron can classify input vectors into two categories  Assume w1,1 = 1 and w1,2 = 2  Then a = hardlims(n)  = hardlims([1 2]p + b)  Assume [1 2]p  -b then a = 1  Assume [1 2]p < -b then a = -1  The next figure shows b = -2  The decision boundary between the categories is determined by the equation Wp + b = 0  The boundary is linear  A single layer perceptron can only be used to recognize patterns that are linearly separable Downloaded by Xolani Mazibuko (mazi76erx@gmail.com) lOMoARcPSD|4629465  Pattern recognition example o Use a single neuron perceptron for two categories Downloaded by Xolani Mazibuko (mazi76erx@gmail.com) lOMoARcPSD|4629465","libVersion":"0.2.3","langs":""}